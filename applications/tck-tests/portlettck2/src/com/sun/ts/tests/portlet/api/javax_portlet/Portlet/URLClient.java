/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
/**
 * Copyright 2007 IBM Corporation.
 */
package com.sun.ts.tests.portlet.api.javax_portlet.Portlet;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        URLClient theTests = new URLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
     * Returns the name of the default portlet app.
     */
    public String getDefaultPortletApp() {
        return "portlet_jp_Portlet_web";
    }

    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: DestroyTest
     * @assertion_ids: PORTLET:JAVADOC:85;
     * @test_Strategy: Checks in render() that destroy() has not been called.
     * @assertion: Called by the portlet container to indicate to a
     *             portlet that the portlet is being taken out of service.
     */
    public void DestroyTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "DestroyTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: InitPortletExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:87;PORTLET:SPEC:6;
     * @test_Strategy: Throws PortletException in init() and checks
     *                 that render() is not invoked.
     * @assertion: if an exception has occurred that interferes with
     *             the portlet's normal operation.
     */
    public void InitPortletExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InitPortletExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: InitTest
     * @assertion_ids: PORTLET:JAVADOC:86;PORTLET:SPEC:5;
     * @test_Strategy: Checks in render() that init() has been called.
     * @assertion: Called by the portlet container to indicate to a
     *             portlet that the portlet is being placed into
     *             service.  The portlet container calls the init
     *             method exactly once after instantiating the
     *             portlet.  The init method must complete
     *             successfully before the portlet can receive any
     *             requests.
     */
    public void InitTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InitTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: InitUnavailableExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:88;PORTLET:SPEC:6;
     * @test_Strategy: Throws UnavailableException in init() and
     *                 checks that render() is not invoked.
     * @assertion: if the portlet cannot perform the initialization at
     *             this time.
     */
    public void InitUnavailableExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InitUnavailableExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: NoActionProcessActionTest
     * @assertion_ids: PORTLET:JAVADOC:89;
     * @test_Strategy: Makes a first request to the portlet to get a
     *                 render PortletURL using
     *                 RenderResponse.createRenderURL(), then makes a
     *                 second request with that PortletURL.  In this
     *                 second request, processAction() sets an
     *                 attribute.  Checks for this attribute in
     *                 render().  The test passes if this attribute is
     *                 not found.
     * @assertion: This method is called if the client request was
     *             originated by a URL created (by the portlet) with
     *             the RenderResponse.createActionURL() method.
     */
    public void NoActionProcessActionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "NoActionProcessActionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    
    /*
     * @testName: ProcessActionTest
     * @assertion_ids: PORTLET:JAVADOC:89;PORTLET:SPEC:14;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() sets an attribute.  Checks for
     *                 this attribute in render().
     * @assertion: Called by the portlet container to allow the
     *             portlet to process an action request.
     */
    public void ProcessActionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ProcessActionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }
    
    /*
     * @testName: AnnotatedProcessActionTest
     * @assertion_ids: PORTLET:JAVADOC:89;PORTLET:SPEC:14;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() sets an attribute.  Checks for
     *                 this attribute in render().
     * @assertion: Called by the portlet container to allow the
     *             portlet to process an action request.
     */
    public void AnnotatedProcessActionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "AnnotatedProcessActionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: ProcessActionUnavailableExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:92;PORTLET:SPEC:23;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() throws UnavailableException and
     *                 render() prints some text to the output.  Test
     *                 passes if that text doesn't appear in the HTTP
     *                 response.
     * @assertion: if the portlet is unavailable to process the action
     *             at this time.
     */
    public void ProcessActionUnavailableExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ProcessActionUnavailableExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }
    
    /*
     * @testName: ProcessEventUnavailableExceptionTest
     * @assertion_ids: PORTLET:SPEC:24;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() throws UnavailableException and
     *                 render() prints some text to the output.  Test
     *                 passes if that text doesn't appear in the HTTP
     *                 response.
     * @assertion: if the portlet is unavailable to process the event
     *             at this time.
     */
    public void ProcessEventUnavailableExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ProcessEventUnavailableExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: RenderTest
     * @assertion_ids: PORTLET:JAVADOC:94;
     * @test_Strategy: Prints text to the output in render().
     * @assertion: Called by the portlet container to allow the
     *             portlet to generate the content of the response
     *             based on its current state.
     */
    public void RenderTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
    /*
     * @testName: ServeResourceTest
     * @assertion_ids: PORTLET:SPEC:17;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 resource PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 serveResource() print text to the output stream in
     *                 serveResource(). Searches for text in the HTTP
     *                 response.
     * @assertion: If the client request is triggered by a resource URL,
     * 			   the portal/portletcontainer must invoke the
     * 			   serveResource method of the target portlet
     * 			   with the possible exception of content that
     * 			   has a valid cache entry.
     */
    public void ServeResourceTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ServeResourceTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }
}
