/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.common.client; 

import com.sun.ts.lib.util.TestUtil;
import com.sun.ts.tests.common.webclient.validation.TokenizedValidator;
import com.sun.ts.tests.common.webclient.http.HttpRequest;
import com.sun.ts.tests.common.webclient.http.HttpResponse;

import org.apache.commons.httpclient.Header;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;

/**
 *  A subclass of webclient.validation.TokenizedValidator.
 * The reason for subclass is to tune the response content generated by the 
 * code in case of error. This class would read a property defined
 * in ts.jte to decide on level of output that is generated.
 * If the property is set to RESPONSE_CONTENT_OUTPUT_LEVEL_TCK, then, it just 
 * prints the content that is within the <portlet-tck> tag. Else it dumps 
 * the whole output in the DetailBuffer.
 */
public class PortletWebValidator extends TokenizedValidator {

    public static String RESPONSE_CONTENT_OUTPUT_LEVEL = "outputResponseContentLevel";
    public static String RESPONSE_CONTENT_OUTPUT_LEVEL_TCK = "0";
    public static String RESPONSE_CONTENT_OUTPUT_LEVEL_ALL = "1";

    /**
     * <code>checkSearchStrings</code> will scan the response for the
     * configured strings that are to be expected in the response.
     *<ul>
     *  <li>
     *    Check search strings
     *  </li>
     *   <ul>
     *      <li>
     *         <p>If list of Strings is null, return true.</p>
     *      </li>
     *      <li>
     *         <p>If list of Strings is not null, scan response
     *            body.  If string is found, return true, otherwise
     *            display error and return false.</p>
     *      </li>
     *   </ul>
     * </ul>
     *
     * @return boolen result of check
     * @throws IOException if an IO error occurs during validation
     */
    protected boolean checkSearchStrings() throws IOException {
        List list = _case.getSearchStrings();
        if (list != null && !list.isEmpty()) {
            String responseBody = _res.getResponseBodyAsString();
            Iterator iter = list.iterator();
            boolean found = true;
            String search = null;
            while (iter.hasNext()) {
                search = (String) iter.next();
                TestUtil.logTrace("[PortletWebValidator] Scanning response for " +
                    "search string: '" + search + "'");
                if (responseBody.indexOf(search) < 0) {
                    found = false;
                    break;
                }
                TestUtil.logTrace("[PortletWebValidator] Found search string: '" +
                    search + "' in the server's response");
            }
            if (!found) {
                StringBuffer sb = new StringBuffer(255);
                sb.append("\nERROR: Unable to find the following ");
                sb.append("search string in the server's ");
                sb.append("response: '").append(search).append("'");
                DetailBuffer.recordResponseInfo(_res);
                DetailBuffer.addDetail(sb.toString());
                DetailBuffer.addSeparator2();
                return false;
            }
        }
        return true;
    }

    /**
     * <code>checkUnexpectedSearchStrings</code> will scan the response for the
     * configured strings that are not expected in the response.
     *<ul>
     *  <li>
     *    Check unexpected search strings
     *  </li>
     *   <ul>
     *      <li>
     *         <p>If list of Strings is null, return true.</p>
     *      </li>
     *      <li>
     *         <p>If list of Strings is not null, scan response
     *            body.  If string is not found, return true, otherwise
     *            display error and return false.<p>
     *      </li>
     *   </ul>
     * </ul>
     *
     * @return boolen result of check
     * @throws IOException if an IO error occurs during validation
     */
    protected boolean checkUnexpectedSearchStrings() throws IOException {
        List list = _case.getUnexpectedSearchStrings();
        if (list != null && !list.isEmpty()) {
            String responseBody = _res.getResponseBodyAsString();
            Iterator iter = list.iterator();
            while (iter.hasNext()) {
                String search = (String) iter.next();
                TestUtil.logTrace("[PortletWebValidator] Scanning response.  The following" +
                    " string should not be present in the response: '" + search + "'");
                if (responseBody.indexOf(search) > -1) {
                    StringBuffer sb = new StringBuffer(255);
                    sb.append("\nERROR::Found the following unexpected ");
                    sb.append("            search string in the server's ");
                    sb.append("            response: '").append(search).append("'");
                    DetailBuffer.recordResponseInfo(_res);
                    DetailBuffer.addDetail(sb.toString());
                    DetailBuffer.addSeparator2();
                    return false;
                }
            }
        }
        return true;
    }


    /**
     * <code>checkStatusCode</code> will perform status code comparisons
     * based on the algorithm below
     *<ul>
     *  <li>
     *    Check the HTTP status code
     *  </li>
     *   <ul>
     *      <li>
     *         <p>If test case status code null and response 4xx,
     *          return failure, print error; return false</p>
     *      </li>
     *      <li>
     *         <p>If test case status code null and response 5xx,
     *          return failure include response body; return false<p>
     *      </li>
     *      <li>
     *         <p>If test case status code null, and response not
     *          4xx or 5xx, return true</p>
     *      </li>
     *      <li>
     *         <p>Test case status code not null, compare it with the
     *             response status code; return true if equal<p>
     *      <li>
     *   </ul>
     * </ul>
     *
     * @return boolen result of check
     * @throws IOException if an IO error occurs during validation
     */
    protected boolean checkStatusCode() throws IOException {
        String sCode = _case.getStatusCode();
        String resCode = _res.getStatusCode();

        if (sCode == null && resCode.charAt(0) == CLIENT_ERROR) {
            TestUtil.logErr("[WebValidatorBase] Unexpected " + resCode + " received from " +
            "target server!  Request path: " +
            _req.getRequestPath());
            return false;
        }

        /* 
        if (sCode == null && (resCode.charAt(0) == SERVER_ERROR)) {
            String resBody = _res.getResponseBodyAsRawString();
            StringBuffer sb = new StringBuffer(75 + resBody.length());
            sb.append("[WebValidatorBase] Unexpected '");
            sb.append(resCode).append("' received from target server!\n");
            sb.append("Error response recieved from server:\n");
            sb.append("------------------------------------------------\n");
            sb.append(resBody != null ? resBody : "NO RESPONSE");
            TestUtil.logErr(sb.toString());
            return false;
        }
        */

        if (sCode == null) {
            return true;
        }

        // test status code not null, compare with that of the response
        if (sCode.charAt(0) != '!') {
            if (!sCode.equals(resCode)) {
                TestUtil.logErr("[WebValidatorBase] Unexpected Status Code " +
                    "recieved from server.  Expected '" +
                    sCode + "' received '" + resCode + "'");
                return false;
            }

            TestUtil.logTrace("[WebValidatorBase] Expected Status Code '" +
                sCode + "' found in response line!");
        } else {
            sCode = sCode.substring(1);
            if (sCode.equals(resCode)) {
                TestUtil.logErr("[WebValidatorBase] Unexpected Status Code " +
                    "recieved from server.  Expected any value except '" +
                    sCode + "', received '" + resCode + "'");
                return false;
            }

            TestUtil.logTrace("[WebValidatorBase] Status Code '" +
                sCode + "' not found in response line!");
        }

        return true;
    }

}
