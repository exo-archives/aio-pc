/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.RenderRequest;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import org.apache.commons.httpclient.HttpState;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        URLClient theTests = new URLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
    * Returns the name of the default portlet app.
    */
    public String getDefaultPortletApp() {
        return "portlet_jp_RenderRequest_web";
    }

    /*
     * @class.setup_props: ts_home;
     */

    /*
     * @testName: GetAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:167;
     * @test_Strategy: Invokes PortletRequest.getAttribute() with a
     *                 null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void GetAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetAttributeNamesTest
     * @assertion_ids: PORTLET:JAVADOC:168;
     * @test_Strategy: Sets couple of attributes and makes sure 
     *         getAttributeNames() returns exact same attributes. 
     * @assertion: Returns an Enumeration containing the names of the 
     *             attributes available to this request. This method returns 
     *             an empty Enumeration if the request has no attributes 
     *             available to it.
     */
    public void GetAttributeNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetAttributeTest
     * @assertion_ids: PORTLET:JAVADOC:166;
     * @test_Strategy: Sets one attribute in PortletRequest and make sure we 
     *          can read that attribute back using PortletRequest.getAttribute()
     * @assertion: Returns the value of the named attribute as an Object, or 
     *             null if no attribute of the given name exists. Attribute 
     *             names should follow the same conventions as package names. 
     *             This specification reserves names matching java.*, and 
     *             javax.*. In a distributed portlet web application the 
     *             Object needs to be serializable. 
     */
    public void GetAttributeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetAttributeInvalidTest
     * @assertion_ids: PORTLET:JAVADOC:166;
     * @test_Strategy: Checks that getAttribute() returns null if no attribute 
     *                of the given name exists.
     * @assertion: Returns the value of the named attribute as an Object, or 
     *             null if no attribute of the given name exists. Attribute 
     *             names should follow the same conventions as package names. 
     *             This specification reserves names matching java.*, and 
     *             javax.*. In a distributed portlet web application the 
     *             Object needs to be serializable. 
     */
    public void GetAttributeInvalidTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeInvalidTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetAuthTypeWithoutProtectionTest
     * @assertion_ids: PORTLET:JAVADOC:169;PORTLET:SPEC:93;
     * @test_Strategy: Checks that getAuthType() returns null if the request 
     *                 was not authenticated. 
     * @assertion: Returns the name of the authentication scheme used for the 
     *             connection between client and portal, for example, 
     *             BASIC_AUTH or CLIENT_CERT_AUTH, a custom one or null 
     *             if there was no authentication. 
     */
    public void GetAuthTypeWithoutProtectionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAuthTypeWithoutProtectionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetContextPathTest
     * @assertion_ids: PORTLET:JAVADOC:170;
     * @test_Strategy: Test this by having a portlet that returns the context 
     *    path and having a servlet in the same portlet app associated with a 
     *    dir. The test client would first call the portlets get the context 
     *    path and then call the servlet using the context path plus the 
     *    servlet pattern: /<context-path>/<servlet-mapping> If you get the 
     *    servlet content you pass otherwise you fail. 
     * @assertion: Returns the context path which is the path prefix 
     *             associated with the deployed   portlet application.
     *             If the portlet application is rooted at the  base of
     *             the web server URL namespace (also known as "default" 
     *             context),   this path must be an empty string. 
     */
    public void GetContextPathTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetContextPathTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the first request to a portlet that would write the portlet
         * context path in the response
         */
        HttpResponse firstResponse = invoke();  


        /*
        * Extract the portlet context path
        */
        PortletTCKCustomClientTag customTag
           = new PortletTCKCustomClientTag(CommonConstants.PATH_TO_SERVLET_TAG);

        String pathToServlet = customTag.extractTag(firstResponse);


        /*
        * New request to a servlet in the same application. Request made using
        * the context path.
        */

        setRequestProperty(REQUEST, pathToServlet);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
       

    }

    /*
     * @testName: GetLocaleTest
     * @assertion_ids: PORTLET:JAVADOC:171;
     * @test_Strategy: Client sets the locale that it will accept and calls
     *                 portlet. Portlet verifies that getLocale doesn't 
     *                 return null. 
     * @assertion: Returns the preferred Locale in which the portal will 
     *             accept content. The Locale may be based on the 
     *             Accept-Language header of the client. 
     */
    public void GetLocaleTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetLocaleTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);
        setRequestProperty(REQUEST_HEADERS, "Accept-Language:en-US" );

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetLocalesTest
     * @assertion_ids: PORTLET:JAVADOC:172;
     * @test_Strategy: Client sets the locale that it will accept and calls
     *                 portlet. Portlet verifies that getLocale doesn't 
     *                 return null. 
     * @assertion: Returns an Enumeration of Locale objects indicating in 
	 *			   decreasing order starting with the preferred locale in 
	 *			   which the portal will accept content for this request. The 
	 *			   Locales may be based on the Accept-Language header of the 
	 *			   client.
     */
    public void GetLocalesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetLocalesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);
        setRequestProperty(REQUEST_HEADERS, "Accept-Language:en-US" );

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetParameterIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:174;
     * @test_Strategy: Invokes PortletRequest.getParameter() with a
     *                 null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void GetParameterIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetParameterNamesTest
     * @assertion_ids: PORTLET:JAVADOC:176;
     * @test_Strategy: First request to the portlet writes a 
     *            portletURL with paramaters in it, to the output stream. 
     *            The portlet URL string is extracted and used for second 
     *            request. The portlet uses PortletRequest.getParameterNames() 
     *            to see if the expected parameter names are returned.
     * @assertion: Returns an Enumeration of String objects containing the 
     *             names of the parameters contained in this request. If the 
     *             request has no parameters, the method returns an empty 
     *             Enumeration. Only parameters targeted to the current 
     *             portlet are returned. 
     */
    public void GetParameterNamesTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterNamesTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: GetParameterTest
     * @assertion_ids: PORTLET:JAVADOC:173;PORTLET:SPEC:68;
     * @test_Strategy: First request to the portlet writes a 
     *            portletURL with a paramater in it, to the output stream. 
     *            The portlet URL string is extracted and used for second 
     *            request. The portlet uses PortletRequest.getParameter() 
     *            to see if the expected parameter is returned.
     *            The parameter value has spaces in it to test the
     *            encoding.
     * @assertion: Returns the value of a request parameter as a String, or 
     *             null if the parameter does not exist. Request parameters 
     *             are extra information sent with the request. The 
     *             returned parameter   are "x-www-form-urlencoded" 
     *             decoded. Only parameters 
     *             targeted to the current portlet are accessible. This method 
     *             should only be used if the parameter has only one value. If 
     *             the parameter might have more than one value, use . If this 
     *             method is used with a multivalued parameter, the value 
     *             returned is equal to the first value in the array returned 
     *             by getParameterValues. 
     */
    public void GetParameterTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  


    }

    /*
     * @testName: GetParameterValuesIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:178;
     * @test_Strategy: Invokes PortletRequest.getParameterValues()
     *                 with a null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void GetParameterValuesIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterValuesIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetParameterValuesTest
     * @assertion_ids: PORTLET:JAVADOC:177;PORTLET:SPEC:69;
     * @test_Strategy: First request to the portlet writes a portletURL with 
     *                 a parameter having 2 values. The portlet URL string is 
     *                 extracted and used for second request. The portlet uses 
     *                 PortletRequest.getParameterValues() to check values. 
     * @assertion: Returns an array of String objects containing all of the 
     *             values the given request parameter has, or null if the 
     *             parameter does not exist. The returned parameters are 
     *             "x-www-form-urlencoded" decoded. If the parameter has 
     *             a single value, the array has a length of 1. 
     */
    public void GetParameterValuesTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterValuesTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: GetPortalContextTest
     * @assertion_ids: PORTLET:JAVADOC:179;
     * @test_Strategy: Test passes if a non-null value for PortalContext object 
     *                 is obtained when this method is invoked.
     * @assertion: Returns the context of the calling portal. 
     */
    public void GetPortalContextTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortalContextTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetPortletModeTest
     * @assertion_ids: PORTLET:JAVADOC:180;
     * @test_Strategy: Make a first request to the portlet and set the portlet 
	 *				   mode into the PortletURL response object and then in the
     *				   second request 
	 *				   verify that the portlet mode is  correct using 
	 *				   request.getPortletMode()
     * @assertion: Returns the current portlet mode of the portlet. 
     */
    public void GetPortletModeTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletModeTestPortlet");

         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  


        /*
         * Extract the PortletURL string with portletmode set in it from the 
		 * content of HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: GetPortletSessionTest
     * @assertion_ids: PORTLET:JAVADOC:181;
     * @test_Strategy: Calls getPortletSession() and make sure it is not null. 
     *                 (Rest are checked in PortletSession tests.)
     * @assertion: Returns the current portlet session or, if there is no 
     *             current session, creates one and returns the new session.  
     *             Creating a new portlet session will result in creating a 
     *             new HttpSession on which the portlet session is based on. 
     */
    public void GetPortletSessionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletSessionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetPreferencesTest
     * @assertion_ids: PORTLET:JAVADOC:183;
     * @test_Strategy: Define a preference entity for this portlet. Test passes 
     *                 if a non-null value for PortletPreference is obtained 
     *                 when this method is invoked.
     * @assertion: Returns the preferences object associated with the portlet. 
     */
    public void GetPreferencesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                            getDefaultPortletApp(),
                                            "GetPreferencesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetPortletSessionParamTest
     * @assertion_ids: PORTLET:JAVADOC:182;
     * @test_Strategy: Portlet will first call the 
	 *				   getPortletSession() with true and makes sure the session 
	 *				   is returned and is not null. Now we save the object id 
	 *				   and call the api again with(false and true). The 
	 *				   session object returned should be the same.
     *                 getPortletSession(false) part is untestable since
     *                 an implementation might already have a session.
     * @assertion: Returns the current portlet session or, if there is no 
     *             current session and the given flag is true, creates one and 
     *             returns the new session. If the given flag is false and 
     *             there is no current portlet session, this method returns 
     *             null. Creating a new portlet session will result in creating 
     *             a new HttpSession on which the portlet session is based on.
     */
    public void GetPortletSessionParamTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletSessionParamTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetWindowStateTest
     * @assertion_ids: PORTLET:JAVADOC:197;
     * @test_Strategy: Make a first request to the portlet and write a window 
	 *				   render PortletURL in the response object and then in 
	 *				   the second request  
	 *				   verify that the window state is WindowState.NORMAL using 
	 *				   request.getWindowState()
     * @assertion: Returns the current window state of the portlet. 
     */
    public void GetWindowStateTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetWindowStateTestPortlet");

         /*
          * Sets the GET request to be sent out to the server.
          */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  


        /*
         * Extract the PortletURL string with portletmode set in it from the 
		 * content of HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

	/*
     * @testName: GetParameterMapTest
     * @assertion_ids: PORTLET:JAVADOC:175;PORTLET:SPEC:71;
     * @test_Strategy: Test for PortletRequest.getParameterMap() method
     *                  First request to the portlet writes a
     *                  action portletURL with few paramaters in it, 
     *                  to the output stream.
     *                  The portlet URL string is extracted and used for second
     *                  request. In the second request, in processAction,
     *                  portlet uses PortletRequest.getParameterMap()
     *                  to see if the expected map is returned.
     * @assertion: Returns a Map of the parameters of this request. Request 
     *             parameters are extra information sent with the request.
     */
    public void GetParameterMapTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterMapTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

	/*
     * @testName: GetParameterMapEmptyTest
     * @assertion_ids: PORTLET:JAVADOC:175;PORTLET:SPEC:72;
     * @test_Strategy: Test for PortletRequest.getParameterMap() method
     *                  First request to the portlet writes a
     *                  action portletURL with no parameters in it, 
     *                  to the output stream.
     *                  The portlet URL string is extracted and used for second
     *                  request. In the second request, in processAction,
     *                  portlet uses PortletRequest.getParameterMap()
     *                  to see if empty map is returned.
     * @assertion: If no parameters exist this method returns empty map.
     *             
     */
    public void GetParameterMapEmptyTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterMapEmptyTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }


	/*
     * @testName: GetParameterNamesEmptyTest
     * @assertion_ids: PORTLET:JAVADOC:176;
     * @test_Strategy: Test for PortletRequest.getParameterNames() method
     *                  First request to the portlet writes a
     *                  action portletURL with no parameters in it, 
     *                  to the output stream.
     *                  The portlet URL string is extracted and used for second
     *                  request. In the second request, in processAction,
     *                  portlet uses PortletRequest.getParameterNames()
     *                  to see if empty map is returned.
     * @assertion:      If the request has   no parameters, 
     *                  the method returns an   empty Enumeration.  
     */
    public void GetParameterNamesEmptyTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterNamesEmptyTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: GetInvalidParameterTest
     * @assertion_ids: PORTLET:JAVADOC:173;
     * @test_Strategy: A negative test. If the paramater is not defined, 
     *             getParameter() method should return null.
     * @assertion: Returns the value of a request parameter as a String, or 
     *             null if the parameter does not exist. Request parameters 
     *             are extra information sent with the request. The 
     *             returned parameter   are "x-www-form-urlencoded" 
     *             decoded. Only parameters 
     *             targeted to the current portlet are accessible.  
     *             This method should only be used if the parameter has only 
     *             one value. If the parameter might have more than one value, 
     *             use . If this method is used with a multivalued parameter, 
     *             the value returned is equal to the first value in the array 
     *             returned by getParameterValues. 
     */
    public void GetInvalidParameterTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInvalidParameterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetRemoteUserNullTest
     * @assertion_ids: PORTLET:JAVADOC:189;PORTLET:SPEC:60;
     * @test_Strategy: Negative Testing. Checks that getRemoteUser() returns 
     *                 null if the user has not been authenticated. 
     * @assertion: Returns the login of the user making this request, if the 
     *             user has been authenticated, or null if the user has not 
     *             been authenticated. 
     */
    public void GetRemoteUserNullTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetRemoteUserNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetResponseContentTypeTest
     * @assertion_ids: PORTLET:JAVADOC:191;
     * @test_Strategy: Check that return value of 
	 *				   PortletRequest.getResponseContentType() is not null.
     * @assertion: Returns the portal preferred content type for the response.  
     *             The content type only includes the MIME type, not the 
     *             character set. 
     */
    public void GetResponseContentTypeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetResponseContentTypeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetResponseContentTypesTest
     * @assertion_ids: PORTLET:JAVADOC:192;PORTLET:SPEC:94;
     * @test_Strategy: Checks that return value of this method is not null.
	 *				   And the first item in the list is same as returned by
	 *				   getResponseContentType().
     * @assertion: Gets a list of content types which the portal accepts for 
     *             the response. This list is ordered with the most preferable 
     *             types listed first. The content type only includes the MIME 
     *             type, not the character set. 
     */
    public void GetResponseContentTypesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetResponseContentTypesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetSchemeTest
     * @assertion_ids: PORTLET:JAVADOC:193;
     * @test_Strategy: Checks if the result returned by
     *                 PortletRequest.getScheme() is http.
     * @assertion: Returns the name of the scheme used to make this
     *             request.  For example, http, https, or ftp.
     */
    public void GetSchemeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetSchemeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetServerNameTest
     * @assertion_ids: PORTLET:JAVADOC:194;
     * @test_Strategy: Checks that the result returned by
     *                 PortletRequest.getServerName() is not null.
     * @assertion: Returns the host name of the server that received
     *             the request.
     */
    public void GetServerNameTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetServerNameTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetServerPortTest
     * @assertion_ids: PORTLET:JAVADOC:195;
     * @test_Strategy: Checks that the result returned by
     *                 PortletRequest.getServerPort() is between 0 and
     *                 65535, inclusive.
     * @assertion: Returns the port number on which this request was received.
     */
    public void GetServerPortTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetServerPortTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: CheckIsPortletModeAllowedTest
     * @assertion_ids: PORTLET:JAVADOC:198;
     * @test_Strategy: The VIEW portlet mode must be supported , so we'll call 
	 *				   this method with VIEW portlet mode and make sure it 
	 *				   returns true.
     * @assertion: Returns true, if the given portlet mode is a valid one to 
     *             set for this portlet in the context of the current request. 
     *             This method can be used before calling 
     *             ActionResponse.setPortletMode to avoid an exception. 
     */
    public void CheckIsPortletModeAllowedTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "CheckIsPortletModeAllowedTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: IsRequestedSessionIdValidForValidSessionTest
     * @assertion_ids: PORTLET:JAVADOC:199;
     * @test_Strategy: First request issued to a portlet that will just return
     *                 a portlet url string. In the second request the method 
     *                 isRequestedSessionIdValid() is invoked. Test passses if 
     *                 this method returns true.
     * @assertion: Checks whether the requested session ID is still valid. 
     */
    public void IsRequestedSessionIdValidForValidSessionTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                      getDefaultPortletApp(),
                         "IsRequestedSessionIdValidForValidSessionTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: IsRequestedSessionIdValidForInvalidSessionTest
     * @assertion_ids: PORTLET:JAVADOC:199;
     * @test_Strategy: A negative test for 
     *          PortletRequest.isRequestedSessionIdValid() method
     *          First request issued to a portlet just writes a PortletURL 
     *          to output stream. Second request will invalidate
     *          the session. Then the method isRequestedSessionIdValid()
     *          is invoked. Test passses if this method returns false.
     * @assertion: Checks whether the requested session ID is still valid. 
     */
    public void IsRequestedSessionIdValidForInvalidSessionTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                      getDefaultPortletApp(),
                     "IsRequestedSessionIdValidForInvalidSessionTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: CheckIsWindowStateAllowedTest
     * @assertion_ids: PORTLET:JAVADOC:202;
     * @test_Strategy: The NORMAL window state must be supported , so we'll 
	 *				   call this method with NORMAL window state and make sure
	 *				   it returns true.
     * @assertion: Returns true, if the given window state is valid to be set 
     *             for this portlet in the context of the current request. This
     *             method should be used before calling 
     *             ActionResponse.setWindowState to avoid an exception.
     */
    public void CheckIsWindowStateAllowedTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "CheckIsWindowStateAllowedTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: RemoveAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:204;
     * @test_Strategy: Invokes PortletRequest.removeAttribute() with a
     *                 null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void RemoveAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: RemoveAttributeTest
     * @assertion_ids: PORTLET:JAVADOC:203;
     * @test_Strategy: Add an attribute, then remove an attribute and then 
	 *					check that attribute is not there in the request.
     * @assertion: Removes an attribute from this request. This method is not 
     *             generally needed, as attributes only persist as long as the 
     *             request is being handled. Attribute names should follow the 
     *             same conventions as package names. Names beginning with 
     *             java.*, javax.*, and com.sun.* are reserved for use by 
     *             Sun Microsystems. 
     */
    public void RemoveAttributeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: SetAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:206;
     * @test_Strategy: Invokes PortletRequest.setAttribute() with a
     *                 null name and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void SetAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: SetAttributeTest
     * @assertion_ids: PORTLET:JAVADOC:205;
     * @test_Strategy: Set an attribute using setAttribute() method and make 
     *                 sure we can get it using getAttribute().
     * @assertion: Stores an attribute in this request. 
     *             Attribute names should follow 
     *             the same conventions as package names. Names beginning with 
     *             java.*, javax.*, and com.sun.* are reserved for use by 
     *             Sun Microsystems. If the value passed into this method is 
     *             null, the effect is the same as calling 
     *              removeAttribute(java.lanf.String). 
     */
    public void SetAttributeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

}
