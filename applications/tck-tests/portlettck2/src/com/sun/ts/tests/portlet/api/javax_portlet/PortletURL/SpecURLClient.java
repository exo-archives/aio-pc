/*
 * Copyright 2007 IBM Corporation
 */
/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletURL;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        SpecURLClient theTests = new SpecURLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
     * Returns the name of the default portlet app.
     */
    public String getDefaultPortletApp() {
        return "portlet_jp_PortletURL_web";
    }
    
    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: ProcessActionNotCalledForRenderURLTest
     * @assertion_ids: PORTLET:SPEC:35
     * @test_Strategy: Makes a first request to the portlet to get a
     *                 render URL, then makes a second request with
     *                 that URL.  In this second request, checks in
     *                 render() that processAction() has not been invoked.
     * @assertion: A render URL is an optimization for a special type
     *             of action URLs.  The portal/portlet-container must
     *             not invoke the processAction method of the targeted
     *             portlet.
     */
    public void ProcessActionNotCalledForRenderURLTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ProcessActionNotCalledForRenderURLTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: CheckSetParameterNameTest
     * @assertion_ids: PORTLET:SPEC:37
     * @test_Strategy: In the first request the portlet sets the parameter
	 *				   with a value and returns a render URL. In the second
	 *				   request the portlet sets a new value for the same
	 *				   parameter name and returns a render URL. In the
	 *				   third request the portlet compares whether the value
	 *				   obtained for the parameter name is the latest one that
	 *				   was set.
     * @assertion: A call to any of the setParameter methods must replace any 
	 *			   parameter with the same name previously set.
     */
    public void CheckSetParameterNameTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "CheckSetParameterNameTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);

        /*****************************************************************
         * THIRD TRIP: To send the second request.
         *****************************************************************/

        portletURL = PortletURLClientTag.extractContent(secondResponse);

        String thirdRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(secondResponse);
    }

    /*
     * @testName: CheckPortletContainerEncodingTest
     * @assertion_ids: PORTLET:SPEC:39
     * @test_Strategy: In the first request the portlet sets the parameter
	 *				   name with a value that a space (so that the portlet 
	 *				   container will propertly encode the parameter value) and 
	 *				   returns a render URL. In the second request the portlet 
	 *				   compares whether the value obtained for the parameter 
	 *				   name has been properly decoded and matches with the
	 *				   expected value.
     * @assertion: The portlet-container must “x-www-form-urlencoded” encode
     * 			   parameter names and values added to a BaseURL object.
     */
    public void CheckPortletContainerEncodingTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                    "CheckPortletContainerEncodingTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);


        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }
    
    /*
     * @testName: CheckDefaultPortletModeTest
     * @assertion_ids: PORTLET:43;
     * @test_Strategy: In the first request the portlet sets the portlet mode 
	 *				   returns a render URL. In the second request the portlet 
	 *				   only returns a render URL. In the third request the
	 *				   portlet checks the portlet mode.
     * @assertion: If the portlet mode is not set for a URL, it must
     * 			   have the portlet mode of the current request as default.
     */
    public void CheckDefaultPortletModeTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                    "CheckDefaultPortletModeTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);

        /*****************************************************************
         * THIRD TRIP: To send the second request.
         *****************************************************************/

        portletURL = PortletURLClientTag.extractContent(secondResponse);

        String thirdRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(secondResponse);
    }
    
    /*
     * @testName: CheckDefaultWindowStateTest
     * @assertion_ids: PORTLET:45;
     * @test_Strategy: In the first request the portlet sets the portlet mode 
	 *				   returns a render URL. In the second request the portlet 
	 *				   only returns a render URL. In the third request the
	 *				   portlet checks the portlet mode.
     * @assertion: If the window state is not set for a URL, it must have the
     * 			   window state of the current request as default
     */
    public void CheckDefaultWindowStateTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                    "CheckDefaultWindowStateTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);

        /*****************************************************************
         * THIRD TRIP: To send the second request.
         *****************************************************************/

        portletURL = PortletURLClientTag.extractContent(secondResponse);

        String thirdRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(secondResponse);
    }
}
