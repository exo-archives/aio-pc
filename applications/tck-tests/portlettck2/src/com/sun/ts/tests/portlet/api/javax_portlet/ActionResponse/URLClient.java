/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.ActionResponse;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        URLClient theTests = new URLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
    * Returns the name of the default portlet app.
    */
    public String getDefaultPortletApp() {
        return "portlet_jp_ActionResponse_web";
    }

    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: SendRedirectIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:16;PORTLET:SPEC:65;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.sendRedirect() to redirect to a
     *                 relative URL.  Checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if a relative path URL is given.
     */
    public void SendRedirectIllegalArgumentExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SendRedirectIllegalArgumentExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SendRedirectIllegalStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:17;PORTLET:SPEC:66;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setRenderParameter() and then
     *                 ActionResponse.sendRedirect() to redirect to a
     *                 HTML page.  Checks if IllegalStateException is
     *                 thrown.
     * @assertion: if the method is invoked after any of the
     *             setPortletMode, setWindowState,  setRenderParameter
     *             or setRenderParameters methods of the
     *             ActionResponse interface has been called.
     */
    public void SendRedirectIllegalStateExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SendRedirectIllegalStateExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SendRedirectTest
     * @assertion_ids: PORTLET:JAVADOC:14;PORTLET:SPEC:18;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.sendRedirect() to redirect to a
     *                 HTML page that has a full path.  Test passes if
     *                 the content of that HTML page is returned.
     * @assertion: Instructs the portlet container to send a redirect
     *             response to the client using the specified redirect
     *             location URL.  This method only accepts an absolute
     *             URL (e.g.
     *             http://my.co/myportal/mywebap/myfolder/myresource.gif)
     *             or a full path URI (e.g.
     *             /myportal/mywebap/myfolder/myresource.gif).
     */
    public void SendRedirectTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SendRedirectTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetPortletModeIllegalStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:20;PORTLET:SPEC:69;PORTLET:SPEC:71;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.sendRedirect() followed by
     *                 ActionResponse.setPortletMode().  Checks if
     *                 IllegalStateException is thrown.
     * @assertion: if the method is invoked after sendRedirect has
     *             been called.
     */
    public void SetPortletModeIllegalStateExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetPortletModeIllegalStateExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetPortletModeTest
     * @assertion_ids: PORTLET:JAVADOC:18;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setPortletMode() to set the
     *                 portlet mode to a mode that was declared in the
     *                 deployment descriptor to be supported by the
     *                 portlet.  Checks if the portlet mode is
     *                 correctly set to that mode in render().
     * @assertion: Sets the portlet mode of a portlet to the given
     *             portlet mode.
     */
    public void SetPortletModeTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetPortletModeTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParameterStringArrayIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:25;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setRenderParameter() with a null 
     *                 key.  Checks if IllegalArgumentException is thrown.
     * @assertion: if key or value are null.
     */
    public void SetRenderParameterStringArrayIllegalArgumentExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParameterStringArrayIllegalArgumentExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParameterStringArrayIllegalStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:26;PORTLET:SPEC:74;PORTLET:SPEC:75;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.sendRedirect() followed by
     *                 ActionResponse.setRenderParameter(String, String[]).
     *                 Checks if IllegalStateException is thrown.
     * @assertion: if the method is invoked after sendRedirect has
     *             been called.
     */
    public void SetRenderParameterStringArrayIllegalStateExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParameterStringArrayIllegalStateExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParameterStringArrayTest
     * @assertion_ids: PORTLET:JAVADOC:24;PORTLET:SPEC:72;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setRenderParameter() to set a
     *                 String array parameter.  Checks for this
     *                 parameter in render().
     * @assertion: Sets a String array parameter for the render
     *             request.  These parameters will be accessible in
     *             all sub-sequent render calls via the
     *             PortletRequest.getParameter call until a request
     *             is targeted to the portlet.
     */
    public void SetRenderParameterStringArrayTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParameterStringArrayTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParameterStringIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:22;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setRenderParameter() with a null 
     *                 key.  Checks if IllegalArgumentException is thrown.
     * @assertion: if key or value are null.
     */
    public void SetRenderParameterStringIllegalArgumentExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParameterStringIllegalArgumentExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParameterStringIllegalStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:23;PORTLET:SPEC:74;PORTLET:SPEC:75;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.sendRedirect() followed by
     *                 ActionResponse.setRenderParameter(String, String).
     *                 Checks if IllegalStateException is thrown.
     * @assertion: if the method is invoked after sendRedirect has
     *             been called.
     */
    public void SetRenderParameterStringIllegalStateExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParameterStringIllegalStateExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParameterStringTest
     * @assertion_ids: PORTLET:JAVADOC:21;PORTLET:SPEC:72;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setRenderParameter() to set a
     *                 String parameter.  Checks for this parameter in
     *                 render().
     * @assertion: Sets a String parameter for the render request.
     *             These parameters will be accessible in all
     *             sub-sequent render calls via the
     *             PortletRequest.getParameter call until a request
     *             is targeted to the portlet.
     */
    public void SetRenderParameterStringTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParameterStringTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParametersIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:28;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setRenderParameters() with a null 
     *                 argument.  Checks if IllegalArgumentException
     *                 is thrown.
     * @assertion: if parameters is null, if any of the key/values in
     *             the Map are null, if any of the keys is not a
     *             String, or if any of the values is not a String array.
     */
    public void SetRenderParametersIllegalArgumentExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParametersIllegalArgumentExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParametersIllegalStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:29;PORTLET:SPEC:74;PORTLET:SPEC:75;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.sendRedirect() followed by
     *                 ActionResponse.setRenderParameters().  Checks
     *                 if IllegalStateException is thrown.
     * @assertion: if the method is invoked after sendRedirect has
     *             been called.
     */
    public void SetRenderParametersIllegalStateExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParametersIllegalStateExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetRenderParametersTest
     * @assertion_ids: PORTLET:JAVADOC:27;PORTLET:SPEC:52;PORTLET:SPEC:72;PORTLET:SPEC:77;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setRenderParameters() to set a
     *                 map with a String parameter.  Checks for this
     *                 parameter in render().
     * @assertion: Sets a parameter map for the render request.  All
     *             previously set render parameters are cleared. These
     *             parameters will be accessible in all sub-sequent
     *             render calls via the PortletRequest.getParameter
     *             call until a new request is targeted to the portlet.
     */
    public void SetRenderParametersTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetRenderParametersTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetUndeclaredPortletModeTest
     * @assertion_ids: PORTLET:JAVADOC:19;PORTLET:SPEC:67;PORTLET:SPEC:54;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setPortletMode() to set the
     *                 portlet mode to EDIT which was not declared in
     *                 the deployment descriptor.  Checks if
     *                 PortletModeException is thrown.
     * @assertion: if the portlet cannot switch to this portlet mode,
     *             because the portlet or portal does not support it
     *             for this markup, or the current user is not allowed
     *             to switch to this portlet mode.
     */
    public void SetUndeclaredPortletModeTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetUndeclaredPortletModeTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetUndeclaredWindowStateTest
     * @assertion_ids: PORTLET:JAVADOC:31;PORTLET:SPEC:68;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.setWindowState() to set the
     *                 window state to INVALID which was not
     *                 declared in the deployment descriptor.  Checks
     *                 if WindowStateException is thrown.
     * @assertion: if the portlet cannot switch to the specified
     *             window state.
     */
    public void SetUndeclaredWindowStateTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetUndeclaredWindowStateTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetWindowStateIllegalStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:32;PORTLET:SPEC:69;PORTLET:SPEC:71;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 processAction() invokes
     *                 ActionResponse.sendRedirect() followed by
     *                 ActionResponse.setWindowState().  Checks if
     *                 IllegalStateException is thrown.
     * @assertion: if the method is invoked after sendRedirect has
     *             been called.
     */
    public void SetWindowStateIllegalStateExceptionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetWindowStateIllegalStateExceptionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

}
