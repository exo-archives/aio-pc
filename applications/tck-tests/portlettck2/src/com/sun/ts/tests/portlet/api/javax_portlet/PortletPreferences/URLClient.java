/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletPreferences;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {

    /*
    * Constructor called by the Test Harness
    */

    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }


    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletPreferences_web";
    }


    /*
     * @class.setup_props: ts_home;
     */                    


    /* Run test */

    /*
     *   @testName:  GetValueTest
     *   @assertion_ids: PORTLET:JAVADOC:147;
     *   @test_Strategy: Using the method getValue() get the preference value 
     *                  for a preference key and compare it with the expected 
     *                  value as defined in the descriptor file.
     *   @assertion:  Returns the first String value associated with the specified 
     *               key in this preference. If there is one or more preference
     *               values associated with the given key it returns the first
     *               associated value. If there are no preference values associated with
     *               the given key, or the backing preference database is unavailable,
     *               it returns the given default value. 
     */

    public void GetValueTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetValueTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetValueDefaultTest
     *   @assertion_ids: PORTLET:JAVADOC:147;
     *   @test_Strategy: Using the method getValue() get the default value
     *                  for a preference key. Test passes if the value returned
     *                  matches that of the expected value.
     *   @assertion:  Returns the String value associated with the specified 
     *               key in this preference. Returns the specified default if 
     *               there is no value associated with the key, or if the 
     *               backing store is inaccessible. Some implementations may 
     *               store default values in their backing stores. If there is 
     *               no value associated with the specified key but there is 
     *               such a stored default, it is returned in preference to 
     *               the specified default. 
     *
     */

    public void GetValueDefaultTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetValueDefaultTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetValueIllegalArgumentExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:148;
     *   @test_Strategy: Portlet should throw a IllegalArgumentException() 
     *                   when the method getValue() is invoked with key set 
     *                   to null.
     *   @assertion:  If key is null. (A null value for def is permitted.)
     *
     */

    public void GetValueIllegalArgumentExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                  getDefaultPortletApp(),
                                 "GetValueIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
	}

    /*
     *   @testName:  GetValuesTest
     *   @assertion_ids: PORTLET:JAVADOC:149;
     *   @test_Strategy: For a particular key define multiple values in the 
	 *					 descriptor file. Using the method getValues() get all 
     *                   the values for the key and compare it with the 
     *                   expected values as defined in the descriptor file.
     *   @assertion: Returns the String array value associated with the 
     *               specified key in this preference. Returns the specified 
     *               default if there is no value associated with the key, or 
     *               if the backing store is inaccessible. If the 
     *               implementation supports stored defaults and such a 
     *               default exists and is accessible, it is used in favor of 
     *               the specified default. 
     */

    public void GetValuesTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                    "GetValuesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
	}

    /*
     *   @testName:  GetValuesDefaultTest
     *   @assertion_ids: PORTLET:JAVADOC:149;
     *   @test_Strategy: Using the method getValues() get the default values
     *                  for a preference key. Test passes if the values 
     *                  returned matches that of the expected values.
     *   @assertion: Returns the String array value associated with the 
     *               specified key in this preference. Returns the specified 
     *               default if there is no value associated with the key, or 
     *               if the backing store is inaccessible. If the 
     *               implementation supports stored defaults and such a 
     *               default exists and is accessible, it is used in favor of 
     *               the specified default. 
     *
     */

    public void GetValuesDefaultTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                getDefaultPortletApp(),
                                "GetValuesDefaultTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
	}

    /*
     *   @testName:  GetValuesIllegalArgumentExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:150;
     *   @test_Strategy: Portlet should throw a IllegalArgumentException() 
     *                  when the method getValues() is invoked with key set 
     *                  to null.
     *   @assertion:  If key is null. (A null value for def is permitted.)
     *
     */

    public void GetValuesIllegalArgumentExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                "GetValuesIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
	}

    /*
     *   @testName:  GetNamesTest
     *   @assertion_ids: PORTLET:JAVADOC:146;
     *   @test_Strategy: Invoke the method getNames() which will return the
     *                   portlet preference names. Test passes if the names
     *                   returned matches with the expected values as defined
     *                   in the descriptor file.
     *   @assertion: Returns all of the keys that have an associated value. 
     *
     */
    public void GetNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  				"GetNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  GetNamesEmptyTest
     *   @assertion_ids: PORTLET:JAVADOC:146;
     *   @test_Strategy: In the descriptor file do not define any preference
	 *					 attributes. Test passes if the method getNames() 
	 *					 returns an empty enumeration
     *   @assertion: Returns all of the keys that have an associated value. 
     *
     */
    public void GetNamesEmptyTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  				"GetNamesEmptyTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  GetMapTest
    /*
     *   @testName:  GetMapTest
     *   @assertion_ids: PORTLET:JAVADOC:145;PORTLET:SPEC:149;
     *   @test_Strategy: Invoke the method getMap() which will return a map
     *                   consisting of preference name and valus. Test passes 
	 *					 if the names returned matches with the expected 
	 *					 values as defined in the descriptor file.
     *   @assertion: An immutable Map containing preference names as keys 
	 *				and preference values as map values, or null if no 
	 *				preference exist. The keys in the preference map are of 
	 *				type String. The values in the preference map are of type 
	 *				String array (String[]).
     */

    public void GetMapTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  				"GetMapTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	 }

    /*
     *   @testName:  GetMapEmptyTest
     *   @assertion_ids: PORTLET:JAVADOC:145;PORTLET:SPEC:91;
     *   @test_Strategy: Invoke the method getMap() which will return a map
     *                   consisting of preference name and valus. Test passes 
	 *					 if the names returned matches with the expected 
	 *					 values as defined in the descriptor file.
     *   @assertion: An immutable Map containing preference names as keys 
	 *				and preference values as map values, or null if no 
	 *				preference exist. The keys in the preference map are of 
	 *				type String. The values in the preference map are of type 
	 *				String array (String[]).
     */

    public void GetMapEmptyTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  				"GetMapEmptyTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	 }

    /*
     *   @testName:  IsReadOnlyTest
     *   @assertion_ids: PORTLET:JAVADOC:151;
     *   @test_Strategy: Test passes if the method isReadOnly() returns true 
	 *					 if a "<read-only/>" tag is defined for a preference
	 *					 attriute and it is set to "true". Also checks the
     *                   default behavior if the tag is not defined.
     *   @assertion: Returns true, if the value of this key cannot be modified 
	 *				 by the user. Modifiable preferences can be changed by the 
	 *				 portlet in any standard portlet mode (EDIT, HELP, VIEW). 
	 *				 Per default every preference is modifiable. Read-only preferences
     *              cannot be changed by the portlet in any standard portlet mode,
     *              but inside of custom modes it may be allowed changing them.
     *              Preferences are read-only, if they are defined in the deployment
     *              descriptor with read-only set to true, or if the portlet container
     *              restricts write access. 
     *
     */

    public void IsReadOnlyTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  				"IsReadOnlyTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  IsReadOnlyIllegalArgumentExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:152;
     *   @test_Strategy: Invoke the method isReadOnly() by setting the 
     *                  key to be null. Test passes if a 
     *                  IllegalArgumentException() is thrown.
     *   @assertion: If key is null.
     *
     */

    public void IsReadOnlyIllegalArgumentExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                            "IsReadOnlyIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     * @testName: ResetIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:155;
     * @test_Strategy: Invokes PortletPreferences.reset() with a null
     *                 argument and checks if IllegalArgumentException
     *                 is thrown.
     * @assertion: if key is null.
     */
    public void ResetIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResetIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  ResetTest
     *   @assertion_ids: PORTLET:JAVADOC:153;PORTLET:SPEC:150;
     *   @test_Strategy: In the descriptor file set a value for a preference
     *                   key. In the test portlet set a new value for the same
     *                   preference key. Invoke the reset() method with this
     *                   key. Try reading the value of the key using getValue().
     *                   Test passes if the value returned matches that of the 
     *                   value defined for the key in the descriptor file.
     *   @assertion:  Resets or removes the value associated with the specified 
     *               key. If this implementation supports stored defaults, and 
     *               there is such a default for the specified preference, the 
     *               given key will be reset to the stored default. If there 
     *               is no default available the key will be removed. 
     */

    public void ResetTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  		              "ResetTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  ResetReadOnlyExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:154;PORTLET:SPEC:151;
     *   @test_Strategy: Define a Preference entity in the descriptor file.
     *                   Set the <read-only/> tag to "true". Invoke this method. 
     *                   Test passes if a ReadOnlyException() is thrown.
     *   @assertion: If this preference cannot be modified for this request
     *
     */

    public void ResetReadOnlyExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  	"ResetReadOnlyExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  SetValueTest
     *   @assertion_ids: PORTLET:JAVADOC:156;PORTLET:SPEC:157;
     *   @test_Strategy: Invoke the method setValue() and set a value for a 
     *                  particular key. Test passes if the method 
     *                  getValue() returns the correct value.
     *   @assertion: Associates the specified String value with the specified 
     *               key in this preference. 
     *
     */

    public void SetValueTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  		            "SetValueTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  SetValueIllegalArgumentExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:158;
     *   @test_Strategy: Call the method setValue() by having the key set to 
     *                  null. Test passes if a IllegalArgumentException() is 
     *                  thrown.
     *   @assertion: If key is null.
     *
     */

    public void SetValueIllegalArgumentExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                 "SetValueIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  SetValueReadOnlyExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:157;PORTLET:SPEC:151;
     *   @test_Strategy: Define a Preference entity in the descriptor file.
	 *					Set the <read-only/> tag to "true".  Try setting a value 
	 *					for this key. Test passes if a ReadOnlyException() 
	 *					is thrown.
     *   @assertion: If this preference cannot be modified for this request.
     *
     */

    public void SetValueReadOnlyExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  "SetValueReadOnlyExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  SetValuesTest
     *   @assertion_ids: PORTLET:JAVADOC:159;
     *   @test_Strategy: For a particular key set multiple values using the
     *					method setValues(). Using getValues() get back all the 
	 *					values for this key. Test passes if the values returned
     *					are the once that were set through the setValues() 
     *                  method.
     *   @assertion: Associates the specified String array value with the 
     *               specified key in this preference. 
     *
     */

    public void SetValuesTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  		            "SetValuesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  SetValuesIllegalArgumentExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:161;
     *   @test_Strategy: Portlet should throw a IllegalArgumentException() 
     *                  when the method setValues() is invoked with the key 
     *                  set to null.
     *   @assertion: If key is null.
     *
     */

    public void SetValuesIllegalArgumentExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                "SetValuesIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  SetValuesReadOnlyExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:160;PORTLET:SPEC:151;
     *   @test_Strategy: Define a Preference entity in the descriptor file.  
     *                  Set the <read-only/> tag to "true". Invoke the method
     *                  setValues(). Test passes if an ReadOnlyException() 
     *                  is thrown.
     *   @assertion: If this preference cannot be modified for this request.
     *
     */

    public void SetValuesReadOnlyExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  "SetValuesReadOnlyExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
	}

    /*
     *   @testName:  StoreTest
     *   @assertion_ids: PORTLET:JAVADOC:162;PORTLET:SPEC:94;PORTLET:SPEC:156;PORTLET:SPEC:158;
     *   @test_Strategy: First determine whether a proper clean up was done 
     *                   in the previous request. (i.e check whether the 
     *                   preference value is reset to its original value). If 
     *                   not display an error message. Set a new value to the 
     *                   key using setValue(). Invoke store(). Using getValue() 
     *                   get the new value that was set by setValue(). If 
     *                   unable to get the new value the test fails. Reset the 
     *                   new value using reset(key). Invoke getValue() which 
     *                   should return the old value. If it does the test 
     *                   passes else it fails.
     *   @assertion: Commits all changes made to the preferences via the set 
     *               methods in the persistent store. If this call returns 
     *               succesfull, all changes are made persistent. If this call 
     *               fails, no changes are made in the persistent store. This 
     *               call is an atomic operation regardless of how many 
     *               preference attributes have been modified. All changes 
     *               made to preferences not followed by a call to the store 
     *               method are discarded when the portlet finishes the 
     *               processAction methods. If a validator is 
     *               defined for this preferences in the deployment descriptor, 
     *               this validator is called before the actual store is 
     *               performed to check whether the given preferences are vaild.
     *               If this check fails a ValidatorException is thrown. 
     *
     */

    public void StoreTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  		            "StoreTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  

	}

    /*
     *   @testName:  StoreWithValidatorTest
     *   @assertion_ids: PORTLET:JAVADOC:162;PORTLET:SPEC:159;PORTLET:SPEC:161;
     *   @test_Strategy: Create a new test portlet that extends the StoreTest
     *                  portlet. In the descriptor file associate the 
     *                  ValidatorImpl class with this test portlet class. The
     *                  validate() method in the ValidatorImpl class does
     *                  nothing. Test passes if ValidatorException() is not 
     *                  thrown whenever the store() method is invoked.
     *   @assertion: Commits all changes made to the preferences via the set 
     *               methods in the persistent store. If this call returns 
     *               succesfull, all changes are made persistent. If this call 
     *               fails, no changes are made in the persistent store. This 
     *               call is an atomic operation regardless of how many 
     *               preference attributes have been modified. All changes 
     *               made to preferences not followed by a call to the store 
     *               method are discarded when the portlet finishes the 
     *               processAction or render methods. If a validator is 
     *               defined for this preferences in the deployment descriptor, 
     *               this validator is called before the actual store is 
     *               performed to check whether the given preferences are vaild.
     *               If this check fails a ValidatorException is thrown. 
     *
     */

    public void StoreWithValidatorTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  		       "StoreWithValidatorTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  

	}

    /*
     *   @testName:  StoreWithValidatorExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:164;PORTLET:SPEC:160;
     *   @test_Strategy: Create a new test portlet that extends the StoreTest
     *                  portlet. In the descriptor file associate the 
     *                  ValidatorImplWithException class with this test portlet
     *                  class. The validate() method in the 
     *                  ValidatorImplWithException class throws a 
     *                  ValidatorException(). Test passes if 
     *                  ValidatorException() is thrown whenever the store() 
     *                  method is invoked.
     *   @assertion: If the validation performed by the associated validator 
     *               fail
     *
     */

    public void StoreWithValidatorExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                  	  "StoreWithValidatorExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  

	}

    /*
     *   @testName:  StoreIllegalStateExceptionTest
     *   @assertion_ids: PORTLET:JAVADOC:165;PORTLET:SPEC:155;
     *   @test_Strategy: Test passes if a IllegalStateException() is
     *                  thrown when the method store() is invoked inside the
     *                  render() method.
     *   @assertion: If this method is called inside a render call
     *
     */

    public void StoreIllegalStateExceptionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                           "StoreIllegalStateExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
    }
}
