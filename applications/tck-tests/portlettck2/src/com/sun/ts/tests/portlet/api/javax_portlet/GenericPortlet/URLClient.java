/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
/**
 * Copyright 2007 IBM Corporation.
 */
package com.sun.ts.tests.portlet.api.javax_portlet.GenericPortlet;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        URLClient theTests = new URLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
     * Returns the name of the default portlet app.
     */
    public String getDefaultPortletApp() {
        return "portlet_jp_GenericPortlet_web";
    }

    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: AnnotatedDoEditTest
     * @assertion_ids: PORTLET:JAVADOC:39;PORTLET:JAVADOC:34;PORTLET:SPEC:20;PORTLET:SPEC:52;
     * @test_Strategy: Declares in the deployment descriptor that the
     *                 portlet supports the EDIT mode.  Makes a first
     *                 request to the portlet to get a PortletURL
     *                 containing the EDIT mode, then makes a second
     *                 request with that PortletURL.  In this second
     *                 request, overwrites the doEdit() method to
     *                 invoke super.doEdit() and checks that it throws
     *                 an exception.
     * @assertion: Helper method to serve up the edit mode.  The
     *             default implementation throws an exception.
     */
    public void AnnotatedDoEditTest() throws Fault {
    	TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
        								"AnnotatedDoEditTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }
    
    /*
     * @testName: DoEditTest
     * @assertion_ids: PORTLET:JAVADOC:39;PORTLET:JAVADOC:34;PORTLET:SPEC:20;PORTLET:SPEC:52;
     * @test_Strategy: Declares in the deployment descriptor that the
     *                 portlet supports the EDIT mode.  Makes a first
     *                 request to the portlet to get a PortletURL
     *                 containing the EDIT mode, then makes a second
     *                 request with that PortletURL.  In this second
     *                 request, overwrites the doEdit() method to
     *                 invoke super.doEdit() and checks that it throws
     *                 an exception.
     * @assertion: Helper method to serve up the edit mode.  The
     *             default implementation throws an exception.
     */
    public void DoEditTest() throws Fault {
    	TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                        "DoEditTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: AnnotatedDoHelpTest
     * @assertion_ids: PORTLET:JAVADOC:44;PORTLET:JAVADOC:34;PORTLET:SPEC:21;PORTLET:SPEC:52;
     * @test_Strategy: Declares in the deployment descriptor that the
     *                 portlet supports the HELP mode.  Makes a first
     *                 request to the portlet to get a PortletURL
     *                 containing the HELP mode, then makes a second
     *                 request with that PortletURL.  In this second
     *                 request, overwrites the doHelp() method to
     *                 invoke super.doHelp() and checks that it throws
     *                 an exception.
     * @assertion: Helper method to serve up the help mode.  The
     *             default implementation throws an exception.
     */
    public void AnnotatedDoHelpTest() throws Fault {
    	TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                						"AnnotatedDoHelpTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }
    
    /*
     * @testName: DoHelpTest
     * @assertion_ids: PORTLET:JAVADOC:44;PORTLET:JAVADOC:34;PORTLET:SPEC:21;PORTLET:SPEC:52;
     * @test_Strategy: Declares in the deployment descriptor that the
     *                 portlet supports the HELP mode.  Makes a first
     *                 request to the portlet to get a PortletURL
     *                 containing the HELP mode, then makes a second
     *                 request with that PortletURL.  In this second
     *                 request, overwrites the doHelp() method to
     *                 invoke super.doHelp() and checks that it throws
     *                 an exception.
     * @assertion: Helper method to serve up the help mode.  The
     *             default implementation throws an exception.
     */
    public void DoHelpTest() throws Fault {
    	TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                        "DoHelpTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: AnnotatedDoViewTest
     * @assertion_ids: PORTLET:JAVADOC:49;PORTLET:JAVADOC:34;PORTLET:SPEC:19;PORTLET:SPEC:52;
     * @test_Strategy: Overwrites the doView() method to invoke
     *                 super.doView() and checks that it throws an
     *                 exception.
     * @assertion: Helper method to serve up the mandatory view mode.
     *             The default implementation throws an exception.
     */
    public void AnnotatedDoViewTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
    	TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                        "AnnotatedDoViewTestPortlet");
        

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
    
    /*
     * @testName: DoViewTest
     * @assertion_ids: PORTLET:JAVADOC:49;PORTLET:JAVADOC:34;PORTLET:SPEC:19;PORTLET:SPEC:52;
     * @test_Strategy: Overwrites the doView() method to invoke
     *                 super.doView() and checks that it throws an
     *                 exception.
     * @assertion: Helper method to serve up the mandatory view mode.
     *             The default implementation throws an exception.
     */
    public void DoViewTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
    	TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
        								"DoViewTestPortlet");
        

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GenericPortletTest
     * @assertion_ids: PORTLET:JAVADOC:54;
     * @test_Strategy: Sets a flag in the constructor of the test
     *                 portlet and looks for it in render(), to show
     *                 that the constructor has been called.  If this
     *                 test sounds silly, it is, as a GenericPortlet
     *                 (or it's subclass) object couldn't have been
     *                 instantiated without its constructor being called.
     * @assertion: Does nothing.
     */
    public void GenericPortletTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GenericPortletTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetInitParameterIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:56;
     * @test_Strategy: Invokes GenericPortlet.getInitParameter() with
     *                 a null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void GetInitParameterIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetInitParameterNamesTest
     * @assertion_ids: PORTLET:JAVADOC:57;
     * @test_Strategy: Gets the names of the portlet's two
     *                 initialization parameters defined in the
     *                 deployment descriptor using
     *                 getInitParameterNames() and checks for their
     *                 correctness.
     * @assertion: Returns the names of the portlet initialization
     *             parameters as an Enumeration of String objects, or an
     *             empty Enumeration if the portlet has no initialization
     *             parameters.
     */
    public void GetInitParameterNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetInitParameterTest
     * @assertion_ids: PORTLET:JAVADOC:55;
     * @test_Strategy: Gets an initialization parameter defined in the
     *                 deployment descriptor using getInitParameter()
     *                 and checks for its correctness.
     * @assertion: Returns a String containing the value of the named
     *             initialization parameter, or null if the parameter
     *             does not exist.
     */
    public void GetInitParameterTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetPortletConfigTest
     * @assertion_ids: PORTLET:JAVADOC:58;
     * @test_Strategy: Checks that the value returned by
     *                 getPortletConfig() is not null and an init
     *                 parameter can be retrieved using it.
     * @assertion: Returns the PortletConfig object of this portlet.
     */
    public void GetPortletConfigTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletConfigTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetPortletContextTest
     * @assertion_ids: PORTLET:JAVADOC:59;
     * @test_Strategy: Checks that the value returned by
     *                 getPortletContext() is not null and is the same
     *                 as the one returned by
     *                 getPortletConfig().getPortletContext().
     * @assertion: Returns the PortletContext of the portlet
     *             application the portlet is in.
     */
    public void GetPortletContextTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletContextTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetPortletNameTest
     * @assertion_ids: PORTLET:JAVADOC:60;
     * @test_Strategy: Checks that the value returned by
     *                 getPortletName() is the portlet's name.
     * @assertion: Returns the name of this portlet.
     */
    public void GetPortletNameTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletNameTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetResourceBundleTest
     * @assertion_ids: PORTLET:JAVADOC:61;
     * @test_Strategy: Defines resource bundle for the given locale in
     *                 the deployment descriptor with resource-bundle
     *                 tag.  Checks that the value returned by
     *                 getResourceBundle(Locale) is not null.
     *                 Also tries to read a key from the resource bundle.
     * @assertion: Gets the resource bundle for the given locale based
     *             on the resource bundle defined in the deployment
     *             descriptor with resource-bundle tag or the inlined
     *             resources defined in the deployment descriptor.
     */
    public void GetResourceBundleTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetResourceBundleTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: GetTitleTest
     * @assertion_ids: PORTLET:JAVADOC:62;
     * @test_Strategy: Checks that getTitle() returns the title
     *                 defined in the deployment descriptor.
     * @assertion: Used by the render method to get the title.  The
     *             default implementation gets the title from the
     *             ResourceBundle of the PortletConfig of the portlet.
     */
    public void GetTitleTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetTitleTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: InitPortletExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:67;
     * @test_Strategy: Throws PortletException in init() and checks
     *                 that render() is not invoked.
     * @assertion: if an exception has occurred that interferes with
     *             the portlet normal operation.
     */
    public void InitPortletExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InitPortletExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: InitTest
     * @assertion_ids: PORTLET:JAVADOC:66;
     * @test_Strategy: Sets a flag in init() and looks for it in
     *                 render(), to show that it has been called by
     *                 GenericPortlet.init(PortletConfig config).
     *                 Also, checks in render() that the PortletConfig
     *                 object can still be retrieved via getPortletConfig().
     * @assertion: A convenience method which can be overridden so
     *             that there's no need to call super.init(config).
     *             Instead of overriding init(PortletConfig), simply
     *             override this method and it will be called by
     *             GenericPortlet.init(PortletConfig config).  The
     *             PortletConfig object can still be retrieved via
     *             getPortletConfig().
     */
    public void InitTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InitTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: InitUnavailableExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:68;
     * @test_Strategy: Throws UnavailableException in init() and
     *                 checks that render() is not invoked.
     * @assertion: if the portlet is unavailable to perform init.
     */
    public void InitUnavailableExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InitUnavailableExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: InitWithConfigParamTest
     * @assertion_ids: PORTLET:JAVADOC:63;
     * @test_Strategy: Overwrites the init() method to invoke
     *                 super.init() and checks that it stores the
     *                 PortletConfig object.
     * @assertion: Called by the portlet container to indicate to a
     *             portlet that the portlet is being placed into
     *             service.  The default implementation just stores
     *             the PortletConfig object.
     */
    public void InitWithConfigParamTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InitWithConfigParamTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: ProcessActionTest
     * @assertion_ids: PORTLET:JAVADOC:69;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action PortletURL, then makes a second request
     *                 with that PortletURL.  In this second request,
     *                 overwrites the processAction() method to invoke
     *                 super.processAction() and checks that it throws
     *                 an exception.
     * @assertion: Called by the portlet container to allow the
     *             portlet to process an action request.  This method
     *             is called if the client request was originated by a
     *             URL created (by the portlet) with the
     *             RenderResponse.createActionURL() method.  The
     *             default implementation throws an exception.
     */
    public void ProcessActionTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ProcessActionTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: RenderTest
     * @assertion_ids: PORTLET:JAVADOC:74;
     * @test_Strategy: Overwrites the doDispatch() method to print
     *                 some text to the output in order to check that
     *                 render() invokes doDispatch().
     * @assertion: The default implementation of this method sets the
     *             title using the getTitle method and invokes the
     *             doDispatch method.
     */
    public void RenderTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
}
