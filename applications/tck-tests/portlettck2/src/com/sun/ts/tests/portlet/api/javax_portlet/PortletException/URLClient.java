/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */


package com.sun.ts.tests.portlet.api.javax_portlet.PortletException;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }

	/**
	* Return the name of the default portlet app
	*/
	public String getDefaultPortletApp() {
		return "portlet_jp_PortletException_web";
	}


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     *   @testName:  PortletExceptionCtr1Test
     *   @assertion_ids: PORTLET:JAVADOC:130;
	 *   @test_Strategy: Construct a zero argument instance of PortletException
     *                  class.Test passes if the method getMessage() returns a 
     *                  null value.
	 *	 @assertion: Constructs a new portlet exception. 
     *
     */

    public void PortletExceptionCtr1Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "PortletExceptionCtr1TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  PortletExceptionCtr2Test
     *   @assertion_ids: PORTLET:JAVADOC:131;
	 *   @test_Strategy: Construct an instance of PortletException class with 
     *                  a string argument.Test passes if the method getMessage()
     *                  returns the string used during the construction of this
     *                  instance(i.e the argument string).
	 *	 @assertion: Constructs a new portlet exception with the given text.  
     *              The portlet container may use the text write it to a log. 
     *
     */

    public void PortletExceptionCtr2Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "PortletExceptionCtr2TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName: PortletExceptionCtr3Test 
     *   @assertion_ids: PORTLET:JAVADOC:132;
	 *   @test_Strategy: Construct an instance of PortletException class with a      *                  string and a Throwable object as input arguments. Test 
     *                  passes if the method getCause() returns the same
     *                  Throwable object and the method getMessage() 
     *                  returns the string that was used during the 
     *                  construction of this instance. 
	 *	 @assertion: Constructs a new portlet exception when the portlet 
     *              needs to do  the following:    throw an exception   
     *              include a message about the "root cause" that 
     *              interfered with its normal operation  include a 
     *              description message.
     *
     */

    public void PortletExceptionCtr3Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "PortletExceptionCtr3TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
       setCriteriaProperty(SEARCH_STRING,
        ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName: PortletExceptionCtr4Test
     *   @assertion_ids: PORTLET:JAVADOC:133;PORTLET:JAVADOC:129;
	 *   @test_Strategy: Construct an instance of PortletException class with
     *                  a Throwable object as input argument. Test passes if 
     *                  the method getCause() returns the same Throwable object
     *                  used during the construction of this instance.
	 *	 @assertion: Constructs a new portlet exception when the portlet needs 
     *              to throw an exception. The exception's message is based on 
     *              the localized message of the underlying exception. 
     *
     */

    public void PortletExceptionCtr4Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "PortletExceptionCtr4TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
		 */
       setCriteriaProperty(SEARCH_STRING,
        ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName: PrintStackTraceTest
     *   @assertion_ids: PORTLET:JAVADOC:134;
	 *   @test_Strategy: Constuct a zero argument instance of PortletException 
     *                  class.Invoke the method printStackTrace(). Test passes 
     *                  if there is no exception during the execution of this 
     *                  method.(Please note that we are not making any 
     *                  assumption about the content being written when this 
     *                  method is invoked).
	 *	 @assertion: Prints the stack trace of this exception to the standard 
     *              error stream. 
     *
     */

    public void PrintStackTraceTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "PrintStackTraceTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
		 */
       setCriteriaProperty(SEARCH_STRING,
        ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName: PrintStackTraceStreamTest
     *   @assertion_ids: PORTLET:JAVADOC:135;
	 *   @test_Strategy: Constuct a zero argument instance of PortletException 
     *                  class. Invoke the method printStackTrace with an 
     *                  instance of printStream as argument. Test passes if 
     *                  there is no exception during the execution of this 
     *                  method. (Please note that we are not making any 
     *                  assumption about the content being written when this 
     *                  method is invoked.)
	 *	 @assertion: Prints the stack trace of this exception to the specified 
     *              print stream. 
     *
     */

    public void PrintStackTraceStreamTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "PrintStackTraceStreamTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
		 */
       setCriteriaProperty(SEARCH_STRING,
        ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName: PrintStackTraceWriterTest
     *   @assertion_ids: PORTLET:JAVADOC:136;
	 *   @test_Strategy: Constuct a zero argument instance of PortletException 
     *                  class. Invoke the method printStackTrace with an 
     *                  instance of printWriter as argument. Test passes if 
     *                  there is no exception during the execution of this 
     *                  method. (Please note that we are not making any 
     *                  assumption about the content being written when this 
     *                  method is invoked.)
	 *	 @assertion: Prints the stack trace of this exception to the specified 
     *              print writer. 
     *
     */

    public void PrintStackTraceWriterTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "PrintStackTraceWriterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
		 */
       setCriteriaProperty(SEARCH_STRING,
        ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
