/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */


package com.sun.ts.tests.portlet.api.javax_portlet.PortletContext;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;

import com.sun.ts.tests.common.webclient.http.HttpResponse;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }

	/**
	* Return the name of the default portlet app
	*/
	public String getDefaultPortletApp() {
		return "portlet_jp_PortletContext_web";
	}


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     *   @testName:  GetMajorVersionTest
     *   @assertion_ids: PORTLET:JAVADOC:111;
	 *   @test_Strategy: This test portlet gets the major version number and 
     *                  compares it with the expected value.
	 *	 @assertion: Returns the major version of the Portlet API that this 
     *               portlet container supports. 
     *
     */

    public void GetMajorVersionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetMajorVersionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetRealPathTest
	 *	 @assertion_ids: PORTLET:JAVADOC:116;
     *   @test_Strategy: Test passes when the method getRealPath() returns an 
     *                  absolute path when invoked for a virtual path. TODO:
     *                  untested part: This 
     *                  method returns null if the portlet container 
     *                  cannot translate the virtual path to a real path for 
     *                  any reason.
     *   @assertion: Returns a String containing the real path for a given 
     *               virtual path. For example, the path /index.html returns 
     *               the absolute file path of the portlet container file 
     *               system.  The real path returned will be in a form 
     *               appropriate to the computer and operating system on which 
     *               the portlet container is running, including the proper 
     *               path separators. This method returns nullif the portlet 
     *               container cannot translate the virtual path to a real path      *               for any reason (such as when the content is being made 
     *               available from a .war archive). 
     *
     */

    public void GetRealPathTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the Portserver.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetRealPathTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetResourceAsStreamTest
	 *	 @assertion_ids: PORTLET:JAVADOC:120;
     *   @test_Strategy: Test passes if this method when invoked with a valid 
	 *					path (/WEB-INF/web.xml") returns a inputstream object. 
	 *					If it returns null then the test has failed.
     *   @assertion: Returns the resource located at the given path as an 
     *               InputStream object. The data in the InputStream can be of 
     *               any type or length. The method returns null if no resource
     *               exists at the given path. In order to access protected 
     *               resources the path has to be prefixed with /WEB-INF/ 
     *               (for example /WEB-INF/myportlet/myportlet.jsp).  
     *               Otherwise, the direct path is used (for example 
     *               /myportlet/myportlet.jsp). 
     */

    public void GetResourceAsStreamTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetResourceAsStreamTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetResourceTest
	 *	 @assertion_ids: PORTLET:JAVADOC:118;
     *   @test_Strategy: Returns a URL to the resource that is mapped to a 
	 *					specified path
     *   @assertion: Returns a URL to the resource that is mapped to a 
     *               specified path. The path must begin with a slash (/) and 
     *               is interpreted as relative to the current context root. 
     *
     */

    public void GetResourceTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetResourceTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  

    }

    /*
     *   @testName:  GetResourceNullTest
	 *	 @assertion_ids: PORTLET:JAVADOC:118;
     *   @test_Strategy: Specify an invalid path and invoke the method 
     *                  getResource(path). Test passes if the method returns
     *                  null.
     *   @assertion: The method getResource(path) should return null if there 
     *               is no resource at that path. 
     *
     */

    public void GetResourceNullTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                    "GetResourceNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetResourceMalformedURLExceptionTest
	 *	 @assertion_ids: PORTLET:JAVADOC:119;
     *   @test_Strategy: Throw an exception if the pathname is not given in the 	 *					correct form.
     *   @assertion: If the pathname is not given in the correct form
     *
     */

    public void GetResourceMalformedURLExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                 "GetResourceMalformedURLExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetServerInfoTest
	 *	 @assertion_ids: PORTLET:JAVADOC:122;
     *   @test_Strategy: Test passes if the method returns a string with the 
	 *					container name and the version number else fails
     *   @assertion: Returns the name and version of the portlet container in 
     *               which the portlet is running. The form of the returned 
     *               string is containername/versionnumber. 
     *		   		
     *
     */

    public void GetServerInfoTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetServerInfoTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
		invoke();

    }

    /*
     * @testName: GetAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:106;
     * @test_Strategy: Invokes PortletContext.getAttribute() with a
     *                 null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void GetAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  GetAttributeTest
	 *	 @assertion_ids: PORTLET:JAVADOC:105; 
     *   @test_Strategy: Sets one attribute in PortletContext and reads that
	 *					 attribute back using PortletContext.getAttribute().
     *                   Test passes if the same attribute is returned that
     *                   was set before.
     *   @assertion: Returns the portlet container attribute with the given 
     *               name, or null if there is no attribute by that name. An 
     *               attribute allows a portlet container to give the portlet 
     *               additional information not already provided by this 
     *               interface. A list of supported attributes can be retrieved 
     *               using getAttributeNames. The attribute is returned as a 
     *               java.lang.Object or some subclass. Attribute names should 
     *               follow the same convention as package names. The Java 
     *               Portlet API specification reserves names matching 
     *               java.*, javax.*, and sun.*. 
	 *				
     *
     */

    public void GetAttributeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                                getDefaultPortletApp(),
                                                "GetAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetAttributeNullTest
	 *	 @assertion_ids: PORTLET:JAVADOC:105;
     *   @test_Strategy: Checks that getAttribute() returns null if no 
	 *					attribute of the given name exists.
     *   @assertion: Returns the portlet container attribute with the given 
     *               name, or null if there is no attribute by that name. An 
     *               attribute allows a portlet container to give the portlet 
     *               additional information not already provided by this 
     *               interface. A list of supported attributes can be retrieved 
     *               using getAttributeNames. The attribute is returned as a 
     *               java.lang.Object or some subclass. Attribute names should 
     *               follow the same convention as package names. The Java 
     *               Portlet API specification reserves names matching 
     *               java.*, javax.*, and sun.*. 
	 *				
     *
     */

    public void GetAttributeNullTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                   getDefaultPortletApp(),
                                   "GetAttributeNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetInitParameterIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:109;
     * @test_Strategy: Invokes PortletContext.getInitParameter() with
     *                 a null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void GetInitParameterIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  GetInitParameterNamesTest
	 *	 @assertion_ids: PORTLET:JAVADOC:110;
     *   @test_Strategy: Gets all the init parameter names and compares it with 
     *                  the expected values. (Empty enum is
     *                  not testable, since impls can put more parameters.
     *
     *   @assertion: Returns the names of the context initialization parameter
     *               as an Enumeration of String objects, or an empty 
     *               Enumeration if the context has no initialization 
     *               parameters. 
     */

    public void GetInitParameterNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                            getDefaultPortletApp(),
                                            "GetInitParameterNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetInitParameterTest
	 *	 @assertion_ids:PORTLET:JAVADOC:108; 
     *   @test_Strategy: Get the value for the init parameter and compare it 
	 *					with what is expected.  
     *   @assertion: Returns a String containing the value of the named 
     *               context-wide initialization parameter, or null if the 
     *               parameter does not exist. This method provides 
     *               configuration information which may be useful for an 
     *               entire "portlet web application". 
     */

    public void GetInitParameterTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                            getDefaultPortletApp(),
                                            "GetInitParameterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetInitParameterNullTest
	 *	 @assertion_ids: PORTLET:JAVADOC:108;
     *   @test_Strategy: Checks that getInitParameter() returns null if no 
	 *					parameter of the given name exists.
     *   @assertion: Returns a String containing the value of the named 
     *               context-wide initialization parameter, or null if the 
     *               parameter does not exist. This method provides 
     *               configuration information which may be useful for an 
     *               entire "portlet web application". 
     *
     */

    public void GetInitParameterNullTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: RemoveAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:126;
     * @test_Strategy: Invokes PortletContext.removeAttribute() with a
     *                 null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void RemoveAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  RemoveAttributeTest
	 *	 @assertion_ids: PORTLET:JAVADOC:125;
     *   @test_Strategy: Set an attribute, remove the attribute and try to get 
	 *					the attribute from the context. Test passes if the 
	 *					method returns null else fails.
     *   @assertion: Removes the attribute with the given name from the 
     *               portlet context. After removal, subsequent calls to
     *               getAttribute to retrieve the attribute's value 
     *              will return null. 
     */

    public void RemoveAttributeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                 getDefaultPortletApp(),
                                 "RemoveAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: SetAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:128;
     * @test_Strategy: Invokes PortletContext.setAttribute() with a
     *                 null name and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void SetAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  SetAttributeTest
	 *	 @assertion_ids: PORTLET:JAVADOC:127;
     *   @test_Strategy: Sets one attribute in PortletContext and make sure we 
	 *					can read that attribute back using 
	 *					PortletContext.getAttribute() 
     *   @assertion: Binds an object to a given attribute name in this portlet 
     *               context. If the name specified is already used for an 
     *               attribute, this method removes the old attribute and binds 
     *               the name to the new attribute. If a null value is passed, 
     *               the effect is the same as calling removeAttribute(). 
     *               Attribute names should follow the same convention as 
     *               package names. The Java Portlet API specification reserves
     *               names matching java.*, javax.*, and sun.*. 
     */

    public void SetAttributeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                                getDefaultPortletApp(),
                                                "SetAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetAttributeNamesTest
	 *	 @assertion_ids: PORTLET:JAVADOC:107;
     *   @test_Strategy: Get all the context attribute names and compare it 
     *                   with the expected values. Empty Enumeration part
     *                   is untestable as the spec doesn't forbid impl
     *                   to add any extra attribute names.
     *   @assertion: Returns an Enumeration containing the attribute names 
     *               available within this portlet context.
     */

    public void GetAttributeNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                                getDefaultPortletApp(),
                                                "GetAttributeNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetMinorVersionTest
	 *	 @assertion_ids: PORTLET:JAVADOC:113;
     *   @test_Strategy: Get the minor version number and compare it with 
	 *					the expected value.
     *   @assertion: Returns the minor version of the Portlet API that this 
     *               portlet container supports. 
     */

    public void GetMinorVersionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetMinorVersionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetMimeTypeTest
	 *	 @assertion_ids: PORTLET:JAVADOC:112;
     *   @test_Strategy: Get the mime type and compare it with the expected 
	 *					value.
     *   @assertion: Returns the MIME type of the specified file, or null if 
     *               the MIME type is not known. The MIME type is determined 
     *               by the configuration of the portlet container and may be 
     *               specified in a web application deployment descriptor.  
     *               Common MIME types are text/html and image/gif. 
     */

    public void GetMimeTypeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetMimeTypeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetRequestDispatcherTest
	 *	 @assertion_ids: PORTLET:JAVADOC:117; 
     *   @test_Strategy: Using getRequestDispatcher() this test portlet
     *                  invokes a jsp page. Test passes if no exception
     *                  is thrown by the container when the include() method
     *                  is invoked.
     *   @assertion:  Returns a PortletRequestDispatcher object that acts as 
     *               a wrapper for the resource 
     *               located at the given path. A PortletRequestDispatcher object can 
     *               be used include the resource in a response. The resource 
     *               can be dynamic or static. The pathname must begin with a 
     *               slash(/ ) and is interpreted as relative to the current 
     *               context root. This method returns null if the 
     *               PortletContext cannot return a PortletRequestDispatcher. 
     */

    public void GetRequestDispatcherTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetRequestDispatcherTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetRequestDispatcherNullTest
	 *	 @assertion_ids: PORTLET:JAVADOC:117;PORTLET:JAVADOC:114;
     *   @test_Strategy: Using getRequestDispatcher() and getNamedDispatcher()
     *                  on a invalid name/path.
     *   @assertion:  This method returns null if the 
     *               PortletContext cannot return a PortletRequestDispatcher. 
     */

    public void GetRequestDispatcherNullTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetRequestDispatcherNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetNamedDispatcherTest
	 *	 @assertion_ids: PORTLET:JAVADOC:114; 
     *   @test_Strategy: Test passes if the portlet returns a dispatcher object
     *					for a valid portlet else fails if it returns null.
     *   @assertion: Returns a PortletRequestDispatcher object that acts 
     *               as a wrapper for the named 
     *               servlet. Servlets (and also JSP pages) may be given names 
     *               via server administration or via a web application 
     *               deployment descriptor. This method returns null if the 
     *               PortletContext cannot return a PortletRequestDispatcher for any 
     *               reason. 
     */

    public void GetNamedDispatcherTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetNamedDispatcherTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetResourcePathsTest
	 *	 @assertion_ids: PORTLET:JAVADOC:121; 
     *   @test_Strategy: Tets checks if two files supposed to be in 
     *               WEB-INF directory are returned in the listing when
     *               path is /WEB-INF
     *   @assertion: Returns a directory-like listing of all the paths to 
     *               resources within the web application longest sub-path of 
     *               which matches the supplied path argument. Paths 
     *               indicating subdirectory paths end with a slash (/). The 
     *               returned paths are all relative to the root of the web 
     *               application and have a leading slash. For example, for a 
     *               web application containing /welcome.html 
     *               /catalog/index.html /catalog/products.html 
     *               /catalog/offers/books.html /catalog/offers/music.html 
     *               /customer/login.jsp /WEB-INF/web.xml 
     *               /WEB-INF/classes/com.acme.OrderPortlet.class, 
     *               getResourcePaths("/") returns {"/welcome.html", 
     *               "/catalog/", "/customer/", "/WEB-INF/"} 
     *               getResourcePaths("/catalog/") returns 
     *               {"/catalog/index.html", "/catalog/products.html", 
     *               "/catalog/offers/"}.
     */

    public void GetResourcePathsTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetResourcePathsTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetPortletContextNameTest
	 *	 @assertion_ids: PORTLET:JAVADOC:115;
     *   @test_Strategy: Get the portlet context web application name and 
	 *					compare it with the expected value.
     *   @assertion: Returns the name of this portlet application 
	 *				 correponding to this PortletContext as specified in the 
	 *				 web.xml deployment descriptor for this web application by 
	 *				 the display-name element.
     */

    public void GetPortletContextNameTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                       getDefaultPortletApp(),
                                       "GetPortletContextNameTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
