/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */


package com.sun.ts.tests.portlet.api.javax_portlet.PortletSecurityException;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }

	/**
	* Return the name of the default portlet app
	*/
	public String getDefaultPortletApp() {
		return "portlet_jp_PortletSecurityException_web";
	}


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     *   @testName:  PortletSecurityExceptionCtr1Test
     *   @assertion_ids: PORTLET:JAVADOC:216;
	 *   @test_Strategy: Construct a new instance of PortletSecurityException 
     *                  class with a string as argument. Test passes if the 
     *                  method getMessage() returns the argument string that 
     *                  was used during the construction of this instance.
	 *	 @assertion: Constructs a new security exception with the given text. 
     *               The portlet container may use the text write it to a log. 
     *
     */

    public void PortletSecurityExceptionCtr1Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "PortletSecurityExceptionCtr1TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  PortletSecurityExceptionCtr2Test
     *   @assertion_ids: PORTLET:JAVADOC:217;
	 *   @test_Strategy: Construct a new instance of PortletSecurityException 
     *                  class with a string and Throwable object as arguments. 
     *                  Test passes if the methods getMessage() and getCause() 
     *                  returns the string (first argument) and a Throwable
     *                  object(second argument) that was used during the
     *                  construction of this instance.
	 *	 @assertion: Constructs a new portlet security exception when the 
     *              portlet needs to do the following: throw an exception 
     *              include a message about the "root cause" that interfered 
     *              with its normal operation include a description message 
     *
     */

    public void PortletSecurityExceptionCtr2Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "PortletSecurityExceptionCtr2TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  PortletSecurityExceptionCtr3Test
     *   @assertion_ids: PORTLET:JAVADOC:218;
	 *   @test_Strategy: Construct a new instance of PortletSecurityException 
     *                  class with a Throwable object as argument. Test passes 
     *                  if the method getCause() returns the same Throwable
     *                  object used during the construction of this instance.
	 *	 @assertion: Constructs a new portlet security exception when the 
     *              portlet needs to throw an exception. The exception message 
     *              is based on the localized message of the underlying 
     *              exception. 
     */

    public void PortletSecurityExceptionCtr3Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "PortletSecurityExceptionCtr3TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
