/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletSessionUtil;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }

	/**
	* Return the name of the default portlet app
	*/
	public String getDefaultPortletApp() {
		return "portlet_jp_PortletSessionUtil_web";
	}

    /*
     * @class.setup_props: ts_home; 
     */

    /*
     * @testName: DecodeAttributeNameAppScopeTest
     * @assertion_ids:  PORTLET:JAVADOC:252;
     * @test_Strategy: In the test portlet, an instance of a class 
     *      SampleBindingListener implementing HttpSessionBindingListener 
     *      interface is bound to the session with APPLICATION_SCOPE. 
     *      In SampleBindingListener's valueBound() method, 
     *      if decodeAttributeName(attributeName) returns the attributeName 
     *      that was used to bind it to the portlet session, the test passes.
     * @assertion: Returns the portlet attribute name from an encoded portlet 
     *             attribute.
     */
    public void DecodeAttributeNameAppScopeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "DecodeAttributeNameAppScopeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: DecodeScopeAppScopeTest
     * @assertion_ids:  PORTLET:JAVADOC:253;
     * @test_Strategy: In the test portlet, an instance of a class 
     *      SampleBindingListener implementing HttpSessionBindingListener 
     *      interface is bound to the session with APPLICATION_SCOPE. 
     *      In SampleBindingListener's valueBound() method, 
     *      if decodeScope(attributeName) returns the APPLICATION_SCOPE 
     *      the test passes.
     * @assertion: Returns the attribute name of an attribute in the
     *              PORTLET_SCOPE. If the attribute is in the
     *              APPLICATION_SCOPE it returns the attribute name unchanged. 
     */
    public void DecodeScopeAppScopeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "DecodeScopeAppScopeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     * @testName: DecodeAttributeNamePortletScopeTest
     * @assertion_ids:  PORTLET:JAVADOC:252;
     * @test_Strategy: In the test portlet, an instance of a class 
     *      SampleBindingListener implementing HttpSessionBindingListener 
     *      interface is bound to the session with PORTLET_SCOPE. 
     *      In SampleBindingListener's valueBound() method, 
     *      if decodeAttributeName(attributeName) returns the attributeName 
     *      that was used to bind it to the portlet session, the test passes.
     * @assertion: Returns the attribute name of an attribute in the
     *              PORTLET_SCOPE. If the attribute is in the
     *              APPLICATION_SCOPE it returns the attribute name unchanged. 
     */
    public void DecodeAttributeNamePortletScopeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                getDefaultPortletApp(),
                                "DecodeAttributeNamePortletScopeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: DecodeScopePortletScopeTest
     * @assertion_ids:  PORTLET:JAVADOC:253;
     * @test_Strategy: In the test portlet, an instance of a class 
     *      SampleBindingListener implementing HttpSessionBindingListener 
     *      interface is bound to the session with PORTLET_SCOPE. 
     *      In SampleBindingListener's valueBound() method, 
     *      if decodeScope(attributeName) returns the PORTLET_SCOPE 
     *      the test passes.
     * @assertion: 
     */
    public void DecodeScopePortletScopeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "DecodeScopePortletScopeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

}
