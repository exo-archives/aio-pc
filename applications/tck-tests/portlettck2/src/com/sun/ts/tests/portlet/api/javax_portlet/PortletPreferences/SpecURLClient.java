/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletPreferences;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import org.apache.commons.httpclient.HttpState;

import com.sun.ts.tests.portlet.common.util.ResultWriter;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {

    /*
    * Constructor called by the Test Harness
    */

    public static void main( String[] args ) {
        SpecURLClient theTests = new SpecURLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }


    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletPreferences_web";
    }


    /*
     * @class.setup_props: ts_home;
     */                    


    /* Run test */

    /*
     *   @testName: SetValueWithoutStoreTest
     *   @assertion_ids: PORTLET:SPEC:154;
     *   @test_Strategy: First request is to get a action URL. In the second 
     *                   request for the same portlet, the value of the 
     *                   preference attribute is set. Test passes if in the
     *                   rendering the original value is returned .
     *   @assertion: All changes made to PortletPreferences object not
     *   			 followed by a call to the store method must be
     *   			 discarded when the portlet finishes the
     *   			 processAction, processEvent, or serveResource method.
     *
     */

    public void SetValueWithoutStoreTest() throws Fault {

		

        /*
         * Sets the GET request to be sent out to the server.
         */
    	TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                        "SetValueWithoutStoreTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        // Set the test critieras
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
                               ResultWriter.getFailedString(getTestName()));
        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

		/*
		 * Extracts the PortletURL string from the content of the
		 * HttpResponse of the first pass.
		 */
		String portletURL = PortletURLClientTag.extractContent(firstResponse);

		String secondRequest = getPortalReturnURL( portletURL);

        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
	}

    /*
     *   @testName:  SetValueThruProgramTest
     *   @assertion_ids: PORTLET:SPEC:158;
     *   @test_Strategy: Programmatically add a preference attribute through the
     *                   method setValue(). Test passes if the method
     *                   isReadOnly() returns a value of false.
     *   @assertion: Portlets are not restricted to use preference attributes 
     *              defined in the deployment descriptor. They can 
     *              programmatically add preference attributes using names not 
     *              defined in the deployment descriptor. These preferences 
     *              attributes must be treated as modifiable attributes. 
     *
     */

    public void SetValueThruProgramTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                            "SetValueThruProgramTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
    }

    /*
     *   @testName: CheckPreferenceAttributeNullTest  
     *   @assertion_ids: PORTLET:SPEC:148;
     *   @test_Strategy: In the descriptor file define a preference attribute
	 *					and set it to null. Read the preference value in the
	 *					test portlet. Test passes if a null value is returned.
     *   @assertion:  Preference attributes are string array objects. 
	 *				 Preference attributes can be set to null.
     *
     */

    public void CheckPreferenceAttributeNullTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                     "CheckPreferenceAttributeNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
		 */
		 invoke();
    }
}
