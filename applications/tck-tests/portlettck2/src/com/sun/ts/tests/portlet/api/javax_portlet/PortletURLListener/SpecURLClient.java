package com.sun.ts.tests.portlet.api.javax_portlet.PortletURLListener;
import com.sun.javatest.Status;
import com.sun.ts.lib.harness.EETest.Fault;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        SpecURLClient theTests = new SpecURLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
     * Returns the name of the default portlet app.
     */
    public String getDefaultPortletApp() {
        return "portlet_jp_PortletURLListener_web";
    }
    
    /*
     * @class.setup_props: ts_home;
     */
    
    /*
     * @testName: CheckFilterActionURLTest
     * @assertion_ids: PORTLET:47;
     * @test_Strategy: Generate an actionURL and test the if the
     * 				   filter is called.
     * @assertion: The PortletURLGenerationListener interface provides
     * 			   callbacks for each portlet URL type. If the portlet
     * 			   has specified one or more PortletURLGenerationListener
     * 			   classes in the portlet deployment descriptor the
     * 			   portlet container must call the method filterActionURL
     * 			   method for all action URLs before executing the write
     * 			   or toString method of these action URLs.
     */
    public void CheckFilterActionURLTest()  throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "CheckFilterActionURLTestPortlet");
	
		/*****************************************************************
		* FIRST TRIP: To get a PortletURL string created by
		*             RenderResponse.createActionURL().
		*****************************************************************/
		
		/*
		* Sets the GET request to be sent out to the server.
		*/
		String firstRequest = getPortalURL(portletInfo);
		setRequestProperty(REQUEST, firstRequest);
		
		/*
		* Invokes the test.
		*/
		HttpResponse firstResponse = invoke();
		
		/*****************************************************************
		* SECOND TRIP: To send the second request with the previous URL.
		*****************************************************************/
		
		/*
		* Extracts the PortletURL string from the content of the
		* HttpResponse of the first pass.
		*/
		String portletURL = PortletURLClientTag.extractContent(firstResponse);
		
		/*
		* Sets the second GET request to be sent out to the server.
		*/
		String secondRequest = getPortalReturnURL(portletURL);
		setRequestProperty(REQUEST, secondRequest);
		
		/*
		* Sets the test criteria.
		*/
		setCriteriaProperty(SEARCH_STRING,
		ResultWriter.getPassedString(getTestName()));
		
		/*
		* Invokes the test.
		*/
		invoke(firstResponse);
	}
    
    /*
     * @testName: CheckFilterRenderURLTest
     * @assertion_ids: PORTLET:48;
     * @test_Strategy: Generate an actionURL and test the if the
     * 				   filter is called.
     * @assertion: The PortletURLGenerationListener interface provides
     * 			   callbacks for each portlet URL type. If the portlet
     * 			   has specified one or more PortletURLGenerationListener
     * 			   classes in the portlet deployment descriptor the
     * 			   portlet container must call the method filterRenderURL
     * 			   method for all render URLs before executing the write
     * 			   or toString method of these render URLs.
     */
    public void CheckFilterRenderURLTest()  throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "CheckFilterRenderURLTestPortlet");
	
		/*****************************************************************
		* FIRST TRIP: To get a PortletURL string created by
		*             RenderResponse.createRenderURL().
		*****************************************************************/
		
		/*
		* Sets the GET request to be sent out to the server.
		*/
		String firstRequest = getPortalURL(portletInfo);
		setRequestProperty(REQUEST, firstRequest);
		
		/*
		* Invokes the test.
		*/
		HttpResponse firstResponse = invoke();
		
		/*****************************************************************
		* SECOND TRIP: To send the second request with the previous URL.
		*****************************************************************/
		
		/*
		* Extracts the PortletURL string from the content of the
		* HttpResponse of the first pass.
		*/
		String portletURL = PortletURLClientTag.extractContent(firstResponse);
		
		/*
		* Sets the second GET request to be sent out to the server.
		*/
		String secondRequest = getPortalReturnURL(portletURL);
		setRequestProperty(REQUEST, secondRequest);
		
		/*
		* Sets the test criteria.
		*/
		setCriteriaProperty(SEARCH_STRING,
		ResultWriter.getPassedString(getTestName()));
		
		/*
		* Invokes the test.
		*/
		invoke(firstResponse);
	}
    
    /*
     * @testName: CheckFilterResourceURLTest
     * @assertion_ids: PORTLET:49;
     * @test_Strategy: Generate an actionURL and test the if the
     * 				   filter is called.
     * @assertion: The PortletURLGenerationListener interface provides
     * 			   callbacks for each portlet URL type. If the portlet
     * 			   has specified one or more PortletURLGenerationListener
     * 			   classes in the portlet deployment descriptor the
     * 			   portlet container must call the method filterResourceURL
     * 			   method for all resource URLs before executing the write
     * 			   or toString method of these resource URLs.
     */
    public void CheckFilterResourceURLTest()  throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "CheckFilterResourceURLTestPortlet");
	
		/*****************************************************************
		* FIRST TRIP: To get a PortletURL string created by
		*             RenderResponse.createRenderURL().
		*****************************************************************/
		
		/*
		* Sets the GET request to be sent out to the server.
		*/
		String firstRequest = getPortalURL(portletInfo);
		setRequestProperty(REQUEST, firstRequest);
		
		/*
		* Invokes the test.
		*/
		HttpResponse firstResponse = invoke();
		
		/*****************************************************************
		* SECOND TRIP: To send the second request with the previous URL.
		*****************************************************************/
		
		/*
		* Extracts the PortletURL string from the content of the
		* HttpResponse of the first pass.
		*/
		String portletURL = PortletURLClientTag.extractContent(firstResponse);
		
		/*
		* Sets the second GET request to be sent out to the server.
		*/
		String secondRequest = getPortalReturnURL(portletURL);
		setRequestProperty(REQUEST, secondRequest);
		
		/*
		* Sets the test criteria.
		*/
		setCriteriaProperty(SEARCH_STRING,
		ResultWriter.getPassedString(getTestName()));
		
		/*
		* Invokes the test.
		*/
		invoke(firstResponse);
	}

    /*
     * @testName: IsPortletURLInPortletURLGenerationListenerTest
     * @assertion_ids: PORTLET:50;
     * @test_Strategy: Generate an renderURL and test the if the
     * 				   filter is called with an PortletURL.
     * @assertion: The portlet container must provide the PortletURL or
     * 			   ResourceURL to generate to the filter methods and
     * 			   execute the write or toString method on the
     * 			   updated PortletURL or ResourceURL that is the
     * 			   outcome of the filter method call.
     */
    public void IsPortletURLInPortletURLGenerationListenerTest()  throws Fault {
    	TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "IsPortletURLInPortletURLGenerationListenerTestPortlet");
	
		/*****************************************************************
		* FIRST TRIP: To get a PortletURL string created by
		*             RenderResponse.createRenderURL().
		*****************************************************************/
		
		/*
		* Sets the GET request to be sent out to the server.
		*/
		String firstRequest = getPortalURL(portletInfo);
		setRequestProperty(REQUEST, firstRequest);
		
		/*
		* Invokes the test.
		*/
		HttpResponse firstResponse = invoke();
		
		/*****************************************************************
		* SECOND TRIP: To send the second request with the previous URL.
		*****************************************************************/
		
		/*
		* Extracts the PortletURL string from the content of the
		* HttpResponse of the first pass.
		*/
		String portletURL = PortletURLClientTag.extractContent(firstResponse);
		
		/*
		* Sets the second GET request to be sent out to the server.
		*/
		String secondRequest = getPortalReturnURL(portletURL);
		setRequestProperty(REQUEST, secondRequest);
		
		/*
		* Sets the test criteria.
		*/
		setCriteriaProperty(SEARCH_STRING,
		ResultWriter.getPassedString(getTestName()));
		
		/*
		* Invokes the test.
		*/
		invoke(firstResponse);
	}
    /*
     * @testName: IsResourceURLInPortletURLGenerationListenerTest
     * @assertion_ids: PORTLET:50;
     * @test_Strategy: Generate an renderURL and test the if the
     * 				   filter is called with an PortletURL.
     * @assertion: The portlet container must provide the PortletURL or
     * 			   ResourceURL to generate to the filter methods and
     * 			   execute the write or toString method on the
     * 			   updated PortletURL or ResourceURL that is the
     * 			   outcome of the filter method call.
     */
    public void IsResourceURLInPortletURLGenerationListenerTest()  throws Fault {
    	TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "IsResourceURLInPortletURLGenerationListenerTestPortlet");
	
		/*****************************************************************
		* FIRST TRIP: To get a PortletURL string created by
		*             RenderResponse.createRenderURL().
		*****************************************************************/
		
		/*
		* Sets the GET request to be sent out to the server.
		*/
		String firstRequest = getPortalURL(portletInfo);
		setRequestProperty(REQUEST, firstRequest);
		
		/*
		* Invokes the test.
		*/
		HttpResponse firstResponse = invoke();
		
		/*****************************************************************
		* SECOND TRIP: To send the second request with the previous URL.
		*****************************************************************/
		
		/*
		* Extracts the PortletURL string from the content of the
		* HttpResponse of the first pass.
		*/
		String portletURL = PortletURLClientTag.extractContent(firstResponse);
		
		/*
		* Sets the second GET request to be sent out to the server.
		*/
		String secondRequest = getPortalReturnURL(portletURL);
		setRequestProperty(REQUEST, secondRequest);
		
		/*
		* Sets the test criteria.
		*/
		setCriteriaProperty(SEARCH_STRING,
		ResultWriter.getPassedString(getTestName()));
		
		/*
		* Invokes the test.
		*/
		invoke(firstResponse);
	}

    /*
     * @testName: CheckPortletURLGenerationListenerChainTest
     * @assertion_ids: PORTLET:51;
     * @test_Strategy: Generate an renderURL and tests, if all
     * 				   filters called.
     * @assertion: If more than one listener is registered the
     * 			   portlet container must chain the listeners in
     * 			   the order of how they appear in the deployment
     * 			   descriptor.
     */
    public void CheckPortletURLGenerationListenerChainTest()  throws Fault {
    	TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "CheckPortletURLGenerationListenerChainTestPortlet");
	
		/*****************************************************************
		* FIRST TRIP: To get a PortletURL string created by
		*             RenderResponse.createRenderURL().
		*****************************************************************/
		
		/*
		* Sets the GET request to be sent out to the server.
		*/
		String firstRequest = getPortalURL(portletInfo);
		setRequestProperty(REQUEST, firstRequest);
		
		/*
		* Invokes the test.
		*/
		HttpResponse firstResponse = invoke();
		
		/*****************************************************************
		* SECOND TRIP: To send the second request with the previous URL.
		*****************************************************************/
		
		/*
		* Extracts the PortletURL string from the content of the
		* HttpResponse of the first pass.
		*/
		String portletURL = PortletURLClientTag.extractContent(firstResponse);
		
		/*
		* Sets the second GET request to be sent out to the server.
		*/
		String secondRequest = getPortalReturnURL(portletURL);
		setRequestProperty(REQUEST, secondRequest);
		
		/*
		* Sets the test criteria.
		*/
		setCriteriaProperty(SEARCH_STRING,
		ResultWriter.getPassedString(getTestName()));
		
		/*
		* Invokes the test.
		*/
		invoke(firstResponse);
	}

}
