/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletSessionPrivatescope;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import org.apache.commons.httpclient.HttpState;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {

    /*
     * Constructor called by the Test Harness
     */

    public static void main( String[] args ) {
        SpecURLClient theTests = new SpecURLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }


    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletSession_privatescope_web";
    }


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: CheckAttributeNameInPrivateScopeTest
     * @assertion_ids: PORTLET:SPEC:168;PORTLET:SPEC:174;
     * @test_Strategy: Stores an attribute in the PORTLET_SCOPE of the
     *                 portlet session, then invokes
     *                 PortletContext.getRequestDispatcher() to get a
     *                 PortletRequestDispatcher that includes a servlet.
     *                 In the servlet, checks in the PortletSession
     *                 for an attribute with the fabricated attribute
     *                 name `javax.portlet.p.<ID>?<ATTRIBUTE_NAME>'.
     * @assertion: The object must be stored in the APPLICATION_SCOPE
     *             with the following fabricated attribute name
     *             `javax.portlet.p.<ID>?<ATTRIBUTE_NAME>'.  <ID> is a
     *             unique identification for the portlet window
     *             (assigned by the portal/portlet-container) that
     *             must not contain a `?' character.  <ATTRIBUTE_NAME>
     *             is the attribute name used to set the object in the
     *             PORTLET_SCOPE of the portlet session.
     */
    public void CheckAttributeNameInPrivateScopeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "CheckAttributeNameInPrivateScopeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName: CheckSessionAttrInPrivateScopeTest
     *   @assertion_ids: PORTLET:SPEC:167;
     *   @test_Strategy: The first request is issued to two  portlets. The
     *                  first portlet will put an attribute in the portlet
     *                  in PORTLET_SCOPE mode. In second request, 
     *                  Test passes if the first portlet
     *                  is able to read the attribute from the session and the
     *                  second portlet is not able to read the attribute from
     *                  the portlet session.
     *   @assertion: Objects stored in the session using the PORTLET_SCOPE 
     *              must be available to the portlet during requests for the 
     *              same portlet window that the objects where stored from.
     *
     */

    public void CheckSessionAttrInPrivateScopeTest() throws Fault {

		TSPortletInfo[] portletInfo = new TSPortletInfo[3];

        /*
         * Sets the GET request to be sent out to the server.
         */
        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                          		"CheckSessionAttrInPrivateScopeTestPortlet");

        portletInfo[1] = new TSPortletInfo(getDefaultPortletApp(),
                          		"CheckSessionAttrInPrivateScopeTest_1_Portlet");

        portletInfo[2] = new TSPortletInfo(getDefaultPortletApp(),
                          					"RefreshPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

		/*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

		/*
		 * Extracts the PortletURL string from the content of the
		 * HttpResponse of the first pass.
		 */
		String portletURL = PortletURLClientTag.extractContent(firstResponse);

		String secondRequest = getPortalReturnURL( portletURL);

        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING, ResultWriter.getPassedString(
            getTestName()));
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(
            getTestName()));
        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);  

	}
}
