/**
 * Copyright 2007 IBM Corporation.
 */
/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletConfig;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }

    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletConfig_web";
    }



    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: GetInitParameterIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:100;
     * @test_Strategy: Invokes PortletConfig.getInitParameter() with a
     *                 null argument and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void GetInitParameterIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  GetPortletNameTest
     *	 @assertion_ids: PORTLET:JAVADOC:103;
     *   @test_Strategy: Get the portlet name through portlet config and verify
	 *					 that it is not null. 
     *   @assertion: Returns the name of the portlet. 
     *
     */

    public void GetPortletNameTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletNameTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  

    }

    /*
     *   @testName:  GetInitParameterNamesTest
     *	 @assertion_ids: PORTLET:JAVADOC:101;
     *   @test_Strategy: Get init parameters from the descriptor file and 
	 *					verify that it is as expected. Empty Enumeration
     *                  part is untestable, since impls can put more
     *                  parameters and the spec doesn't disallow them.
     *   @assertion: Returns the names of the portlet initialization parameters 
     *              as an Enumeration of String objects or an empty 
     *              Enumeration if the portlet has no initialization parameters.
     *
     */

    public void GetInitParameterNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetInitParameterTest
     *	 @assertion_ids: PORTLET:JAVADOC:99;
     *   @test_Strategy: Get the value of the init parameter defined in the 
	 *					descriptor file and verify that it is as expected.
     *   @assertion: Returns a String containing the value of the named 
     *              initialization parameter or null if the parameter does not 
     *              exist. 
     *				
     *
     */

    public void GetInitParameterTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetInitParameterNullTest
     *	 @assertion_ids: PORTLET:JAVADOC:99;
     *   @test_Strategy: Get the value of the init parameter not defined in the 
	 *					descriptor file. Test passes if the method 
	 *					getInitParameter() returns null.
     *   @assertion: Returns a String containing the value of the named 
     *              initialization parameter or null if the parameter does not 
     *              exist. 
     *				
     *
     */

    public void GetInitParameterNullTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetInitParameterNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetPortletContextTest
     *	 @assertion_ids: PORTLET:JAVADOC:102;
     *   @test_Strategy: Get the portlet context and then compare the minor 
     *                   version returned from the context with the expected 
     *                   minor version number.
     *   @assertion: Returns the PortletContext of the portlet
     *              application the portlet is in.
     *
     */

    public void GetPortletContextTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletContextTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetResourceBundleOnlyLocaleTest
     *	 @assertion_ids: PORTLET:JAVADOC:104;
     *   @test_Strategy: Defines resource bundle for the given locale in
     *                 the deployment descriptor with resource-bundle
     *                 tag.  Checks that the value returned for a key
     *                 defined only in the resource bundle is as espected.
     *   @assertion: Gets the resource bundle for the given locale based on the 
     *              resource bundle defined in the deployment descriptor with 
     *              resource-bundle tag or the inlined resources defined in the 
     *              deployment descriptor. 
     *
     */

    public void GetResourceBundleOnlyLocaleTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetResourceBundleOnlyLocaleTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetResourceBundleSameNameTest
     *	 @assertion_ids: PORTLET:JAVADOC:104;
     *   @test_Strategy: Defines resource bundle for the given locale in
     *                 the deployment descriptor with resource-bundle
     *                 tag.  Same key is defined both in resource bundle and
     *                 inline. This test checks that the value returned by
     *                 getResourceBundle(Locale) is one from the resource 
     *                 bundle.
     *   @assertion: Gets the resource bundle for the given locale based on the 
     *              resource bundle defined in the deployment descriptor with 
     *              resource-bundle tag or the inlined resources defined in the 
     *              deployment descriptor. 
     *
     */

    public void GetResourceBundleSameNameTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetResourceBundleSameNameTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

}
