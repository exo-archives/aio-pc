/*
 * Copyright 2007 IBM Corporation
 */
/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */


package com.sun.ts.tests.portlet.api.javax_portlet.PortletURL;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }

	/**
	* Return the name of the default portlet app
	*/
	public String getDefaultPortletApp() {
		return "portlet_jp_PortletURL_web";
	}


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: SetParameterWithValuesIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:258;
     * @test_Strategy: Invokes PortletURL.setParameter(String, String[])
     *                 with a null name/value and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name or values are null.
     */
    public void SetParameterWithValuesIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetParameterWithValuesIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: SetParameterIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:256;
     * @test_Strategy: Invokes PortletURL.setParameter(String, String)
     *                 with a null name/value and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void SetParameterIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetParameterIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: SetParameterTest
     * @assertion_ids: PORTLET:JAVADOC:255;PORTLET:SPEC:38
     * @test_Strategy: Make a first request to the portlet and add a parameter 
	 *				   into the  BaseURL response object and then in the 
	 *				   second request which invokes the processAction() method 
	 *				   verify that the added parameter is correct using 
	 *				   request.getParameter()
     * @assertion: All the parameters a portlet adds to a BaseURL object
     * 			   must be made available to the portlet as request
     * 			   parameters.
	 */
    public void SetParameterTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetParameterTestPortlet");

        /*
         * Sets the GET request to be sent out to the server.
         */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: SetParameterWithValuesTest
     * @assertion_ids: PORTLET:JAVADOC:257;
     * @test_Strategy: Make a first request to the portlet and add a parameter
     *                 with an array of values into the PortletURL object. In 
     *                 the second request inside the processAction() method 
     *                 verify that for the added parameter all the values are 
     *                 obtained using request.getParameterValues().
     * @assertion: Sets the given String array parameter to this URL. This 
	 *			   method replaces the parameter with the same name that may 
	 *			   previously existed. The PortletURL implementation 
	 *			   'x-www-form-urlencoded' encodes all parameter names and 
	 *			   values. Developers should not encode them. A portlet 
	 *			   container may prefix the attribute names internally in 
	 *			   order to preserve a unique namespace for the portlet.
     */
    public void SetParameterWithValuesTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetParameterWithValuesTestPortlet");

        /*
         * Sets the GET request to be sent out to the server.
         */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: SetParametersIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:260;
     * @test_Strategy: Invokes PortletURL.setParameters() with a null
     *                 argument and checks if IllegalArgumentException
     *                 is thrown.
     * @assertion: if parameters is null, if any of the
     *              key/values in the Map are null, if any of the keys is not a
     *              String, or if any of the values is not a String array.
     */
    public void SetParametersIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetParametersIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: SetParametersTest
     * @assertion_ids: PORTLET:JAVADOC:259;PORTLET:SPEC:67;PORTLET:SPEC:78;
     * @test_Strategy: Makes a first request to the portlet to get a
     *                 render URL with added parameters, then makes a
     *                 second request with that URL.  In this second
     *                 request, checks for the parameters in render().
     * @assertion: Sets a parameter map for this URL.  All previously
     *             set parameters are cleared.
     */
    public void SetParametersTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetParametersTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
         String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: SetPortletModeTest
     * @assertion_ids: PORTLET:JAVADOC:261;PORTLET:SPEC:42;
     * @test_Strategy: Make a first request to the portlet and set the portlet 
	 *				   mode into the PortletURL response object and then in the 	 *				   second request which invokes the processAction() method 
	 *				   verify that the portlet mode is  correct using 
	 *				   request.getPortletMode()
     * @assertion: Indicates the portlet mode the portlet must be in, if this 
     *             portlet URL triggers a request. A URL can not have more than 
     *             one portlet mode attached to it. If more than one portlet 
     *             mode is set only the last one set is attached to the URL.
     */
    public void SetPortletModeTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetPortletModeTestPortlet");

         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  


        /*
         * Extract the PortletURL string with portletmode set in it from the 
		 * content of HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: SetPortletModeExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:262;PORTLET:SPEC:41;
     * @test_Strategy: Invoke the setPortletMode(PortletMode) method with the 
     *                 portlet mode not supported by the portlet. Test passes 
     *                 if a PortletModeException() is thrown.
     * @assertion:  if the portlet cannot switch to this mode, because
     *              the portal does not support this mode, the portlet has not
     *              declared in its deployment descriptor that it supports this mode
     *              for the current markup, or the current user is not allowed to
     *              switch to this mode. 
     */
    public void SetPortletModeExceptionTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetPortletModeExceptionTestPortlet");

         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke();  
     }


    /*
     * @testName: SetWindowStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:266;PORTLET:SPEC:44;
     * @test_Strategy: Invoke the setWindowState(WindowState) method with the 
     *                 window state not supported by the portlet. Test passes 
     *                 if a WindowStateException() is thrown.
     * @assertion: A portlet cannot create a portlet URL using a window state
     * 			   that is not supported by the portlet container. The
     * 			   setWindowState method must throw a WindowStateException
     * 			   if that is the case.
     */
    public void SetWindowStateExceptionTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetWindowStateExceptionTestPortlet");

         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke();  
     }

    /*
     * @testName: ToStringTest
     * @assertion_ids: PORTLET:JAVADOC:267;
     * @test_Strategy: First request issued to a portlet which will return
	 *				  a Portlet URL. Second request is issued to the same 
	 *				  portlet. Test passes if the second request is 
	 *				  successfully received by the portlet.
     * @assertion: Returns the portlet URL string representation to be
     *          embedded in the markup. Note that the returned String may not
     *          be a valid URL, as it may be rewritten by the
     *          portal/portlet-container before returning the markup to the
     *          client. 
     */
    public void ToStringTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ToStringTestPortlet");

        /*
         * Sets the GET request to be sent out to the server.
         */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
    }
}
