/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.RenderRequest;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import org.apache.commons.httpclient.HttpState;
import javax.portlet.PortletMode;
import javax.portlet.WindowState;



/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        SpecURLClient theTests = new SpecURLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
    * Returns the name of the default portlet app.
    */
    public String getDefaultPortletApp() {
        return "portlet_jp_RenderRequest_web";
    }

     
    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: GetRenderParametersForOnlyTargetTest
     * @assertion_ids: PORTLET:SPEC:51;PORTLET:SPEC:36
     * @test_Strategy: This test spans on three request and two portlets.
     *                 In the first request the first portlet will set some
     *                 render parameters and return a render URL. In the 
     *                 second request, the second test portler will set some
     *                 other request parameters and return a render URL. In the
     *                 third request the first portlet will check for the
     *                 parameters that was set in the first request. Test passes
     *                 if the first portlet is able to retrieve the original 
     *                 request parameters set in the first request.
     * @assertion: If a portlet receives a render request that is the result 
     *             of a client request targeted to another portlet in the 
     *             portal page, the parameters must be the same parameters of 
     *             the previous render request.
     */
    public void GetRenderParametersForOnlyTargetTest() throws Fault {

        TSPortletInfo portletInfo[] = new TSPortletInfo[2];

        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                          "GetRenderParametersForOnlyTargetTestPortlet");

        portletInfo[1] = new TSPortletInfo( getDefaultPortletApp(),
                          "GetRenderParametersForOnlyTargetTest_1_Portlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with a parameter created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  


        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         String secondRequest = getPortalReturnURL( portletURLStr);
        
         setRequestProperty(REQUEST, secondRequest);

        /*
         * Invokes the test.
         */

        HttpResponse secondResponse = invoke(firstResponse);  

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the second pass
         */
         String portletURLStr_second = 
                                PortletURLClientTag.extractContent(secondResponse);

         String thrirdRequest = getPortalReturnURL( portletURLStr_second);
        
         setRequestProperty(REQUEST, thrirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(secondResponse);  
    }

    /*
     * @testName: GetParameterOnlySeenByTargetTest
     * @assertion_ids: PORTLET:SPEC:80;
     * @test_Strategy: First request to one portlet writes a 
     *            portletURL with a paramater in it, to the output stream. 
     *            The portlet URL string is extracted and used for second 
     *            request. The target portlet uses 
     *            PortletRequest.getParameter() 
     *            to see if the expected parameter is returned.
     *            Second portlet checks that the above parameter is
     *            not available to it in the second request.
     * @assertion: A portlet must not see any parameter targeted to other 
     *             portlets.
     */
    public void GetParameterOnlySeenByTargetTest() throws Fault {

        TSPortletInfo portletInfo[] = new TSPortletInfo[2];

        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                                   "GetParameterOnlySeenByTargetTestPortlet");

        portletInfo[1] = new TSPortletInfo( getDefaultPortletApp(),
                                  "GetParameterOnlySeenByTargetTest_1_Portlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with a parameter created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  


        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         String secondRequest = getPortalReturnURL( portletURLStr);
        
         setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
                ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: CheckSingleParameterValuesTest
     * @assertion_ids: PORTLET:SPEC:70;
     * @test_Strategy: First request to the portlet writes a portletURL with 
     *                 a parameter having 1 value. The portlet URL string is 
     *                 extracted and used for second request. The portlet uses 
     *                 PortletRequest.getParameterValues() to check the 
     *                 returned array.
     * @assertion: If there is a single parameter value associated with a 
     *             parameter name the method returns must return an array of 
     *             size one containing the parameter value.
     */
    public void CheckSingleParameterValuesTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                      getDefaultPortletApp(),
                                      "CheckSingleParameterValuesTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with a parameter created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: GetContextPathSyntaxTest
     * @assertion_ids: PORTLET:SPEC:91;PORTLET:SPEC:92;PORTLET:JAVADOC:170;
     * @test_Strategy: Testable part: The portlet would 
     *      test that string returned using PortletRequest.getContextPath() 
     *      is either empty or starts with a / and doesn't end with /. 
     *      Untestable part: No way to know how the vendors are going to 
     *      deploy these applications and what would be the context 
     *      path, empty or starting with /.
     * @assertion: The context path is the path prefix associated with the 
     *             portlet context that this portlet is a part of. If the 
     *             context is the "default" context rooted at the base of the 
     *             web server's URL namespace, this path will be an empty 
     *             string. If the context is not rooted at the root of the 
     *             server's namespace, the path starts with a'/' character but 
     *             does not end with a'/' character.
     */
    public void GetContextPathSyntaxTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetContextPathSyntaxTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: ResponseContentTypesOnlySupportedByPortletTest
     * @assertion_ids: PORTLET:SPEC:96;
     * @test_Strategy: Declares in the deployment descriptor that the
     *                 test portlet only supports text/html.  Checks
     *                 that the getResponseContentTypes method returns
     *                 an Enumeration with only text/html in it.
     * @assertion: The getResponseContentTypes method must return only
     *             the content types supported by the current portlet
     *             mode of the portlet.
     */
    public void ResponseContentTypesOnlySupportedByPortletTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResponseContentTypesOnlySupportedByPortletTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
    
    /*
     * @testName: GetPublicParameterOnlySeenByTargetTest
     * @assertion_ids: PORTLET:SPEC:82;PORTLET:SPEC:83;
     * @test_Strategy: First request to the portlet writes
     *                 a renderURL with one public-render-parameter
     *                 and one private parameter to the out stream.
     *                 The URL is exctracted and used for the second
     *                 request. In the second request, one portlet will
     *                 accept only the public-render-parameter and the
     *                 other portlet will pass if it receive no parameters.
     * @assertion: The portlet container must only send those public render
     *             parameters to a portlet which the portlet has defined support
     *             for using supported-public-render-parameter element in
     *             the portlet. The portlet container must only share those
     *             render parameters of a portlet which the portlet has declared
     *             as supported public render parameters using
     *             supported-public-render-parameter element in the portlet.xml.
     */
    public void GetPublicParameterOnlySeenByTargetTest() throws Fault {

        TSPortletInfo portletInfo[] = new TSPortletInfo[3];
        
        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                                     	"GetPublicParameterOnlySeenByTargetTestPortlet");
        
        portletInfo[1] = new TSPortletInfo(getDefaultPortletApp(),
        								"GetPublicParameterOnlySeenByTargetTest_1_Portlet");
        
        portletInfo[2] = new TSPortletInfo(getDefaultPortletApp(),
										"GetPublicParameterOnlySeenByTargetTest_2_Portlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with parameters created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
                ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }
    
    /*
     * @testName: GetPublicParameterMapTest
     * @assertion_ids: PORTLET:SPEC:86;
     * @test_Strategy: First request to the portlet writes
     *                 a renderURL with a public-render-parameter
     *                 and a private parameter to the out stream.
     *                 The URL is exctracted and used for the second
     *                 request. In the second request is checked that
     *                 the getPrivateParameter and getPublicParameter
     *                 method return the right value.
     * @assertion: Portlets can access a merged set of public and private
     *             parameters via the getParameter methods on the PortletRequest
     *             or separated as maps of private parameters via the
     *             getPrivateParameterMap method and public parameters via the
     *             getPublicParameterMap method.
     */
    public void GetPublicParameterMapTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                      getDefaultPortletApp(),
                                      "GetPublicParameterMapTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with a parameter created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }
    
    /*
     * @testName: GetPublicParameterTest
     * @assertion_ids: PORTLET:SPEC:84;
     * @test_Strategy: First request to the portlet writes
     *                 a renderURL with a public-render-parameter
     *                 to the out stream.
     *                 The URL is exctracted and used for the second
     *                 request. In the second request is checked that
     *                 getParameter returns the right value.
     * @assertion: If the portlet was the target of a render URL and this render
     *             URL has set a specific public render parameter the portlet
     *             must receive at least this render parameter.
     */
    public void GetPublicParameterTest() throws Fault {

        TSPortletInfo portletInfo[] = new TSPortletInfo[2];
        
        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                                     	"GetPublicParameterTestPortlet");
        
        portletInfo[1] = new TSPortletInfo(getDefaultPortletApp(),
        								"GetPublicParameterTest_1_Portlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with parameters created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
                ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }
    
    /*
     * @testName: GetPublicParameterLastEntryTest
     * @assertion_ids: PORTLET:SPEC:85;
     * @test_Strategy: First request to the portlet writes
     *                 a renderURL with a public-render-parameter
     *                 and a private parameter with the same name
     *                 to an action url.
     *                 The URL is exctracted and used for the second
     *                 request. In the second request is checked that
     *                 the public parameter is the last entry in the
     *                 retuned array by GetParameterValues.
     * @assertion: If a action or resource parameter has the same name
     *             as a public render parameter the public render parameter
     *             values must be the last entries in the parameter value array.
     */
    public void GetPublicParameterLastEntryTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                      getDefaultPortletApp(),
                                      "GetPublicParameterLastEntryTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with a parameter created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Invokes the test.
         */

        HttpResponse secondResponse = invoke(firstResponse);  
        /*******************************************************************
         * THIRD TRIP:: To send a request using PortletURL returned in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         portletURLStr = PortletURLClientTag.extractContent(
        		 							secondResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String thirdRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(secondResponse);  
    }
    
    /*
     * @testName: GetLifecyclePhaseAttributeTest
     * @assertion_ids: PORTLET:SPEC:90;
     * @test_Strategy: In the render method is checked that the
     *                 getAttribute methode returned the right lifecycle
     *                 phase string.
     * @assertion: This attribute value must be ACTION_PHASE if the current
     *             request is of type ActionRequest, EVENT_PHASE if the
     *             current request is of type EventRequest, RENDER_PHASE
     *             if the current request is of type RenderRequest,
     *             and RESOURCE_SERVING_PHASE if the current request
     *             is of type ResourceRequest.
     */
    public void GetLifecyclePhaseAttributeTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetLifecyclePhaseAttributeTestPortlet");

        /*
         * Sets the GET request to be sent out to the server.
         */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
    
    /*
     * @testName: ResponseContentTypeOnlyIncludesMimeTypesTest
     * @assertion_ids: PORTLET:SPEC:95;
     * @test_Strategy: In the render method is checked that the
     *                 content type only includes the mime type.
     * @assertion: The content type must only includes the MIME
     *             type, not the character set.
     */
    public void ResponseContentTypeOnlyIncludesMimeTypesTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResponseContentTypeOnlyIncludesMimeTypesTestPortlet");

        /*
         * Sets the GET request to be sent out to the server.
         */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
    
    /*
     * @testName: GetWindowIDPortletScopeTest
     * @assertion_ids: PORTLET:SPEC:97;
     * @test_Strategy: In the doView method is get the windowID with
     *                 the getWindowID method. This id is set to the
     *                 SessionAttribute. Then a servlet is included.
     *                 In the service method is checked that the id
     *                 is in the name string from the attribute included.
     * @assertion: The portlet window ID retrieved with the getWindowID
     *             method must be the same as the one that is used by
     *             the portlet container for scoping the 
     *             portlet-scope session attributes.
     */
    public void GetWindowIDPortletScopeTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetWindowIDPortletScopeTestPortlet");

        /*
         * Sets the GET request to be sent out to the server.
         */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
    
    /*
     * @testName: GetCCPPAttributeTest
     * @assertion_ids: PORTLET:SPEC:89;
     * @test_Strategy: In render is checked that the PortletRequest.CCPP_PROFILE
     *                 attribute returned a valid Profile.
     * @assertion: The PortletRequest.CCPP_PROFILE request
     *             attribute must return a javax.ccpp.Profile
     *             based on the current portlet request.
     */
    public void GetCCPPAttributeTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetCCPPAttributeTestPortlet");

        /*
         * Sets the GET request to be sent out to the server.
         */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
}
