/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletRequestDispatcher;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
	
	static final long serialVersionUID=286L;
	
    public static void main(String[] args) {
        URLClient theTests = new URLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
    * Returns the name of the default portlet app.
    */
    public String getDefaultPortletApp() {
        return "portlet_jp_PortletRequestDispatcher_web";
    }


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: IncludeHTMLTest
     * @assertion_ids: PORTLET:JAVADOC:207;PORTLET:SPEC:177;
     * @test_Strategy: Calls the PortletRequestDispatcher.include() method
     *                 and lets the included HTML file to output the
     *                 expected result.
     * @assertion: Includes the content of a resource (servlet, JSP
     *             page, HTML file) in the response.
     */
    public void IncludeHTMLTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "IncludeHTMLTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: IncludeIOExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:209;PORTLET:SPEC:233;
     * @test_Strategy: Calls the PortletRequestDispatcher.include() method
     *                 and expects the included servlet to throw an
     *                 IOException.
     * @assertion: if the included resource throws this exception.
     */
    public void IncludeIOExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "IncludeIOExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: IncludeJSPTest
     * @assertion_ids: PORTLET:JAVADOC:207;
     * @test_Strategy: Calls the PortletRequestDispatcher.include() method
     *                 and lets the included JSP page to output the
     *                 expected result.
     * @assertion: Includes the content of a resource (servlet, JSP
     *             page, HTML file) in the response.
     */
    public void IncludeJSPTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "IncludeJSPTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: IncludePortletExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:208;PORTLET:SPEC:234;
     * @test_Strategy: Calls the PortletRequestDispatcher.include() method
     *                 and expects the included servlet to throw a
     *                 ServletException.
     * @assertion: if the included resource throws a ServletException,
     *             or other exceptions that are not Runtime- or IOExceptions.
     */
    public void IncludePortletExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "IncludePortletExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: IncludeServletTest
     * @assertion_ids: PORTLET:JAVADOC:207;
     * @test_Strategy: Calls the PortletRequestDispatcher.include() method
     *                 and lets the included servlet to output the
     *                 expected result.
     * @assertion: Includes the content of a resource (servlet, JSP
     *             page, HTML file) in the response.
     */
    public void IncludeServletTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "IncludeServletTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: ServletCannotChangeStatusCodeTest
     * @assertion_ids: PORTLET:JAVADOC:207;
     * @test_Strategy: Sets the response status code to 202 instead of
     *                 the usual 200 in the included servlet and
     *                 checks that the status code in the returned
     *                 HTTP response is still 200.
     * @assertion: The included servlet cannot set or change the
     *             response status code or set headers; any attempt to
     *             make a change is ignored.
     */
    public void ServletCannotChangeStatusCodeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ServletCannotChangeStatusCodeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(STATUS_CODE, OK);
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
