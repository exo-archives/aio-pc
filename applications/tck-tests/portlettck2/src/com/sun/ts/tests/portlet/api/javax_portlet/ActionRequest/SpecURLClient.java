/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.ActionRequest;

import com.sun.javatest.Status;
import com.sun.ts.lib.harness.EETest.Fault;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import org.apache.commons.httpclient.HttpState;
import javax.portlet.PortletMode;
import javax.portlet.WindowState;



/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        SpecURLClient theTests = new SpecURLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
    * Returns the name of the default portlet app.
    */
    public String getDefaultPortletApp() {
        return "portlet_jp_ActionRequest_web";
    }

     
    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: CheckActionRequestParameterTest
     * @assertion_ids: PORTLET:SPEC:74;
     * @test_Strategy: First request issued to a portlet which will set a
	 *				   parameter in the action url. Second request issued to 
	 *				   the same portlet where in the request is first issued
	 *				   to the processAction() method and to the render() method.
	 *                 Test passes if in the render() method getParameter()
	 *				   returns a value of null for the parameter set in the
	 *				   action url.
     * @assertion: The portlet-container must not propagate parameters received
	 *			  in an action request to subsequent render requests of the
	 *			  portlet.
     */
    public void CheckActionRequestParameterTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                      getDefaultPortletApp(),
                                      "CheckActionRequestParameterTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with a parameter created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
	}

    /*
     * @testName: GetParameterOnlySeenByTargetTest
     * @assertion_ids: PORTLET:SPEC:80;
     * @test_Strategy: First request to one portlet writes a 
     *            portletURL with a paramater in it, to the output stream. 
     *            The portlet URL string is extracted and used for second 
     *            request. The target portlet uses 
     *            PortletRequest.getParameter() 
     *            to see if the expected parameter is returned.
     *            Second portlet checks that the above parameter is
     *            not available to it in the second request.
     * @assertion: A portlet must not see any parameter targeted to other 
     *             portlets.
     */
    public void GetParameterOnlySeenByTargetTest() throws Fault {

        TSPortletInfo portletInfo[] = new TSPortletInfo[2];

        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                                   "GetParameterOnlySeenByTargetTestPortlet");

        portletInfo[1] = new TSPortletInfo( getDefaultPortletApp(),
                                  "GetParameterOnlySeenByTargetTest_1_Portlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with a parameter created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  


        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(firstResponse);

         String secondRequest = getPortalReturnURL( portletURLStr);
        
         setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
                ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }

    /*
     * @testName: CheckSingleParameterValuesTest
     * @assertion_ids: PORTLET:SPEC:70;
     * @test_Strategy: First request to the portlet writes a portletURL with 
     *                 a parameter having 1 value. The portlet URL string is 
     *                 extracted and used for second request. The portlet uses 
     *                 PortletRequest.getParameterValues() to check the 
     *                 returned array.
     * @assertion: If there is a single parameter value associated with a 
     *             parameter name the method returns must return an array of 
     *             size one containing the parameter value.
     */
    public void CheckSingleParameterValuesTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                      getDefaultPortletApp(),
                                      "CheckSingleParameterValuesTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with a parameter created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }


    /*
     * @testName: GetContextPathSyntaxTest
     * @assertion_ids: PORTLET:SPEC:91;PORTLET:SPEC:92;
     * @test_Strategy: Testable part: The portlet would 
     *      test that string returned using PortletRequest.getContextPath() 
     *      is either empty or starts with a / and doesn't end with /. 
     *      Untestable part: No way to know how the vendors are going to 
     *      deploy these applications and what would be the context 
     *      path, empty or starting with /.
     * @assertion: The context path is the path prefix associated with the 
     *             portlet context that this portlet is a part of. If the 
     *             context is the "default" context rooted at the base of the 
     *             web server's URL namespace, this path will be an empty 
     *             string. If the context is not rooted at the root of the 
     *             server's namespace, the path starts with a'/' character but 
     *             does not end with a'/' character.
     */
    public void GetContextPathSyntaxTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetContextPathSyntaxTestPortlet");


        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }
    
	/*
     * @testName: GetParameterMapEmptyTest
     * @assertion_ids: PORTLET:SPEC:72;
     * @test_Strategy: Test for PortletRequest.getParameterMap() method
     *                  First request to the portlet writes a
     *                  action portletURL with no paramaters in it, 
     *                  to the output stream.
     *                  The portlet URL string is extracted and used for second
     *                  request. In the second request, in processAction,
     *                  portlet uses PortletRequest.getParameterMap()
     *                  to see if the empty enumeration is returned.
     * @assertion: If the request does not have any parameter, the
     *             getParameterMap must return an empty Map object.
     */
    public void GetParameterMapEmptyTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetParameterMapEmptyTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }
    
	/*
     * @testName: GetLifecyclePhaseAttributeTest
     * @assertion_ids: PORTLET:SPEC:90;
     * @test_Strategy: In the first call, the render method generate
     *                 an actionURL and write it to the output stream.
     *                 The url is extracted and used for a second request.
     *                 In the processAction method is checked that the
     *                 getAttribute methode returned the right lifecycle
     *                 phase string.
     * @assertion: This attribute value must be ACTION_PHASE if the current
     *             request is of type ActionRequest, EVENT_PHASE if the
     *             current request is of type EventRequest, RENDER_PHASE
     *             if the current request is of type RenderRequest,
     *             and RESOURCE_SERVING_PHASE if the current request
     *             is of type ResourceRequest.
     */
    public void GetLifecyclePhaseAttributeTest() throws Fault {

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetLifecyclePhaseAttributeTestPortlet");

        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string written by the portlet 
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL(portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */

        invoke(firstResponse);  
    }
}
