/**
 * Copyright 2007 IBM Corporation.
 */
/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletConfig;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.util.ResultWriter;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {


    /*
    * Constructor called by the Test Harness
    */

    public static void main( String[] args ) {
        SpecURLClient theTests = new SpecURLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }


    /*
     * @class.setup_props: ts_home;
     */                    


    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletConfig_web";
    }


    /* Run test */


    /*
     *   @testName: GetResourceBundleInlineWithLocalesTest
     *   @assertion_ids: PORTLET:SPEC:26;
     *   @test_Strategy: Request issued to a portlet which will create a
     *                   resource bundle object based on two locales, en_US and
     *                   fr_FR. Test passes if the method getResource(locale)
     *                   returns the same inline title as defined in the 
     *                   descriptor file for both the locales.
     *   @assertion: If the portlet definition defines a resource bundle the
	 *				 portlet-container must look up these values in the 
	 *				 ResourceBundle. If the root resource bundle does not
	 *				 contain the resources for these values and the values are
     *				 defined inline, the portlet container must add the inline
	 *				 values as resources of the root resource bundle.
     *
     */
    public void GetResourceBundleInlineWithLocalesTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                        "GetResourceBundleInlineWithLocalesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName: GetResourceBundleBothTest
     *   @assertion_ids: PORTLET:SPEC:26;
     *   @test_Strategy: Resources are defined in both the descriptor file 
	 *					 as well as inline. Request issued to a portlet which 
	 *					 will create a resource bundle object and then tries to
	 *					 read the value of the resource defined inline. 
     *   @assertion: If the portlet definition defines a resource bundle the
	 *				 portlet-container must look up these values in the 
	 *				 ResourceBundle. If the root resource bundle does not
	 *				 contain the resources for these values and the values are
     *				 defined inline, the portlet container must add the inline
	 *				 values as resources of the root resource bundle.
     *
     */
    public void GetResourceBundleBothTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                        						"GetResourceBundleBothTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
	}



    /*
     *   @testName:  GetResourceBundleOnlyInlineTest
     *	 @assertion_ids: PORTLET:SPEC:27;
     *   @test_Strategy: Checks if the resources are defined in-line in the 
     *                  DeploymentDescriptor, getResourceBundle uses them 
     *                  as default, when no other resource bundles are deployed.
     *   @assertion: If the portlet definition does not define a resource 
	 *				bundle and the information is defined inline in the 
	 *			 	deployment descriptor, the portlet container must create a
	 *				ResourceBundle and populate it with the inlines values using
	 *				the keys defined in the PLT.21.10 Resource Bundles section
     *
     */

    public void GetResourceBundleOnlyInlineTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "GetResourceBundleOnlyInlineTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetDefaultNamespaceTest
     *	 @assertion_ids: PORTLET:SPEC:28;
     *   @test_Strategy: Checks if the PortletConfig contains the right
     *   				 Default Event Namespace in the render-phase
     *   				 
     *   @assertion: The getDefaultNamespace method of the PortletConfig
     *   			 interface returns the default namespace for events
     *   			 and public render parameters set in the portlet
     *   			 deployment descriptor with the default-namespace
     *   			 element, or the XML default namespace
     *   			 XMLConstants.NULL_NS_URI if no default namespace
     *   			 is provided in the portlet deployment descriptor.
     */

    public void GetDefaultNamespaceTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "GetDefaultNamespaceTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
    /*
     *   @testName:  GetPublicRenderParameterNamesTest
     *	 @assertion_ids: PORTLET:SPEC:29;
     *   @test_Strategy: Checks the Public Render Parameter Names in the
     *   				 PortletConfig.
     *   				 
     *   @assertion: The getPublicRenderParameterNames method of the
     *   			 PortletConfig interface returns the public render
     *   			 parameter names found in the portlet definition
     *   			 in the deployment descriptor or an empty enumeration
     *   			 if no public render parameters are defined for the
     *   			 current portlet definition.
     *
     */

    public void GetPublicRenderParameterNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                     	"GetPublicRenderParameterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
    /*
     *   @testName:  GetNoPublicRenderParameterNamesTest
     *	 @assertion_ids: PORTLET:SPEC:29;
     *   @test_Strategy: Checks the Public Render Parameter Names in the
     *   				 PortletConfig.
     *   				 
     *   @assertion: The getPublicRenderParameterNames method of the
     *   			 PortletConfig interface returns the public render
     *   			 parameter names found in the portlet definition
     *   			 in the deployment descriptor or an empty enumeration
     *   			 if no public render parameters are defined for the
     *   			 current portlet definition.
     *
     */

    public void GetNoPublicRenderParameterNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                                     	"GetNoPublicRenderParameterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
    
    /*
     *   @testName:  GetPublishingProcessingEventQNamesTest
     *	 @assertion_ids: PORTLET:SPEC:30;PORTLET:SPEC:32;
     *   @test_Strategy: Checks if the PortletConfig contains the right
     *   				 supported-publishing-event and no processing
     *   			 	 event in the render-phase.
     *   				 
     *   @assertion: The getPublishingEventQNames method of the
     *   			 PortletConfig interface returns the publishing
     *   			 event QNames found in the portlet definition in
     *   			 the deployment descriptor with the
     *   			 supported-publishing-event element or an empty
     *   			 enumeration if no publishing events are defined
     *   			 for the current portlet definition.
     *   			 The getProcessingEventQNames method of the
     *   			 PortletConfig interface returns the processing
     *   			 event QNames found in the portlet definition in
     *   			 the deployment descriptor with the
     *   			 supported-processing-event element or an empty
     *   			 enumeration if no processing events are defined
     *   			 for the current portlet definition.
     */
    public void GetPublishingProcessingEventQNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "GetPublishingProcessingEventQNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
    /*
     *   @testName:  GetPublishingProcessingEventNamesTest
     *	 @assertion_ids: PORTLET:SPEC:30;PORTLET:SPEC:32;
     *   @test_Strategy: Checks if the PortletConfig contains the right
     *   				 supported-publishing-event and no processing
     *   			 	 event in the render-phase.
     *   				 
     *   @assertion: The getPublishingEventQNames method of the
     *   			 PortletConfig interface returns the publishing
     *   			 event QNames found in the portlet definition in
     *   			 the deployment descriptor with the
     *   			 supported-publishing-event element or an empty
     *   			 enumeration if no publishing events are defined
     *   			 for the current portlet definition.
     *   			 The getProcessingEventQNames method of the
     *   			 PortletConfig interface returns the processing
     *   			 event QNames found in the portlet definition in
     *   			 the deployment descriptor with the
     *   			 supported-processing-event element or an empty
     *   			 enumeration if no processing events are defined
     *   			 for the current portlet definition.
     *   			 If the event was defined using the name element
     *   			 instead of the qname element the defined default
     *   			 namespace must be added as namespace for the
     *   			 returned QName.
     */
    public void GetPublishingProcessingEventNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "GetPublishingProcessingEventNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
    /*
     *   @testName:  GetNoPublishingProcessingEventQNamesTest
     *	 @assertion_ids: PORTLET:SPEC:30;PORTLET:SPEC:32;
     *   @test_Strategy: Checks if the PortletConfig contains no
     *   				 supported-publishing-event and no processing
     *   			 	 event in the render-phase.
     *   				 
     *   @assertion: The getPublishingEventQNames method of the
     *   			 PortletConfig interface returns the publishing
     *   			 event QNames found in the portlet definition in
     *   			 the deployment descriptor with the
     *   			 supported-publishing-event element or an empty
     *   			 enumeration if no publishing events are defined
     *   			 for the current portlet definition.
     *   			 The getProcessingEventQNames method of the
     *   			 PortletConfig interface returns the processing
     *   			 event QNames found in the portlet definition in
     *   			 the deployment descriptor with the
     *   			 supported-processing-event element or an empty
     *   			 enumeration if no processing events are defined
     *   			 for the current portlet definition.
     */
    public void GetNoPublishingProcessingEventQNamesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "GetNoPublishingProcessingEventQNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
    
    /*
     *   @testName:  GetSupportedLocalesTest
     *	 @assertion_ids: PORTLET:SPEC:34;
     *   @test_Strategy: Checks if the PortletConfig contains
     *   				 supported Locales in the render-phase.
     *   				 
     *   @assertion: The getSupportedLocales method of the
     *   		     PortletConfig interface returns the supported
     *   			 locales found in the portlet definition in the
     *   			 deployment descriptor with the supported-locale
     *   			 element or an empty enumeration if no supported
     *   			 locales are defined for the current portlet
     *   			 definition.
     */
    public void GetSupportedLocalesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "GetSupportedLocalesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
    
    /*
     *   @testName:  GetNoSupportedLocalesTest
     *	 @assertion_ids: PORTLET:SPEC:34;
     *   @test_Strategy: Checks if the PortletConfig contains no
     *   				 supported Locales in the render-phase.
     *   				 
     *   @assertion: The getSupportedLocales method of the
     *   		     PortletConfig interface returns the supported
     *   			 locales found in the portlet definition in the
     *   			 deployment descriptor with the supported-locale
     *   			 element or an empty enumeration if no supported
     *   			 locales are defined for the current portlet
     *   			 definition.
     */
    public void GetNoSupportedLocalesTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "GetNoSupportedLocalesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
