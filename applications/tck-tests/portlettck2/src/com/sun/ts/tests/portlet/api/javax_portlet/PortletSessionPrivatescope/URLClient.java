/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletSessionPrivatescope;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import org.apache.commons.httpclient.HttpState;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {

    /*
     * Constructor called by the Test Harness
     */

    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }


    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletSession_privatescope_web";
    }


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     *   @testName:  GetAttributeNamesTest
     *   @assertion_ids: PORTLET:JAVADOC:227;
     *   @test_Strategy: (PORTLET_SCOPE)Makes sure that an Enumeration of 
     *                  String objects containing the names of all the objects 
     *                  bound to this session. 
     *   @assertion: Returns an Enumeration of String objects containing the 
     *               names of all the objects bound to this session in the 
     *               given scope. 
     *
     */

    public void GetAttributeNamesTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetAttributeNamesIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:228;
     *   @test_Strategy:  (PORTLET_SCOPE)Negative test for the method. Call 
     *                  this method after invalidating the session. It should 
     *                  throw IllegalStateException.
     *   @assertion: If this method is called on an invalidated session.
     *
     */

    public void GetAttributeNamesIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNamesIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

 
        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));
        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:222;
     *   @test_Strategy: (PORTLET_SCOPE)Makes sure PortletSession.getAttribute()
     *                  returns the object bound with the specified name in 
     *                  this session.
     *   @assertion: Returns the object bound with the specified name in this 
     *               session, or null if no object is bound under the name in 
     *               the given scope.
     *
     */

    public void GetAttributeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:223;
     *   @test_Strategy:  (PORTLET_SCOPE)Negative test for the method. Call 
     *                  this method after invalidating the session. It should 
     *                  throw IllegalStateException.
     *   @assertion: If this method is called on an invalidated session
     *
     */

    public void GetAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);


        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  RemoveAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:242;
     *   @test_Strategy:  (PORTLET_SCOPE)In the portletSession, set an 
     *                  attribute, remove the attribute and then check to make 
     *                  sure it is gone.
     *   @assertion: Removes the object bound with the specified name and the 
     *               given scope from this session. If the session does not 
     *               have an object bound with the specified name, this method 
     *               does nothing. 
     *
     */

    public void RemoveAttributeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);
        
        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  RemoveAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:243;
     *   @test_Strategy:  (PORTLET_SCOPE)A negative test for RemoveAttribute 
     *                  method. Invalidate a session and then try to call this 
     *                  method. It should throw an exception.
     *   @assertion: If this method is called on a session which has been 
     *               invalidated
     *
     */

    public void RemoveAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  SetAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:248;
     *   @test_Strategy:  (PORTLET_SCOPE)Set attributes and then try to get 
     *                  them using getAttribute(). If found, the test is passed,
     *                  else failed.
     *   @assertion: Binds an object to this session in the given scope, using 
     *               the name specified. If an object of the same name in this 
     *               scope is already bound to the session, that object is 
     *               replaced. 
     *
     */

    public void SetAttributeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  SetAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:249;
     *   @test_Strategy:  (PORTLET_SCOPE)Negative test. Invalidate a session 
     *                  and try to set an attribute in it. It should throw 
     *                  IllegalStateException.
     *   @assertion: If this method is called on a session which has been 
     *               invalidated
     *
     */

    public void SetAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }



    /*
     *   @testName:  GetAttributeNullTest
     *   @assertion_ids: PORTLET:JAVADOC:222;
     *   @test_Strategy: (PORTLET_SCOPE)Checks that the method returns null for 
     *          attribute that is not bound to this session.
     *   @assertion: Returns the object bound with the specified name in this 
     *               session, or null if no object is bound under the name in 
     *               the given scope.
     *
     */

    public void GetAttributeNullTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
