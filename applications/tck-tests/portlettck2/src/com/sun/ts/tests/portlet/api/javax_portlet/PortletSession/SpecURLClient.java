/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletSession;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.common.webclient.http.HttpResponse;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {


    /*
    * Constructor called by the Test Harness
    */

    public static void main( String[] args ) {
        SpecURLClient theTests = new SpecURLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }


    /*
     * @class.setup_props: ts_home;
     */                    


    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletSession_web";
    }


    /* Run test */


    /*
     *   @testName: CheckSessionValueForPortletsInSameAppTest
     *   @assertion_ids: PORTLET:SPEC:162;PORTLET:SPEC:163;PORTLET:SPEC:166;
     *   @test_Strategy: Request sent for two portlets of the same application. 
     *                  One portlet will put an attribute in the session, 
     *                  in the first request.Test passes if in the second 
     *                  request, the second portlet is able to read
     *                  the session attribute.The second 
     *                 request is made using a URL written by a generic 
     *                  RefreshPortlet.
     *   @assertion: For portlets within the same portlet application, a 
     *               portlet container must ensure that every portlet request 
     *               generated as result of a group of requests originated 
     *               from the portal to complete a single client request 
     *               receive or acquire the same session. If within these 
     *               portlet requests more than one portlet creates a session, 
     *               the session object must be the same for all the portlets 
     *               in the same portlet application. Any object stored in the 
     *               session using the APPLICATION_SCOPE is available to any 
     *               other portlet that belongs to the same portlet application
     *               and that handles a request identified as being a part 
     *               of the same session.
     *
     */

    public void CheckSessionValueForPortletsInSameAppTest() throws Fault {

		TSPortletInfo[] portletInfo = new TSPortletInfo[3];

        /*
         * Sets the GET request to be sent out to the server.
         */
        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                          "CheckSessionValueForPortletsInSameAppTestPortlet");

        portletInfo[1] = new TSPortletInfo(getDefaultPortletApp(),
                          "CheckSessionValueForPortletsInSameAppTest_1_Portlet");

        portletInfo[2] = new TSPortletInfo(getDefaultPortletApp(),
                          					"RefreshPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

		/*
		 * Extracts the PortletURL string from the content of the
		 * HttpResponse of the first pass.
		 */
		String portletURL = PortletURLClientTag.extractContent(firstResponse);

		String secondRequest = getPortalReturnURL( portletURL);

        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
    }

    /*
     *   @testName: CheckSessionValueForPortletsInDiffAppTest
     *   @assertion_ids: PORTLET:SPEC:164;PORTLET:SPEC:165;
     *   @test_Strategy: Request sent for two portlets in two different web 
     *                   applications. In first request, the portlet in the 
     *                   first web application will put an attribute in session.
     *                   Test passes when the portlet in the second web 
     *                   application, in the second request tries to read 
     *                   the session attribute and gets a value of null.
     *                   The second request is made using a URL written 
     *                   by a generic portlet RefreshPortlet.
     *   @assertion: PortletSession objects must be scoped at the portlet 
     *               application context level. The portlet container must 
     *               not share the PortletSession object or the attributes 
     *               stored in it among different portlet applications or among
     *               different user sessions.
     */

    public void CheckSessionValueForPortletsInDiffAppTest() throws Fault {

		TSPortletInfo[] portletInfo = new TSPortletInfo[3];

        /*
         * Sets the GET request to be sent out to the server.
         */
        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                          "CheckSessionValueForPortletsInDiffAppTestPortlet");

        portletInfo[1] = new TSPortletInfo(
                         "portlet_jp_PortletSession_secondapp_web",
                         "CheckSessionValueForPortletsInDiffAppTest_1_Portlet");

        portletInfo[2] = new TSPortletInfo(getDefaultPortletApp(),
                          					"RefreshPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

		/*
		 * Extracts the PortletURL string from the content of the
		 * HttpResponse of the first pass.
		 */
		String portletURL = PortletURLClientTag.extractContent(firstResponse);

		String secondRequest = getPortalReturnURL( portletURL);

        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
	}
    

    /*
     *   @testName: CompareHttpAndPortletSessionTest
     *   @assertion_ids: PORTLET:SPEC:169;
     *   @test_Strategy: First request issued to both the portlets and the 
     *                 RefreshPortlet. The first portlet calls a servlet
     *                 in the same application. This servlet puts a attribute 
     *                 in the session. In second request, second portlet from 
     *                 checks for that attribute in the session. If the
     *                 attribute is present the test passes, else the test 
     *                 fails. The second request is made using a URL written 
     *                 by a generic RefreshPortlet.
     *   @assertion: A direct consequence of this is that data stored in the 
     *              HttpSession by servlets or JSPs is accessible to portlets 
     *              through the PortletSession in the portlet application scope.
     */

    public void CompareHttpAndPortletSessionTest() throws Fault {

		TSPortletInfo[] portletInfo = new TSPortletInfo[3];

        /*
         * Sets the GET request to be sent out to the server.
         */
        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                          			"CompareHttpAndPortletSessionTestPortlet");

        portletInfo[1] = new TSPortletInfo(getDefaultPortletApp(),
                          		"CompareHttpAndPortletSessionTest_2_Portlet");

        portletInfo[2] = new TSPortletInfo(getDefaultPortletApp(),
                          					"RefreshPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

		/*
		 * Extracts the PortletURL string from the content of the
		 * HttpResponse of the first pass.
		 */
		String portletURL = PortletURLClientTag.extractContent(firstResponse);

		String secondRequest = getPortalReturnURL( portletURL);

        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
	}

    /*
     *   @testName: ComparePortletAndHttpSessionTest
     *   @assertion_ids: PORTLET:SPEC:170;PORTLET:SPEC:173;
     *   @test_Strategy: First request goes to a portlet, that puts an 
	 *					attribute in the session in APP_SCOPE. 
     *                  The second request is to a 
	 *					servlet in the same application, that checks for that 
	 *					attribute, by the same name as put in the portlet 
     *                  session. If found and same, the test passes.
     *   @assertion: Data stored by portlets in the PortletSession in the 
     *              portlet application scope is accessible to servlets and 
     *              JSPs through the HttpSession.The attribute names must be 
     *              the same if APPLICATION_SCOPE scope is used.
     */

    public void ComparePortletAndHttpSessionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                          "ComparePortletAndHttpSessionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

		 /*
		  * Extract the portlet context path
		  */
		PortletTCKCustomClientTag customTag = 
		   new PortletTCKCustomClientTag(CommonConstants.PATH_TO_SERVLET_TAG);

		String pathToServlet = customTag.extractTag(firstResponse);

		/*
		 * New request to a servlet in the same application. Request 
		 * made using the context path.
		 */

		setRequestProperty(REQUEST, pathToServlet);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
	}

    /*
     *   @testName: InvalidateServletAndPortletSessionTest
     *   @assertion_ids: PORTLET:SPEC:171;
     *   @test_Strategy: Request issued to a portlet which in turn will invoke
     *                   the servlet through Request Dispatcher. The servlet
     *                   will invalidate the servlet session. Once the control
     *                   is transferred back to the portlet a check is made to
     *                   determine whether we can retrieve the portlet session 
     *                   object. Test passes if a null value is obtained for 
     *                   the portlet session object.
     *   @assertion: If the HttpSession object is invalidated, the 
     *              PortletSession object must also be invalidated by the 
     *              portlet container.
     *
     */

    public void InvalidateServletAndPortletSessionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                               "InvalidateServletAndPortletSessionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName: InvalidatePortletAndServletSessionTest
     *   @assertion_ids: PORTLET:SPEC:172;
     *   @test_Strategy: First request is to a portlet which will create and
     *                   invalidate the portlet session. The second request is
     *                   to a servlet which will try to get the session object.
     *                   Test passes if a null value for session object is 
     *                   obtained. 
     *   @assertion: If the PortletSession object is invalidated by a portlet, 
     *               the portlet container must invalidate the associated 
     *               HttpSession object.
     *
     */

    public void InvalidatePortletAndServletSessionTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(getDefaultPortletApp(),
                               "InvalidatePortletAndServletSessionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

		 /*
		  * Extract the portlet context path
		  */
		PortletTCKCustomClientTag customTag = 
		   new PortletTCKCustomClientTag(CommonConstants.PATH_TO_SERVLET_TAG);

		String pathToServlet = customTag.extractTag(firstResponse);

		/*
		 * New request to a servlet in the same application. Request 
		 * made using the context path.
		 */

		setRequestProperty(REQUEST, pathToServlet); 

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
    }
}
