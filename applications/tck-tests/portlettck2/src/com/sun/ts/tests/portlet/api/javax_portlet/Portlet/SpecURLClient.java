/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
/**
 * Copyright 2007 IBM Corporation.
 */
package com.sun.ts.tests.portlet.api.javax_portlet.Portlet;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class SpecURLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        SpecURLClient theTests = new SpecURLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
     * Returns the name of the default portlet app.
     */
    public String getDefaultPortletApp() {
        return "portlet_jp_Portlet_web";
    }
    
    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: InitFailedDestroyNotCalledTest
     * @assertion_ids: PORTLET:SPEC:7;
     * @test_Strategy: Uses two requests and two portlets.  The first
     *                 request targets the first portlet which throws
     *                 UnavailableException in init() and stores an
     *                 attribute in the portlet context in destroy().
     *                 The second request targets the second portlet
     *                 which looks for this attribute in the portlet
     *                 context.  Test passes if this attribute is not
     *                 found.  The URL for second request is obtained
     *                 from URL written in the response by a generic
     *                 common RefreshPortlet.
     * @assertion: The destroy method must not be called because the
     *             initialization is considered unsuccessful.
     */
    public void InitFailedDestroyNotCalledTest() throws Fault {
        TSPortletInfo[] portletInfos = new TSPortletInfo[3];

        portletInfos[0] = new TSPortletInfo(getDefaultPortletApp(),
                                            "InitFailedDestroyNotCalledTestPortlet");

        portletInfos[1] = new TSPortletInfo(getDefaultPortletApp(),
                                            "InitFailedDestroyNotCalledTest_1_Portlet");

        portletInfos[2] = new TSPortletInfo(getDefaultPortletApp(),
                                            "RefreshPortlet");

        /*****************************************************************
         * FIRST TRIP: To send the first request.
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfos);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: InitRuntimeExceptionTest
     * @assertion_ids: PORTLET:SPEC:8;
     * @test_Strategy: Throws RuntimeException in init() and checks
     *                 that render() is not invoked.
     * @assertion: A RuntimeException thrown durlng initialization
     *             must be handled as a PortletException.
     */
    public void InitRuntimeExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InitRuntimeExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: OnePortletObjectPerJVMTest
     * @assertion_ids: PORTLET:SPEC:2;PORTLET:SPEC:3;
     * @test_Strategy: Uses a static variable (one per JVM) and an
     *                 instance variable (one per portlet object) as
     *                 counters.  Increments both variables in every
     *                 portlet invocation.  If only one portlet object
     *                 per portlet definition is used, they always
     *                 have the same value.  The URL for subsequent
     *                 requests is obtained from URL written in the
     *                 response by a generic common RefreshPortlet.
     * @assertion: For a portlet, not hosted in a distributed
     *             environment (the default), the portlet container
     *             must instantiate and use only one portlet object
     *             per portlet definition.  In the case where a
     *             portlet is deployed as part of a portlet
     *             application marked as distributable, in the web.xml
     *             deployment descriptor, a portlet container may
     *             instantiate only one portlet object per portlet
     *             definition - in the deployment descriptor - per
     *             virtual machine (VM).
     */
    public void OnePortletObjectPerJVMTest() throws Fault {
        TSPortletInfo[] portletInfos = new TSPortletInfo[2];

        portletInfos[0] = new TSPortletInfo(getDefaultPortletApp(),
                                            "OnePortletObjectPerJVMTestPortlet");

        portletInfos[1] = new TSPortletInfo(getDefaultPortletApp(),
                                            "RefreshPortlet");

        /*****************************************************************
         * FIRST TRIP: To send the first request.
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfos);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);

        /*****************************************************************
         * THIRD TRIP: To send the third request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the second pass.
         */
        portletURL = PortletURLClientTag.extractContent(secondResponse);

        /*
         * Sets the third GET request to be sent out to the server.
         */
        String thirdRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(secondResponse);
    }

    /*
     * @testName: PermanentlyUnavailableTest
     * @assertion_ids: PORTLET:SPEC:24;
     * @test_Strategy: Uses two requests and two portlets.  The first
     *                 request targets the first portlet which throws
     *                 UnavailableException in render() and stores an
     *                 attribute in the portlet context in destroy().
     *                 The second request targets the second portlet
     *                 which looks for this attribute in the portlet
     *                 context.  Test passes if this attribute is
     *                 found.  The URL for second request is obtained
     *                 from URL written in the response by a generic
     *                 common RefreshPortlet.
     * @assertion: If a permanent unavailability is indicated by the
     *             UnavailableException, the portlet container must
     *             remove the portlet from service immediately, call
     *             the portlet's destroy method, and release the
     *             portlet object.
     */
    public void PermanentlyUnavailableTest() throws Fault {
        TSPortletInfo[] portletInfos = new TSPortletInfo[3];

        portletInfos[0] = new TSPortletInfo(getDefaultPortletApp(),
                                            "PermanentlyUnavailableTestPortlet");

        portletInfos[1] = new TSPortletInfo(getDefaultPortletApp(),
                                            "PermanentlyUnavailableTest_1_Portlet");

        portletInfos[2] = new TSPortletInfo(getDefaultPortletApp(),
                                            "RefreshPortlet");

        /*****************************************************************
         * FIRST TRIP: To send the first request.
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfos);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: ProcessActionFinishBeforeRenderTest
     * @assertion_ids: PORTLET:SPEC:15;
     * @test_Strategy: Uses two requests and two portlets.  Makes a
     *                 first request to target the first portlet to
     *                 get an action PortletURL, then makes a second
     *                 request with that PortletURL.  In this second
     *                 request, processAction() of the first portlet
     *                 waits 10 seconds and then stores an attribute
     *                 in the portlet session.  Checks for this
     *                 attribute in render() of both portlets.
     * @assertion: The portal/portlet-container must wait until the
     *             action request finishes.  Then, the
     *             portal/portlet-container must trigger the render
     *             request by invoking the render method for all the
     *             portlets in the portal page with the possible
     *             exception of portlets for which their content is
     *             being cached.
     */
    public void ProcessActionFinishBeforeRenderTest() throws Fault {
        TSPortletInfo[] portletInfos = new TSPortletInfo[2];

        portletInfos[0] = new TSPortletInfo(getDefaultPortletApp(),
                                            "ProcessActionFinishBeforeRenderTestPortlet");

        portletInfos[1] = new TSPortletInfo(getDefaultPortletApp(),
                                            "ProcessActionFinishBeforeRenderTest_1_Portlet");

        /*****************************************************************
         * FIRST TRIP: To send the first request.
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfos);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: RenderInvokedForAllPortletsTest
     * @assertion_ids: PORTLET:SPEC:16;
     * @test_Strategy: Uses two requests and two portlets.  Declares
     *                 in the deployment descriptor that caching is
     *                 disabled for these two portlets.  Makes a first
     *                 request to target the first portlet to get a
     *                 render URL, then makes a second request with
     *                 that URL.  In this second request, both
     *                 portlets print texts to the output stream in
     *                 render().  Searches for both texts in the HTTP
     *                 response.
     * @assertion: If the client request is triggered by a render URL,
     *             the portal/portlet-container must invoke the render
     *             method for all the portlets in the portal page with
     *             the possible exception of portlets for which their
     *             content is being cached.
     */
    public void RenderInvokedForAllPortletsTest() throws Fault {
        TSPortletInfo[] portletInfos = new TSPortletInfo[2];

        portletInfos[0] = new TSPortletInfo(getDefaultPortletApp(),
                                            "RenderInvokedForAllPortletsTestPortlet");

        portletInfos[1] = new TSPortletInfo(getDefaultPortletApp(),
                                            "RenderInvokedForAllPortletsTest_1_Portlet");

        /*****************************************************************
         * FIRST TRIP: To send the first request.
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfos);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        // the text printed by the first portlet
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        // the text printed by the second portlet
        setCriteriaProperty(SEARCH_STRING, CommonConstants.TEST_RESULT);

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }
}
