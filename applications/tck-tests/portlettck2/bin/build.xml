<project name="TS top level" default="usage">
<!-- Do NOT load bin/build.properties.  It's already loaded by TSBuildListener
 Besides properties in bin/build.properties, the following properties are also 
 defined by TSBuildListener:
 ts.home
 class.dir: defined as ${ts.home}/classes
 vehicle.dir: defined as com/sun/ts/tests/common/vehicle
 -->

	<target name="usage">
		<echo message="Usage:tsant [command]"/>
		<echo message="		build"/>
		<echo message="		build.all"/>
		<echo message="		build.all.tests"/>
		<echo message="		build.all.jars"/>
		<echo message="		clean"/>
		<echo message="		clean.all"/>
		<echo message="		deploy"/>
		<echo message="		deploy.all"/>
		<echo message="		gui"/>
		<echo message="		runclient [-Dtest=InitConfigTest [-Dtest.client=URLClient.java]]"/>
		<echo message="		tslib"/>
		<echo message="		usage"/>
		<echo message="		ts.version"/>
		<echo message="		copyExcludeList"/>
		<echo message="		copyOptExcludeList"/>
	</target>

	<!-- This makes it possible to access environmental variables -->
	<property environment="env" />
	
	<property name="portlet" value="com/sun/ts/tests/portlet" />

	<property name="lib.dir" value="com/sun/ts/lib" />
	<property name="lib.jar.name" value="portlettck.jar" />
	<property name="lib.jar" value="${ts.home}/lib/${lib.jar.name}"/>
	
	<property name="excludeOpt" value="${basedir}/ts_opt.jtx"/>
	<property name="exclude" value="${basedir}/ts_re.jtx"/>
	<property name="main" value="${basedir}/ts.jtx"/>
	
	<target name="get.harness.debug" if="env.HARNESS_DEBUG">
		<property name="cts.harness.debug" value="${env.HARNESS_DEBUG}"/>
	</target>

	<target name="default.harness.debug" unless="env.HARNESS_DEBUG">
		<property name="cts.harness.debug" value="false"/>
	</target>

	<target name="init" depends="get.harness.debug, default.harness.debug">
          <!-- create the time stamp -->
          <tstamp/>
          <!-- create the build directory structure used by compile -->
		<translatepath propname="local.classes"/>
		<translatepath propname="ts.classpath"/>
		<translatepath propname="portlet.classes"/>
		<translatepath propname="webapp.dir"/>
		<translatepath propname="j2ee.home.ri"/> 
		<translatepath propname="j2ee.classes.ri"/> 
     
     </target>
     <target name="setup.dirs" depends="init" >
          <mkdir dir="${class.dir}"/>
          <mkdir dir="${dist.dir}"/>
     </target>

	<target name="compile" depends="setup.dirs">
		<javac  srcdir="${ts.home}/src" 
			destdir="${class.dir}" 
               includes="${pkg.dir}/**/*.java"
               excludes="**/deploy/**,**/SigTestTS*"
			debug="on" 
			deprecation="on" >
			<classpath>
        			<pathelement path="${ts.classpath}:${local.classes}" />
      		</classpath>	
		</javac>
	</target>
		
	<target name="build" depends="setup.dirs,check.in.bin,compile">
          <dosubdirs srcdir="${user.dir}" todo="package" excludes="**/deploy/**"/>
     </target>

	<target name="build.all" depends="setup.dirs,build.all.jars,build.all.tests"/>

	<target name="build.all.tests" depends="setup.dirs">
		<property name="include.test.dir" value="portlet"/>
		<property name="common.test.dir" value="common"/>
		<property name="signature.test.dir" value="signaturetest"/>
		<property name="exclude.test.dir" value="portlet/deploy"/>
		<elementappend original="${include.test.dir}" prefix="com/sun/ts/tests" suffix="**/*.java" property="include.java.file"/>
		<elementappend original="${common.test.dir}" prefix="com/sun/ts/tests" suffix="**/*.java" property="common.java.file"/>
		<elementappend original="${signature.test.dir}" prefix="com/sun/ts/tests" suffix="**/*.java" property="signature.java.file"/>
		<elementappend original="${exclude.test.dir}" prefix="com/sun/ts/tests" suffix="**/*.java" property="exclude.java.file"/>
		<echo message="Compiling:${include.java.file}"/>
		<echo message="Excluding:${exclude.java.file}"/>
		<javac fork="true" srcdir="${ts.home}/src"
			destdir="${class.dir}"
			includes="${include.java.file},${common.java.file},${signature.java.file}"
			excludes="${exclude.java.file}"
			memoryInitialSize="100m"
			memoryMaximumSize="200m"
			debug="on"
			deprecation="on" >
			<classpath>
				<pathelement path="${ts.classpath}:${local.classes}" />
			</classpath>
		</javac>
		<dosubdirs srcdir="${ts.home}/src/com/sun/ts/tests" todo="package" includes="${include.test.dir}" excludes="${exclude.test.dir}"/>
    </target>


	<target name="move.work.dir" if="work.dir.present">
		<property name="work.dir.copy" value="${work.dir}copy"/>
		<delete failonerror="false" dir="${work.dir.copy}"/>
		<mkdir dir="${work.dir.copy}"/>
		<move todir="${work.dir.copy}">
			<fileset dir="${work.dir}"/>
		</move>
	</target>
   
	<target name="prepare.work.dir">
		<!-- /tmp works for both platforms -->
		<property name="work.dir" value="${ts.home}/tmp/JTwork"/>
		<delete failonerror="false" dir="${work.dir}"/>
		<available file="${work.dir}" type="dir" property="work.dir.present"/>
		<antcall target="move.work.dir"/>
		<mkdir dir="${work.dir}/jtData"/>
		<echo file="${work.dir}/jtData/harness.trace"></echo>
		<chmod file="${work.dir}/jtData/harness.trace" perm="ugo+rx"/>
	</target>


	<target name="set.env">
		<condition property="ts.env" value="ts_win32">
			<and>
				<os family="windows"/>
			</and>
		</condition>
		<condition property="ts.env" value="ts_unix">
			<and>
				<os family="unix"/>
			</and>
		</condition>
	</target>
 
	<target name="get.client" if="test" unless="test.client">
		<getclient srcdir="${ts.home}/src/${pkg.dir}"/>
	</target>
	<target name="check.selected.test" if="test" depends="get.client">
		<property name="one.test" value="${test.client}#${test}"/>
	</target>
	<target name="no.selected.test" unless="test">
		<property name="one.test" value=""/>
	</target>

   <target name="check.java.options" if="env.JAVA_OPTIONS">
     <property name="java.options" value="${env.JAVA_OPTIONS}"/>
   </target>
   <target name="no.java.options" unless="env.JAVA_OPTIONS">
    <property name="java.options" value=""/>
   </target>

	<target name="runclient" depends="init,check.in.bin,set.env,prepare.work.dir,check.selected.test,no.selected.test,
        check.java.options, no.java.options"> 
      <condition property="tests.string" value="${multiple.tests}">
        <not>
          <or>
            <equals arg1="${multiple.tests}" arg2="$${multiple.tests}"/>
            <equals arg1="${multiple.tests}" arg2=""/>
          </or>
        </not>
      </condition>
      <condition property="tests.string" value="${ts.home}/src/${pkg.dir}/${one.test}">
        <or>
          <equals arg1="${multiple.tests}" arg2="$${multiple.tests}"/>
          <equals arg1="${multiple.tests}" arg2=""/>
        </or>
      </condition>
      <translatepath propname="tests.string" type="initialfile"/>

		<java classname="com.sun.javatest.tool.Main" fork="yes" >
			<classpath>
   				<pathelement path="${ts.classpath}:${local.classes}"/> 
      		</classpath>	
			<sysproperty key="java.compiler" value="NONE"/>
			<sysproperty key="TS_HOME" value="${ts.home}" />
			<sysproperty key="J2EE_HOME_RI" value="${j2ee.home.ri}" />
			<sysproperty key="JAVA_HOME" value="${java.home}"  />		
			<sysproperty key="JAVA_OPTIONS" value="${java.options}" />			
			<sysproperty key="cts.jtroutput" value="true" />
			<sysproperty key="windir" value="${env.windir}" />
			<sysproperty key="SYSTEMROOT" value="${env.SystemRoot}" />
			<sysproperty key="javatest.security.allowPropertiesAccess" value="true" />
			<sysproperty key="java.security.policy" value="${ts.home}/bin/harness.policy" />
			<sysproperty key="webServerHost" value="${webserver.host}"/>
               <sysproperty key="webServerPort" value="${webserver.port}"/>
               <sysproperty key="ServletClientThreads" value="${portlet.client.threads}"/>
               <sysproperty key="harness.log.traceflag" value="${harness.log.traceflag}"/>
               <sysproperty key="LOCAL_CLASSES" value="${local.classes}"/>
			<sysproperty key="TZ" value="${tz}"/>
			<sysproperty key="ORB_HOST" value="${orb.host}"/>
			<sysproperty key="ORB_PORT" value="${orb.port}"/>
			<sysproperty key="cts.harness.debug" value="${cts.harness.debug}"/>
			<sysproperty key="deliverable.class" value="${deliverable.class}"/>
               <sysproperty key="harness.executeMode" value="${harness.executeMode}"/>
			<arg line=" -EsysProps" />
			<arg line=" -batch" />
			<arg line=" -testsuite ${ts.home}/src" />
			<arg line=" -workDir ${work.dir}" />
			<arg line=" -envFiles ${ts.home}/bin/ts.jte" />
			<arg line=" -env ${ts.env}" />
			<arg line=" -excludeList ${ts.home}/bin/ts.jtx" />
          	<arg line=" -tests ${tests.string}"/>
			<jvmarg value="-Xmx150m"/> 

            <!-- TODO: For remote debugging of the URLClients  - not working - -->
			<!-- <jvmarg value="-Xdebug" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=12000,server=n,suspend=y"/> -->

		</java>
	</target>

   <target name="gui" depends="init"> 
		<java classname="com.sun.javatest.tool.Main" fork="yes" dir="${ts.home}/src">
			<classpath>
   				<pathelement path="${ts.classpath}:${local.classes}"/> 
      		</classpath>	
			<sysproperty key="java.compiler" value="NONE"/>
			<sysproperty key="TS_HOME" value="${ts.home}" />
			<sysproperty key="J2EE_HOME_RI" value="${j2ee.home.ri}" />
			<sysproperty key="JAVA_HOME" value="${java.home}"  />		
			<sysproperty key="JAVA_OPTIONS" value="${java.options}" />			
			<sysproperty key="cts.jtroutput" value="true" />
			<sysproperty key="windir" value="${env.windir}" />
			<sysproperty key="SYSTEMROOT" value="${env.SystemRoot}" />
			<sysproperty key="javatest.security.allowPropertiesAccess" value="true" />
			<sysproperty key="java.security.policy" value="${ts.home}/bin/harness.policy" />
               <sysproperty key="webServerHost" value="${webserver.host}"/>
               <sysproperty key="webServerPort" value="${webserver.port}"/>
               <sysproperty key="ServletClientThreads" value="${portlet.client.threads}"/>
               <sysproperty key="harness.log.traceflag" value="${harness.log.traceflag}"/>
               <sysproperty key="LOCAL_CLASSES" value="${local.classes}"/>
			<sysproperty key="TZ" value="${tz}"/>
			<sysproperty key="ORB_HOST" value="${orb.host}"/>
			<sysproperty key="ORB_PORT" value="${orb.port}"/>
			<sysproperty key="cts.harness.debug" value="${cts.harness.debug}"/>
			<sysproperty key="deliverable.class" value="${deliverable.class}"/>
               <sysproperty key="harness.executeMode" value="${harness.executeMode}"/>
			<arg line="-EsysProps" />
			<jvmarg value="-Xms150m"/>
			<jvmarg value="-Xmx150m"/>
		</java>
	</target>

	<target name="clean">
		<delete failonerror="false" dir="${class.dir}/${pkg.dir}" includeEmptyDirs="true"/>
		<delete failonerror="false" dir="${dist.dir}/${pkg.dir}" includeEmptyDirs="true"/>
	</target>

	<target name="clean.all.error.msg" >
		<property name="msg" value="Cleanup of the classes/dist directory is not allowed" />
	</target>

	<target name="clean.all" depends="clean.all.error.msg,check.bin.workspace.file" if="bin.workspace.file.exists">
		<ant antfile="workspace.xml" dir="${ts.home}/bin" target="clean.classes" />
		<ant antfile="workspace.xml" dir="${ts.home}/bin" target="clean.dist" />
	</target>

	<target name="set.in.bin" >
		<condition property="in.bin" >
			<equals arg1="${user.dir}" arg2="${ts.home}/bin"/>
		</condition>
	</target>
	<target name="check.in.bin" depends="set.in.bin" if="in.bin">
		<fail message="This target can not be used in the bin directory, it should only be used under the src directory "/>
	</target>

	<target name="check.webapp.prop" unless="webapp.dir">
		<fail message="webapp.dir property not set in build.properties file"/>
	</target>

	<target name="does.webapp.dir.exist" depends="init,check.webapp.prop">
		<available file="${webapp.dir}" type="dir" property="webapp.dir.exists"/>
	</target>

	<target name="check.webapp.dir" depends="does.webapp.dir.exist" unless="webapp.dir.exists">
		<fail message="webapp directory (${webapp.dir}) set in build.properties file does not exist"/>
	</target>
	<target name="deploy" depends="check.in.bin,check.webapp.dir">
		<dosubdirs srcdir="${user.dir}" todo="deploy"/> 
	</target>
    
	<target name="deploy.app" depends="check.webapp.dir">
          <delete quiet="true" dir="${webapp.dir}/${app.name}_web" includeEmptyDirs="true"/>
          <delete quiet="true" file="${webapp.dir}/${app.name}_web.war" />
          <copy file="${dist.dir}/${pkg.dir}/${app.name}_web.war" todir="${webapp.dir}" />
	</target>
	<target name="deploy.all" depends="check.webapp.dir">
          <delete includeEmptyDirs="true">
			<fileset dir="${webapp.dir}">
				<include name="portlet_*/**"/>
			</fileset>
		</delete>
          <copy todir="${webapp.dir}" >
			<fileset dir="${dist.dir}">
				<include name="**/*.war"/>
			</fileset>
			<mapper type="flatten"/>
		</copy>
    </target>

	<target name="does.version.file.exist" >
		<available file="${ts.home}/bin/version" type="file" property="version.file.exists"/>
	</target>
	<target name="check.version.file" depends="does.version.file.exist" unless="version.file.exists">
		<fail message="version file (${ts.home}/bin/version) does not exist "/>
	</target>
	<target name="ts.version" depends="check.version.file" >
		<property file="${ts.home}/bin/version"/>
		<echo message="${ts.version} build ${ts.build}"/>
	</target>

	<!-- Tasks for managing ts specific jar  -->
	<target name="does.bin.workspace.file.exist" >
		<available file="${ts.home}/bin/workspace.xml" type="file" property="bin.workspace.file.exists"/>
	</target>
	<target name="check.bin.workspace.file" depends="does.bin.workspace.file.exist" unless="bin.workspace.file.exists">
		<echo message="WARNING: The workspace file (${ts.home}/bin/workspace.xml) does not exist - ${msg}"/>
	</target>

	<target name="tslib.error.msg" >
		<property name="msg" value="building of ${ts.home}/lib/portlettck.jar is not allowed" />
	</target>

	<target name="tslib" depends="tslib.error.msg,check.bin.workspace.file" if="bin.workspace.file.exists">
		<ant antfile="workspace.xml" dir="${ts.home}/bin" target="build" />
	</target>

	<target name="build.all.jars" depends="tslib"/>
	
	<target name="copy">
		<echo>Exclude list contains only exluded tests.</echo>
		<delete file="${main}"/>
		<copy file="${exclude}" tofile="${main}"/>
	</target>
 
	<target name="copyOpt">
		<echo>Exclude list contains exluded and optional tests.</echo>
		<delete file="${main}"/>
		<copy file="${excludeOpt}" tofile="${main}"/>
	</target>
	
</project>

