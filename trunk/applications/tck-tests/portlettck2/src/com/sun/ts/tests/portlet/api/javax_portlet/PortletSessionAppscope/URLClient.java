/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletSessionAppscope;

import com.sun.ts.lib.util.*;
import com.sun.ts.lib.porting.*;
import com.sun.ts.lib.harness.*;
import java.util.*;

import com.sun.javatest.Status;

import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {


    /*
    * Constructor called by the Test Harness
    */

    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }


    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletSession_appscope_web";
    }


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     *   @testName:  GetAttributeNamesTest
     *   @assertion_ids: PORTLET:JAVADOC:227;
     *   @test_Strategy: (APP_SCOPE)First request calls first portlet that 
     *                  sets a bunch of attribute. In the second request i,
     *                  the second portlet makes sure that an enumeration of 
     *                  string objects containing the names of all the objects 
     *                  bound to this session. The second request is made 
     *                  using a URL return by a generic RefreshPortlet.
     *   @assertion: Returns an Enumeration of String objects containing the 
     *               names of all the objects bound to this session in the 
     *               given scope. 
     *
     */

    public void GetAttributeNamesTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo[] = new TSPortletInfo[3];

        portletInfo[0] = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNamesTestPortlet");

        portletInfo[1] = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNamesTest_1_Portlet");

        portletInfo[2] = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RefreshPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  
        
		/*
		 * Extracts the PortletURL string from the content of the
		 * HttpResponse of the first pass.
		 */
		String portletURL = PortletURLClientTag.extractContent(firstResponse);

		String secondRequest = getPortalReturnURL(portletURL);

        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  

    }


    /*
     *   @testName:  GetAttributeNamesIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:228;
     *   @test_Strategy: (APP_SCOPE)Negative test for the method. Call this 
     *                  method after invalidating the session. It should throw 
     *                  IllegalStateException.
     *   @assertion: If this method is called on an invalidated session.
     *
     */

    public void GetAttributeNamesIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNamesIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

 
        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));
        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:222;
     *   @test_Strategy: (APP_SCOPE)First request calls first portlet that a 
     *                  attribute.  In the second request, 
     *                  the second portlet checks for that attribute. 
     *                  The second request is made using a URL return 
     *                  by a generic RefreshPortlet.
     *   @assertion: Returns the object bound with the specified name in this 
     *               session, or null if no object is bound under the name in 
     *               the given scope.
     *
     */

    public void GetAttributeTest() throws Fault {



        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo[] = new TSPortletInfo[3];

        portletInfo[0] = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeTestPortlet");

        portletInfo[1] = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeTest_1_Portlet");

        portletInfo[2] = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RefreshPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  
        
		/*
		 * Extracts the PortletURL string from the content of the
		 * HttpResponse of the first pass.
		 */
		String portletURL = PortletURLClientTag.extractContent(firstResponse);

		String secondRequest = getPortalReturnURL(portletURL);

        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);  

    
    }


    /*
     *   @testName:  GetAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:223;
     *   @test_Strategy: (APP_SCOPE)Negative test for the method. Call this 
     *                  method after invalidating the session. It should throw 
     *                  IllegalStateException.
     *   @assertion: If this method is called on an invalidated session
     *
     */

    public void GetAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);


        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  RemoveAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:242;
     *   @test_Strategy: (APP_SCOPE)In the portletSession, set an attribute, 
     *                  remove the attribute and then check to make sure it is 
     *                  gone.
     *   @assertion: Removes the object bound with the specified name and the 
     *               given scope from this session. If the session does not 
     *               have an object bound with the specified name, this method 
     *               does nothing. 
     *
     */

    public void RemoveAttributeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);
        
        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  RemoveAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:243;
     *   @test_Strategy: (APP_SCOPE)A negative test for RemoveAttribute method. 
     *                  invalidate a session and then try to call this method. 
     *                  It should throw an exception.
     *   @assertion: If this method is called on a session which has been 
     *               invalidated
     *
     */

    public void RemoveAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  SetAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:248;
     *   @test_Strategy: (APP_SCOPE)First request calls first portlet that sets a 
     *                  attribute. The second request call the second portlet 
     *                  preserving session by setting the cookie state and 
     *                  makes sure PortletSession.getAttribute() returns the 
     *                  object bound with the specified name in this session.
     *   @assertion: Binds an object to this session in the given scope, using 
     *               the name specified. If an object of the same name in this 
     *               scope is already bound to the session, that object is 
     *               replaced. 
     *
     */

    public void SetAttributeTest() throws Fault {
    
        TSPortletInfo portletInfo[] = new TSPortletInfo[3];

        /*
         * Sets the first GET request to be sent out to the server.
         */

        portletInfo[0] = new TSPortletInfo(getDefaultPortletApp(),
                                        "SetAttributeTestPortlet");

        portletInfo[1] = new TSPortletInfo(getDefaultPortletApp(),
                                        "SetAttributeTest_1_Portlet");

        portletInfo[2] = new TSPortletInfo(getDefaultPortletApp(),
                                        "RefreshPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  
        
		/*
		 * Extracts the PortletURL string from the content of the
		 * HttpResponse of the first pass.
		 */
		String portletURL = PortletURLClientTag.extractContent(firstResponse);

		String secondRequest = getPortalReturnURL(portletURL);

        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke(firstResponse);  
    }

    /*
     *   @testName:  SetAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:249;
     *   @test_Strategy: (APP_SCOPE)Negative test. Invalidate a session and 
     *                  try to set an attribute in it. It should throw 
     *                  IllegalStateException.
     *   @assertion: If this method is called on a session which has been 
     *               invalidated
     *
     */

    public void SetAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetAttributeNullTest
     *   @assertion_ids: PORTLET:JAVADOC:222;
     *   @test_Strategy: (APP_SCOPE)Checks that the method returns null for 
     *                   attribute that is not bound to this session.
     *   @assertion: Returns the object bound with the specified name in this 
     *               session, or null if no object is bound under the name in 
     *               the given scope.
     *
     */

    public void GetAttributeNullTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
