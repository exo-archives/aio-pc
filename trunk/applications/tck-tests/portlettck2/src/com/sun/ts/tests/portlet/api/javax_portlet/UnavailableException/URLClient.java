/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */


package com.sun.ts.tests.portlet.api.javax_portlet.UnavailableException;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }

	/**
	* Return the name of the default portlet app
	*/
	public String getDefaultPortletApp() {
		return "portlet_jp_UnavailableException_web";
	}


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     *   @testName:  UnavailableExceptionCtr1Test
     *   @assertion_ids: PORTLET:JAVADOC:300;
	 *   @test_Strategy: Construct a new instance of UnavailableException class 
     *                  with a string as argument. Test passes if the method 
     *                  getMessage() returns the string used during the 
     *                  construction of this instance.
	 *	 @assertion: Constructs a new exception with a descriptive message 
     *               indicating that the portlet is permanently unavailable. 
     *
     */

    public void UnavailableExceptionCtr1Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "UnavailableExceptionCtr1TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  UnavailableExceptionCtr2Test
     *   @assertion_ids: PORTLET:JAVADOC:301;PORTLET:JAVADOC:298;
	 *   @test_Strategy: Construct a new instance of UnavailableException 
     *                  class with a string and a number as arguments. Test 
     *                  passes if the methods getMessage() and 
     *                  getUnavailableSeconds() returns the string and the 
     *                  integer respectively used during the construction of 
     *                  this instance.
	 *	 @assertion: Constructs a new exception with a descriptive message
     *               indicating that the portlet is temporarily unavailable and
     *               giving an estimate of how long it will be unavailable. In 
     *               some cases, the portlet cannot make an estimate. For 
     *               example, the portlet might know that a server it needs is 
     *               not running, but it might not be able to report how long 
     *               it will take to be restored to functionality. This can be 
     *               indicated with a negative or zero value for the seconds 
     *               argument. 
     *
     */

    public void UnavailableExceptionCtr2Test() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                     getDefaultPortletApp(),
                                     "UnavailableExceptionCtr2TestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  IsPermanentTest
     *   @assertion_ids: PORTLET:JAVADOC:299;
	 *   @test_Strategy: Construct a new instance of UnavailableException 
     *                  class with just a string. Test passes if the method 
     *                  isPermanent() returns true. 
	 *	 @assertion: Returns a boolean indicating whether the portlet is 
     *              permanently unavailable. If so, something is wrong with 
     *              the portlet, and the system administrator must take some 
     *              corrective action.
     *
     */

    public void IsPermanentTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                            getDefaultPortletApp(),
                                            "IsPermanentTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
          ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
