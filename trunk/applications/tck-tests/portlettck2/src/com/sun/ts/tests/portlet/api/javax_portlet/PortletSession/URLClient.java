/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.PortletSession;

import com.sun.javatest.Status;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.util.ResultWriter;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import org.apache.commons.httpclient.HttpState;


/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {


    /*
    * Constructor called by the Test Harness
    */

    public static void main( String[] args ) {
        URLClient theTests = new URLClient();
        Status s = theTests.run( args, System.out, System.err );
        s.exit();
    }


    /**
    * Return the name of the default portlet app
    */

    public String getDefaultPortletApp() {
        return "portlet_jp_PortletSession_web";
    }



    /*
     * @class.setup_props: ts_home;
     */                    

    /* Run test */

    /*
     * @testName: GetAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:221;PORTLET:JAVADOC:224;
     * @test_Strategy: Invokes PortletSession.getAttribute(name) and
     *                 PortletSession.getAttribute(name, scope) with a
     *                 null name and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void GetAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  GetAttributeNamesTest
     *   @assertion_ids: PORTLET:JAVADOC:225;
     *   @test_Strategy: (PORTLET_SCOPE)Makes sure that an Enumeration of 
     *                  String objects containing the names of all the objects 
     *                  bound to this session. 
     *   @assertion: Returns an Enumeration of String objects containing the 
     *               names of all the objects bound to this session in the 
     *               given scope. 
     *
     */

    public void GetAttributeNamesTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                      getDefaultPortletApp(),
                                      "GetAttributeNamesTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetAttributeNamesIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:226;
     *   @test_Strategy:  (PORTLET_SCOPE)Negative test for the method. Call 
     *                  this method after invalidating the session. It should 
     *                  throw IllegalStateException.
     *   @assertion: If this method is called on an invalidated session.
     *
     */

    public void GetAttributeNamesIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                   getDefaultPortletApp(),
                                   "GetAttributeNamesIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

 
        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));
        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:219;PORTLET:SPEC:175;
     *   @test_Strategy: Makes sure PortletSession.getAttribute() returns the 
     *                  object bound with the specified name in this session.
     *   @assertion: Returns the object bound with the specified name in this 
     *              session under the PORTLET_SCOPE, or null if no object is 
     *              bound under the name in that scope. 
     */

    public void GetAttributeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetAttributeNullTest
     *   @assertion_ids: PORTLET:JAVADOC:219;PORTLET:SPEC:119;
     *   @test_Strategy: Checks that the method returns null for attribute 
     *                   that is not bound to this session.
     *   @assertion: Returns the object bound with the specified name in this 
     *              session under the PORTLET_SCOPE, or null if no object is 
     *              bound under the name in that scope. 
     *
     */

    public void GetAttributeNullTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeNullTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:220;PORTLET:SPEC:119;
     *   @test_Strategy:  Negative test for the method. Call this method after 
     *                  invalidating the session. It should throw 
     *                  IllegalStateException.
     *   @assertion: If this method is called on an invalidated session
     *
     */

    public void GetAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);


        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetCreationTimeTest
     *   @assertion_ids: PORTLET:JAVADOC:229;
     *   @test_Strategy: Call the getCreationTime(). If 
     *   the time returned is not 0 and is before the current time, test has 
     *   passed.
     *   @assertion: Returns the time when this session was created, measured 
     *               in milliseconds since midnight January 1, 1970 GMT.
     *
     */

    public void GetCreationTimeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetCreationTimeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }



    /*
     *   @testName:  GetCreationTimeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:230;
     *   @test_Strategy: Call invalidate(), then
     *   call this method to make sure it throws a 
     *   java.lang.IllegalStateException.
     *   @assertion: If this method is called on an invalidated session.
     *
     */

    public void GetCreationTimeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetCreationTimeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));


        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetIdTest
     *   @assertion_ids: PORTLET:JAVADOC:231;
     *   @test_Strategy: Call the PortletSession.GetId() api and if return 
     *   value is not null, pass the test. 
     *   @assertion: Returns a string containing the unique identifier assigned
     *               to this session. 
     *
     */

    public void GetIdTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetIdTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  GetLastAccessedTimeTest
     *   @assertion_ids: PORTLET:JAVADOC:232;
     *   @test_Strategy: Call the PortletSession.getLastAccessedTime() api. 
     *   If the time returned is not 0 and is before the current time, test has 
     *   passed.
     *   @assertion: Returns the last time the client sent a request associated 
     *               with this session, as the number of milliseconds since 
     *               midnight January 1, 1970 GMT. Actions that your portlet 
     *               takes, such as getting or setting a value associated with 
     *               the session, do not affect the access time. 
     *
     */
    public void GetLastAccessedTimeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetLastAccessedTimeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetMaxInactiveIntervalTest
     *   @assertion_ids: PORTLET:JAVADOC:233;
     *   @test_Strategy: Call PortletSession.setMaxInactiveInterval() 
     *   and read it back using PortletSession.getMaxInactiveInterval() method.
     *   @assertion: Returns the maximum time interval, in seconds, for which 
     *               the portlet container keeps this session open between 
     *               client accesses. After this interval, the portlet 
     *               container invalidates the session. The maximum time 
     *               interval can be set with the setMaxInactiveInterval method
     *               A negative time indicates the session should never timeout.
     *
     */

    public void GetMaxInactiveIntervalTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetMaxInactiveIntervalTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }


    /*
     *   @testName:  GetMaxInactiveIntervalTimeoutTest
     *   @assertion_ids: PORTLET:JAVADOC:233;
     *   @test_Strategy: First request sets the inactive time limit. 
     *     Then second request is sent after time out limit has expired. 
     *     PortletRequest.getSession() should  return null.
     *   @assertion: Returns the maximum time interval, in seconds, for which 
     *               the portlet container keeps this session open between 
     *               client accesses. After this interval, the portlet 
     *               container invalidates the session. The maximum time 
     *               interval can be set with the setMaxInactiveInterval method
     *               A negative time indicates the session should never timeout.
     *
     */

    public void GetMaxInactiveIntervalTimeoutTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetMaxInactiveIntervalTimeoutTestPortlet");



        /*******************************************************************
         * FIRST TRIP:: To get a portlet url string with parameters created by
         *              PortletRequest.creatPortletURL()
         ******************************************************************/
         
         /*
          * Sets the GET request to be sent out to the server.
          */

        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);


        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();  

        /*******************************************************************
         * SECOND TRIP:: To send a request using PortletURL returned 
         * in previous request. 
         ******************************************************************/

        /*
         * Extract the PortletURL string with parameters from the content of 
         * HttpResponse of the first pass
         */
         String portletURLStr = PortletURLClientTag.extractContent(
                                        firstResponse);

         /*
          * Sets the second GET request to be sent out to the server.
          */
        String secondRequest = getPortalReturnURL( portletURLStr);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test after waiting
         */

        // Waits 11 seconds which is longer than the 5 seconds 
        // inactive interval limit.
        try {
            Thread.sleep(11 * 1000);
        } catch (InterruptedException e) { e.printStackTrace(); }

        invoke(firstResponse);  
    }


    /*
     *   @testName:  GetPortletContextTest
     *   @assertion_ids: PORTLET:JAVADOC:234;
     *   @test_Strategy: Call PortletSession.getPortlextContext() api, and call
     *   a method on it to make sure it is a valid PortletContext.
     *   @assertion: Returns the portlet application context associated with 
     *               this session
     *
     */

    public void GetPortletContextTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletContextTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));
        /*
         * Invokes the test.
         */
        invoke();  
    }



    /*
     *   @testName:  InvalidateTest
     *   @assertion_ids: PORTLET:JAVADOC:235;
     *   @test_Strategy: Call the invalidate() and then call getAttribute()
     *   and make sure it throws the IllegalStateException.
     *   @assertion: Invalidates this session (all scopes) and unbinds any 
     *               objects bound to it. Invalidating the portlet session will
     *               result in invalidating the underlying HttpSession.
     *
     */

    public void InvalidateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InvalidateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  InvalidateIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:236;
     *   @test_Strategy: A negative test for PortletSession.invalidate() method.
     *                   Call it twice and make sure it throws the 
     *                   IllegalStateException. 
     *   @assertion: If this method is called on a session which has already 
     *               been invalidated.
     *
     */

    public void InvalidateIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "InvalidateIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }



    /*
     *   @testName:  IsNewIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:238;
     *   @test_Strategy: A negative test for PortletSession.IsNew() method. 
     *   Invalidate the session and call this method to make sure it throws a 
     *   java.lang.IllegalStateException.
     *   @assertion: If this method is called on a session which has already 
     *               been invalidated.
     *
     */

    public void IsNewIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "IsNewIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: RemoveAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:241;PORTLET:JAVADOC:244;
     * @test_Strategy: Invokes PortletSession.removeAttribute(name)
     *                 and PortletSession.removeAttribute(name, scope)
     *                 with a null name and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void RemoveAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  RemoveAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:239;PORTLET:SPEC:119;
     *   @test_Strategy:  In the portletSession, set an attribute, remove the 
     *                  attribute and then check to make sure it is gone.
     *   @assertion: Removes the object bound with the specified name under the 
     *              PORTLET_SCOPE from this session. If the session does not 
     *              have an object bound with the specified name, this method 
     *              does nothing.
     */

    public void RemoveAttributeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);
        
        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  RemoveAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:240;PORTLET:SPEC:119;
     *   @test_Strategy:  A negative test for RemoveAttribute method. 
     *                  Invalidate a session and then try to call this method. 
     *                  It should throw an exception.
     *   @assertion: If this method is called on a session which has been 
     *               invalidated
     *
     */

    public void RemoveAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RemoveAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: SetAttributeIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:247;PORTLET:JAVADOC:250;
     * @test_Strategy: Invokes PortletSession.setAttribute(name, value)
     *                 and PortletSession.setAttribute(name, value, scope)
     *                 with a null name and checks if
     *                 IllegalArgumentException is thrown.
     * @assertion: if name is null.
     */
    public void SetAttributeIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     *   @testName:  SetAttributeTest
     *   @assertion_ids: PORTLET:JAVADOC:245;PORTLET:SPEC:119;
     *   @test_Strategy:  Set attributes and then try to get them using 
     *                  getAttribute(). If found, the test is passed, else 
     *                  failed.
     *   @assertion: Binds an object to this session under the PORTLET_SCOPE, 
     *               using the name specified.If an object of the same name in
     *               this scope is already bound to the session, that object is 
     *               replaced. After this method has been executed, and if the 
     *               new object implements HttpSessionBindingListener, the 
     *               container calls HttpSessionBindingListener.valueBound. 
     *               The container then notifies any 
     *               HttpSessionAttributeListeners in the web application. If 
     *               an object was already bound to this session that 
     *               implements HttpSessionBindingListener, its 
     *               HttpSessionBindingListener.valueUnbound method is called. 
     *               If the value is null, this has the same effect as calling 
     *               removeAttribute(). 
     *
     */

    public void SetAttributeTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  SetAttributeIllegalStateTest
     *   @assertion_ids: PORTLET:JAVADOC:246;PORTLET:SPEC:119;
     *   @test_Strategy:  Negative test. Invalidate a session and try to set 
     *                  an attribute in it. It should throw 
     *                  IllegalStateException.
     *   @assertion: If this method is called on a session which has been 
     *               invalidated
     *
     */

    public void SetAttributeIllegalStateTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetAttributeIllegalStateTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
           ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     *   @testName:  SetMaxInactiveIntervalTest
     *   @assertion_ids: PORTLET:JAVADOC:251;
     *   @test_Strategy: This test just makes sure, what is set by 
     *   PortletSession.setMaxInactiveInterval() is returned by 
     *   PortletSession.getMaxInactiveInterval().
     *   @assertion: Specifies the time, in seconds, between client requests, 
     *               before the portlet container invalidates this session. A 
     *               negative time indicates the session should never timeout. 
     */

    public void SetMaxInactiveIntervalTest() throws Fault {

        /*
         * Sets the GET request to be sent out to the server.
         */

        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetMaxInactiveIntervalTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
