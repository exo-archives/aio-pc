/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.exoplatform.services.wsrp1.bind;

import java.rmi.RemoteException;

import org.apache.commons.logging.Log;
import org.exoplatform.services.log.ExoLogger;
import org.exoplatform.services.ws.AbstractSingletonWebService;
import org.exoplatform.services.wsrp1.intf.AccessDenied;
import org.exoplatform.services.wsrp1.intf.InconsistentParameters;
import org.exoplatform.services.wsrp1.intf.InvalidCookie;
import org.exoplatform.services.wsrp1.intf.InvalidHandle;
import org.exoplatform.services.wsrp1.intf.InvalidRegistration;
import org.exoplatform.services.wsrp1.intf.InvalidSession;
import org.exoplatform.services.wsrp1.intf.InvalidUserCategory;
import org.exoplatform.services.wsrp1.intf.MissingParameters;
import org.exoplatform.services.wsrp1.intf.ModifyRegistrationRequired;
import org.exoplatform.services.wsrp1.intf.OperationFailed;
import org.exoplatform.services.wsrp1.intf.OperationNotSupported;
import org.exoplatform.services.wsrp1.intf.PortletStateChangeRequired;
import org.exoplatform.services.wsrp1.intf.ResourceSuspended;
import org.exoplatform.services.wsrp1.intf.UnsupportedLocale;
import org.exoplatform.services.wsrp1.intf.UnsupportedMimeType;
import org.exoplatform.services.wsrp1.intf.UnsupportedMode;
import org.exoplatform.services.wsrp1.intf.UnsupportedWindowState;
import org.exoplatform.services.wsrp1.intf.WSRPV1MarkupPortType;
import org.exoplatform.services.wsrp1.producer.MarkupOperationsInterface;
import org.exoplatform.services.wsrp1.type.BlockingInteractionResponse;
import org.exoplatform.services.wsrp1.type.HandleEventsResponse;
import org.exoplatform.services.wsrp1.type.MarkupResponse;
import org.exoplatform.services.wsrp1.type.ResourceResponse;
import org.exoplatform.services.wsrp1.type.ReturnAny;

/**
 * This class was generated by Apache CXF 2.1.2 Wed Oct 08 15:10:04 GMT+02:00
 * 2008 Generated source version: 2.1.2
 */

@javax.jws.WebService(name = "WSRPV1MarkupPortType", serviceName = "WSRPService", portName = "WSRP_v1_Markup_Service", targetNamespace = "urn:oasis:names:tc:wsrp:v1:wsdl", wsdlLocation = "file:/home/alexey/java/eXoProjects/portlet-container/branches/2.1/component/plugins/wsrp2/wsdl/wsrp-service.wsdl", endpointInterface = "org.exoplatform.services.wsrp1.intf.WSRPV1MarkupPortType")
public class WSRPV1MarkupPortTypeImpl implements WSRPV1MarkupPortType, AbstractSingletonWebService {

  private static final Log          LOG = ExoLogger.getLogger(WSRPV1MarkupPortTypeImpl.class.getName());

  private MarkupOperationsInterface markupOperationsInterface;

  public WSRPV1MarkupPortTypeImpl(MarkupOperationsInterface markupOperationsInterface) {
    this.markupOperationsInterface = markupOperationsInterface;
  }

  /* (non-Javadoc)
   * @see org.exoplatform.services.wsrp1.intf.WSRPV1MarkupPortType#releaseSessions(org.exoplatform.services.wsrp1.type.RegistrationContext  registrationContext ,)java.util.List<java.lang.String>  sessionIDs )*
   */
  public org.exoplatform.services.wsrp1.type.Extension releaseSessions(org.exoplatform.services.wsrp1.type.RegistrationContext registrationContext,
                                                                       java.util.List<java.lang.String> sessionIDs) throws InvalidRegistration,
                                                                                                                   MissingParameters,
                                                                                                                   AccessDenied,
                                                                                                                   OperationFailed {
    LOG.info("Executing operation releaseSessions");
    System.out.println(registrationContext);
    System.out.println(sessionIDs);
    try {
      org.exoplatform.services.wsrp1.type.Extension response = markupOperationsInterface.releaseSessions(registrationContext,
                                                                                                         sessionIDs);
      return response;
    } catch (Exception ex) {
      ex.printStackTrace();
      throw new RuntimeException(ex);
    }
    //throw new InvalidRegistration("InvalidRegistration...");
    //throw new MissingParameters("MissingParameters...");
    //throw new AccessDenied("AccessDenied...");
    //throw new OperationFailed("OperationFailed...");
  }

  /* (non-Javadoc)
   * @see org.exoplatform.services.wsrp1.intf.WSRPV1MarkupPortType#getMarkup(org.exoplatform.services.wsrp1.type.RegistrationContext  registrationContext ,)org.exoplatform.services.wsrp1.type.PortletContext  portletContext ,)org.exoplatform.services.wsrp1.type.RuntimeContext  runtimeContext ,)org.exoplatform.services.wsrp1.type.UserContext  userContext ,)org.exoplatform.services.wsrp1.type.MarkupParams  markupParams ,)org.exoplatform.services.wsrp1.type.MarkupContext  markupContext ,)org.exoplatform.services.wsrp1.type.SessionContext  sessionContext ,)java.util.List<org.exoplatform.services.wsrp1.type.Extension>  extensions )*
   */
  public void getMarkup(org.exoplatform.services.wsrp1.type.RegistrationContext registrationContext,
                        org.exoplatform.services.wsrp1.type.PortletContext portletContext,
                        org.exoplatform.services.wsrp1.type.RuntimeContext runtimeContext,
                        org.exoplatform.services.wsrp1.type.UserContext userContext,
                        org.exoplatform.services.wsrp1.type.MarkupParams markupParams,
                        javax.xml.ws.Holder<org.exoplatform.services.wsrp1.type.MarkupContext> markupContext,
                        javax.xml.ws.Holder<org.exoplatform.services.wsrp1.type.SessionContext> sessionContext,
                        javax.xml.ws.Holder<java.util.List<org.exoplatform.services.wsrp1.type.Extension>> extensions) throws UnsupportedLocale,
                                                                                                                      InvalidRegistration,
                                                                                                                      InvalidUserCategory,
                                                                                                                      UnsupportedMimeType,
                                                                                                                      MissingParameters,
                                                                                                                      InvalidCookie,
                                                                                                                      AccessDenied,
                                                                                                                      InvalidHandle,
                                                                                                                      UnsupportedMode,
                                                                                                                      InvalidSession,
                                                                                                                      UnsupportedWindowState,
                                                                                                                      InconsistentParameters,
                                                                                                                      OperationFailed {
    LOG.info("Executing operation getMarkup");
    System.out.println(registrationContext);
    System.out.println(portletContext);
    System.out.println(runtimeContext);
    System.out.println(userContext);
    System.out.println(markupParams);
    try {
      MarkupResponse response = markupOperationsInterface.getMarkup(registrationContext,
                                                                    portletContext,
                                                                    runtimeContext,
                                                                    userContext,
                                                                    markupParams);
      org.exoplatform.services.wsrp1.type.MarkupContext markupContextValue = response.getMarkupContext();
      markupContext.value = markupContextValue;
      org.exoplatform.services.wsrp1.type.SessionContext sessionContextValue = response.getSessionContext();
      sessionContext.value = sessionContextValue;
      java.util.List<org.exoplatform.services.wsrp1.type.Extension> extensionsValue = response.getExtensions();
      extensions.value = extensionsValue;

    } catch (Exception ex) {
      ex.printStackTrace();
      throw new RuntimeException(ex);
    }
    //throw new UnsupportedLocale("UnsupportedLocale...");
    //throw new InvalidRegistration("InvalidRegistration...");
    //throw new InvalidUserCategory("InvalidUserCategory...");
    //throw new UnsupportedMimeType("UnsupportedMimeType...");
    //throw new MissingParameters("MissingParameters...");
    //throw new InvalidCookie("InvalidCookie...");
    //throw new AccessDenied("AccessDenied...");
    //throw new InvalidHandle("InvalidHandle...");
    //throw new UnsupportedMode("UnsupportedMode...");
    //throw new InvalidSession("InvalidSession...");
    //throw new UnsupportedWindowState("UnsupportedWindowState...");
    //throw new InconsistentParameters("InconsistentParameters...");
    //throw new OperationFailed("OperationFailed...");
  }

  /* (non-Javadoc)
   * @see org.exoplatform.services.wsrp1.intf.WSRPV1MarkupPortType#initCookie(org.exoplatform.services.wsrp1.type.RegistrationContext  registrationContext )*
   */
  public org.exoplatform.services.wsrp1.type.Extension initCookie(org.exoplatform.services.wsrp1.type.RegistrationContext registrationContext) throws InvalidRegistration,
                                                                                                                                              AccessDenied,
                                                                                                                                              OperationFailed {
    LOG.info("Executing operation initCookie");
    System.out.println(registrationContext);
    try {
      org.exoplatform.services.wsrp1.type.Extension response = markupOperationsInterface.initCookie(registrationContext);
      return response;
    } catch (Exception ex) {
      ex.printStackTrace();
      throw new RuntimeException(ex);
    }
    //throw new InvalidRegistration("InvalidRegistration...");
    //throw new AccessDenied("AccessDenied...");
    //throw new OperationFailed("OperationFailed...");
  }

  /* (non-Javadoc)
   * @see org.exoplatform.services.wsrp1.intf.WSRPV1MarkupPortType#performBlockingInteraction(org.exoplatform.services.wsrp1.type.BlockingInteractionRequest  performBlockingInteraction )*
   */
  public org.exoplatform.services.wsrp1.type.BlockingInteractionResponse performBlockingInteraction(org.exoplatform.services.wsrp1.type.BlockingInteractionRequest performBlockingInteraction) throws UnsupportedLocale,
                                                                                                                                                                                              InvalidRegistration,
                                                                                                                                                                                              InvalidUserCategory,
                                                                                                                                                                                              UnsupportedMimeType,
                                                                                                                                                                                              MissingParameters,
                                                                                                                                                                                              InvalidCookie,
                                                                                                                                                                                              AccessDenied,
                                                                                                                                                                                              InvalidHandle,
                                                                                                                                                                                              UnsupportedMode,
                                                                                                                                                                                              PortletStateChangeRequired,
                                                                                                                                                                                              InvalidSession,
                                                                                                                                                                                              UnsupportedWindowState,
                                                                                                                                                                                              InconsistentParameters,
                                                                                                                                                                                              OperationFailed {
    LOG.info("Executing operation performBlockingInteraction");
    System.out.println(performBlockingInteraction);
    try {
      org.exoplatform.services.wsrp1.type.BlockingInteractionResponse response = markupOperationsInterface.performBlockingInteraction(performBlockingInteraction.getRegistrationContext(),
                                                                                                                                      performBlockingInteraction.getPortletContext(),
                                                                                                                                      performBlockingInteraction.getRuntimeContext(),
                                                                                                                                      performBlockingInteraction.getUserContext(),
                                                                                                                                      performBlockingInteraction.getMarkupParams(),
                                                                                                                                      performBlockingInteraction.getInteractionParams());
      return response;
    } catch (Exception ex) {
      ex.printStackTrace();
      throw new RuntimeException(ex);
    }
    //throw new UnsupportedLocale("UnsupportedLocale...");
    //throw new InvalidRegistration("InvalidRegistration...");
    //throw new InvalidUserCategory("InvalidUserCategory...");
    //throw new UnsupportedMimeType("UnsupportedMimeType...");
    //throw new MissingParameters("MissingParameters...");
    //throw new InvalidCookie("InvalidCookie...");
    //throw new AccessDenied("AccessDenied...");
    //throw new InvalidHandle("InvalidHandle...");
    //throw new UnsupportedMode("UnsupportedMode...");
    //throw new PortletStateChangeRequired("PortletStateChangeRequired...");
    //throw new InvalidSession("InvalidSession...");
    //throw new UnsupportedWindowState("UnsupportedWindowState...");
    //throw new InconsistentParameters("InconsistentParameters...");
    //throw new OperationFailed("OperationFailed...");
  }

}
