/*
 * Copyright (C) 2003-2007 eXo Platform SAS.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see<http://www.gnu.org/licenses/>.
 */
package org.exoplatform.services.portletcontainer.pci;

import java.util.Collection;

import javax.portlet.PortletMode;

/**
 * Created by The eXo Platform SAS Author : Mestrallet Benjamin .
 * benjmestrallet@users.sourceforge.net Date: Jul 30, 2003 Time: 9:08:33 PM
 */
public class RenderOutput extends Output {

  /**
   * Title.
   */
  private String title;

  /**
   * Content generated by portlet.
   */
  private byte[] content;

  /**
   * Cache hit.
   */
  private boolean cacheHit = true;

  /**
   * Next possible portlet modes.
   */
  private Collection<PortletMode> portletModes;

  /**
   * Content type.
   */
  private String contentType;

  /**
   * @return title
   */
  public final String getTitle() {
    return title;
  }

  /**
   * @param title title
   */
  public final void setTitle(final String title) {
    this.title = title;
  }

  /**
   * @return content generated by portlet
   */
  public final byte[] getBinContent() {
    return content;
  }

  /**
   * @return content generated by portlet
   */
  public final char[] getContent() {
    if (content == null)
      return null;
    try {
      return new String(content, "utf-8").toCharArray();
    } catch (java.io.UnsupportedEncodingException e) {
      return new String(content).toCharArray();
    }
  }

  /**
   * @param content content generated by portlet
   */
  public final void setContent(final byte[] content) {
    this.content = content;
  }

  /**
   * @return cache hit
   */
  public final boolean isCacheHit() {
    return cacheHit;
  }

  /**
   * @param cacheHit cache hit
   */
  public final void setCacheHit(final boolean cacheHit) {
    this.cacheHit = cacheHit;
  }

  /**
   * @return next possible portlet modes
   */
  public final Collection<PortletMode> getNextPossiblePortletModes() {
    return portletModes;
  }

  /**
   * @param portletModes1 next possible portlet modes
   */
  public final void setNextPossiblePortletModes(final Collection<PortletMode> portletModes1) {
    this.portletModes = portletModes1;
  }

  /**
   * @return content type
   */
  public final String getContentType() {
    return contentType;
  }

  /**
   * @param contentType content type
   */
  public final void setContentType(final String contentType) {
    this.contentType = contentType;
  }

}
