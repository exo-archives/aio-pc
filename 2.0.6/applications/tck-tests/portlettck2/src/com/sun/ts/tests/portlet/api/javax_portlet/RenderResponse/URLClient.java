/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.sun.ts.tests.portlet.api.javax_portlet.RenderResponse;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.BasePortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test. 
 */
public class URLClient extends BasePortletUrlClient {
    public static void main(String[] args) {
        URLClient theTests = new URLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
    * Returns the name of the default portlet app.
    */
    public String getDefaultPortletApp() {
        return "portlet_jp_RenderResponse_web";
    }


    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: CreateActionURLTest
     * @assertion_ids: PORTLET:JAVADOC:273;
     * @test_Strategy: Makes a first request to the portlet to get an
     *                 action URL using createActionURL(), then makes
     *                 a second request with that URL.  In this second
     *                 request, processAction() sets an attribute.
     *                 Checks for this attribute in render().
     * @assertion: Creates a portlet URL targeting the portlet. If no
     *             portlet mode, window state or security modifier is
     *             set in the PortletURL the current values are
     *             preserved.  If a request is triggered by the
     *             PortletURL, it results in an action request.
     */
    public void CreateActionURLTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "CreateActionURLTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createActionURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: CreateRenderURLTest
     * @assertion_ids: PORTLET:JAVADOC:274;
     * @test_Strategy: Makes a first request to the portlet to get a
     *                 render URL with an added parameter using
     *                 createRenderURL(), then makes a second request
     *                 with that URL.  In this second request, checks
     *                 for this parameter in render().
     * @assertion: Creates a portlet URL targeting the portlet.  If no
     *             portlet mode, window state or security modifier is
     *             set in the PortletURL the current values are
     *             preserved.  If a request is triggered by the
     *             PortletURL, it results in a render request.  The
     *             returned URL can be further extended by adding
     *             portlet-specific parameters and portlet modes and
     *             window states.
     */
    public void CreateRenderURLTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "CreateRenderURLTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a PortletURL string created by
         *             RenderResponse.createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */
        String portletURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(portletURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(firstResponse);
    }

    /*
     * @testName: EncodeURLIllegalArgumentExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:213;
     * @test_Strategy: Invokes RenderResponse.encodeURL() with the
     *                 string "EncodeURLIllegalArgumentExceptionTest"
     *                 which doesn't have a leadiing slash and is not
     *                 an absolute URL.  Checks that
     *                 IllegalArgumentException is thrown.
     * @assertion: if path doesn't have a leading slash or is not an
     *             absolute URL.
     */
    public void EncodeURLIllegalArgumentExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "EncodeURLIllegalArgumentExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: EncodeURLTest
     * @assertion_ids: PORTLET:JAVADOC:212;
     * @test_Strategy: Creates a full path URL string using
     *                 RenderRequest.getContextPath(), then invokes
     *                 RenderResponse.encodeURL() with this string.
     *                 Checks that the URL returned is not null.
     * @assertion: Returns the encoded URL of the resource, like
     *             servlets, JSPs, images and other static files, at
     *             the given path.
     */
    public void EncodeURLTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "EncodeURLTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: FlushBufferTest
     * @assertion_ids: PORTLET:JAVADOC:275;
     * @test_Strategy: Writes some content to the buffer, then invokes
     *                 RenderResponse.flushBuffer().  Checks that the
     *                 response has been committed.
     * @assertion: Forces any content in the buffer to be written to
     *             the client.  A call to this method automatically
     *             commits the response.
     */
    public void FlushBufferTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "FlushBufferTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetBufferSizeTest
     * @assertion_ids: PORTLET:JAVADOC:277;PORTLET:SPEC:80;
     * @test_Strategy: Checks that the value returned by
     *                 RenderResponse.getBufferSize() is non-negative.
     * @assertion: Returns the actual buffer size used for the
     *             response.  If no buffering is used, this method
     *             returns 0.
     */
    public void GetBufferSizeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetBufferSizeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetCharacterEncodingTest
     * @assertion_ids: PORTLET:JAVADOC:278;
     * @test_Strategy: Checks that the result returned by
     *                 RenderResponse.getCharacterEncoding() is not null.
     * @assertion: Returns the name of the charset used for the MIME
     *             body sent in this response.
     */
    public void GetCharacterEncodingTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetCharacterEncodingTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetContentTypeTest
     * @assertion_ids: PORTLET:JAVADOC:279;PORTLET:SPEC:78;
     * @test_Strategy: Sets the content type to text/html and checks
     *                 if the result returned by getContentType() is
     *                 text/html.
     * @assertion: Returns the MIME type that can be used to
     *             contribute markup to the render response.  If no
     *             content type was set previously using the
     *             setContentType(java.lang.String) method, this
     *             method returns null.
     */
    public void GetContentTypeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetContentTypeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetLocaleTest
     * @assertion_ids: PORTLET:JAVADOC:280;
     * @test_Strategy: Checks that getLocale() doesn't return null.
     * @assertion: Returns the locale assigned to the response.
     */
    public void GetLocaleTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetLocaleTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetNamespaceTest
     * @assertion_ids: PORTLET:JAVADOC:281;PORTLET:SPEC:87;
     * @test_Strategy: Checks that the value returned by
     *                 RenderResponse.getNamespace() is not null and
     *                 it is the same when the method is called
     *                 multiple times.
     * @assertion: The value returned by this method should be
     *             prefixed or appended to elements, such as
     *             JavaScript variables or function names, to ensure
     *             they are unique in the context of the portal page.
     */
    public void GetNamespaceTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetNamespaceTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetPortletOutputStreamAfterGetWriterTest
     * @assertion_ids: PORTLET:JAVADOC:284;PORTLET:SPEC:79;
     * @test_Strategy: Invokes RenderResponse.getWriter() followed by
     *                 RenderResponse.getPortletOutputStream().
     *                 Checks if IllegalStateException is thrown.
     * @assertion: if the getWriter method has been called on this response.
     */
    public void GetPortletOutputStreamAfterGetWriterTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletOutputStreamAfterGetWriterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetPortletOutputStreamTest
     * @assertion_ids: PORTLET:JAVADOC:282;
     * @test_Strategy: Prints text to the OutputStream returned by
     *                 getPortletOutputStream().
     * @assertion: Returns a OutputStream suitable for writing binary
     *             data in the response.
     */
    public void GetPortletOutputStreamTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetPortletOutputStreamTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetWriterAfterGetPortletOutputStreamTest
     * @assertion_ids: PORTLET:JAVADOC:287;PORTLET:SPEC:79;
     * @test_Strategy: Invokes RenderResponse.getPortletOutputStream()
     *                 followed by RenderResponse.getWriter().  Checks
     *                 if IllegalStateException is thrown.
     * @assertion: if the getPortletOutputStream method has been
     *             called on this response.
     */
    public void GetWriterAfterGetPortletOutputStreamTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetWriterAfterGetPortletOutputStreamTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: GetWriterTest
     * @assertion_ids: PORTLET:JAVADOC:285;
     * @test_Strategy: Prints text to the PrintWriter returned by getWriter().
     * @assertion: Returns a PrintWriter object that can send
     *             character text to the portal.
     */
    public void GetWriterTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "GetWriterTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: IsCommittedTest
     * @assertion_ids: PORTLET:JAVADOC:288;
     * @test_Strategy: Checks that RenderResponse.isCommitted()
     *                 returns false before writing anything to the
     *                 buffer.  Checks that it returns true after
     *                 writing some content to the buffer and flushing 
     *                 the buffer.
     * @assertion: Returns a boolean indicating if the response has
     *             been committed.
     */
    public void IsCommittedTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "IsCommittedTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: ResetBufferIllegalStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:292;PORTLET:SPEC:83;PORTLET:SPEC:84;
     * @test_Strategy: Writes some content to the buffer and commits
     *                 the response.  Invokes RenderResponse.resetBuffer()
     *                 and checks if IllegalStateException is thrown.
     * @assertion: if this method is called after response is comitted.
     */
    public void ResetBufferIllegalStateExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResetBufferIllegalStateExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: ResetBufferTest
     * @assertion_ids: PORTLET:JAVADOC:291;
     * @test_Strategy: Writes a failed result to the buffer and then
     *                 invokes RenderResponse.resetBuffer().  The
     *                 failed result should be cleared and should not
     *                 appear in the HTTP response.  The assertion of
     *                 not clearing the properties set is not testable.
     * @assertion: Clears the content of the underlying buffer in the
     *             response without clearing properties set.
     */
    public void ResetBufferTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResetBufferTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: ResetIllegalStateExceptionTest
     * @assertion_ids: PORTLET:JAVADOC:290;PORTLET:SPEC:83;PORTLET:SPEC:84;
     * @test_Strategy: Writes some content to the buffer and commits
     *                 the response.  Invokes RenderResponse.reset()
     *                 and checks if IllegalStateException is thrown.
     * @assertion: if the response has already been committed.
     */
    public void ResetIllegalStateExceptionTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResetIllegalStateExceptionTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }

    /*
     * @testName: ResetTest
     * @assertion_ids: PORTLET:JAVADOC:289;
     * @test_Strategy: Writes a failed result to the buffer and then
     *                 invokes RenderResponse.reset().  The failed
     *                 result should be cleared and should not appear
     *                 in the HTTP response.  The assertion of
     *                 clearing the properties set is not testable.
     * @assertion: Clears any data that exists in the buffer as well
     *             as the properties set.
     */
    public void ResetTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResetTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: SetBufferSizeTest
     * @assertion_ids: PORTLET:JAVADOC:293;PORTLET:SPEC:81;
     * @test_Strategy: Invokes RenderResponse.setBufferSize() to set a
     *                 preferred buffer size, then invokes
     *                 RenderResponse.getBufferSize() to check that
     *                 the new buffer is at least as large as the size
     *                 requested.
     * @assertion: Sets the preferred buffer size for the body of the
     *             response.  The portlet container will use a buffer
     *             at least as large as the size requested.
     */
    public void SetBufferSizeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetBufferSizeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: SetContentTypeTest
     * @assertion_ids: PORTLET:JAVADOC:295;
     * @test_Strategy: Sets the content type to text/html and checks
     *                 the Content-Type header.
     * @assertion: Sets the MIME type for the render response.
     */
    public void SetContentTypeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetContentTypeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(EXPECTED_HEADERS, "Content-Type: text/html");

        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }

    /*
     * @testName: SetInvalidContentTypeTest
     * @assertion_ids: PORTLET:JAVADOC:296;PORTLET:SPEC:76;
     * @test_Strategy: Sets an invalid content type and catches the exception.
     * @assertion: if the given type is not in the list returned by
     *             PortletRequest.getResponseContentTypes.
     */
    public void SetInvalidContentTypeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "SetInvalidContentTypeTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();  
    }
}
