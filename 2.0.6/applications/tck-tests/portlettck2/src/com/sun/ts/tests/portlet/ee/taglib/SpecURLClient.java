/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

/*
 * Copyright 2007 IBM Corporation
 */


package com.sun.ts.tests.portlet.ee.taglib;

import com.sun.javatest.Status;
import com.sun.ts.tests.common.webclient.http.HttpResponse;
import com.sun.ts.tests.portlet.common.client.ExtendedPortletUrlClient;
import com.sun.ts.tests.portlet.common.client.TSPortletInfo;
import com.sun.ts.tests.portlet.common.client.tags.PortletTCKCustomClientTag;
import com.sun.ts.tests.portlet.common.client.tags.PortletURLClientTag;
import com.sun.ts.tests.portlet.common.util.ResultWriter;

/**
 * URLClient and SpecURLClient are used as HTTP test clients to test
 * the Portlet API and specification assertions.  Each assertion test
 * is performed by executing a method in the *URLClient class that has
 * the @testName, @assertion_ids, @test_Strategy, and @assertion tags
 * in its javadoc comments.
 * <p>
 * In each test, at least one HTTP request is made to retrieve the
 * portal page that interacts with portlets that participate in the
 * corresponding test.  These test portlets/servlets, bundled in WAR
 * files, are assumed to be already deployed on the portal server
 * before the test is run.  The initial URL of the portal page is
 * obtained, using either declarative or programmatic configuration,
 * by the base class method <code>getPortalURL</code>, and is set for
 * the test using the <code>setRequestProperty</code> method.  See the
 * Technology Compatibility Kit Requirements chapter of the Portlet
 * Specification for details.  Subsequent requests for the test are
 * done using URLs, generated by PortletURL, that are part of the
 * returned portal pages.
 * <p>
 * The test sets the test success criteria using the
 * <code>setCriteriaProperty</code> method to look for either expected
 * or unexpected substrings in the portal page returned to decide
 * whether a test has passed or failed.
 * <p>
 * Finally, the <code>invoke()</code> method makes the HTTP request
 * and validates the output for the configured success criteria.  In
 * case of failure, this method throws a <code>Fault</code> exception
 * that is caught by the framework to report a failure for the test.
 * 
 *  @author Fred Thiele <ferdy@informatik.uni-jena.de> (since JSR 268)
 *  @author Oliver Spindler <olisp_suhl@yahoo.com> (since JSR 268)
 */
public class SpecURLClient extends ExtendedPortletUrlClient {

	static final long serialVersionUID = 286L;
	
    public static void main(String[] args) {
        SpecURLClient theTests = new SpecURLClient();
        Status status = theTests.run(args, System.out, System.err);
        status.exit();
    }

    /**
     * Returns the name of the default portlet app.
     */
    public String getDefaultPortletApp() {
        return "portlet_jp_taglib_web";
    }
    
    /*
     * @class.setup_props: ts_home;
     */                    

    /*
     * @testName: ActionURLCopyCurrentRenderParametersAppendTest
     * @assertion_ids:  PORTLET:SPEC:325;PORTLET:SPEC:349
     * @test_Strategy: Makes a first request to the portlet that
     *				   creates a renderURL with parameters added.
     *				   In the second request, the portlet uses a PortletRequestDispatcher
     *				   to include a JSP that has an actionURL tag with the
     *                 copyCurrentRenderParameters attribute set to true and 
     *                 with a parameter added (one with empty value) using the param tag.
     *                 In the third request, the processAction() method checks the
     *                 parameter map and sets the result as render parameter. 
     *                 Prints this result in render(). 
     * @assertion: copyCurrentRenderParameters (Type: boolean, non-required) – 
     *             if set to true requests that the private render parameters 
     *             of the portlet of the current request must be attached to this URL.
     *             If additional <portlet:param> tags are specified parameters with 
     *             the same name as an existing render parameter will get merged and 
     *             the value defined in the <portlet:param> tag must be prepended. 
     *             
     *             If the param tag has an empty value the specified parameter name 
     *             must be removed from the URL.
     */
    public void ActionURLCopyCurrentRenderParametersAppendTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLCopyCurrentRenderParametersAppendTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get the RenderURL string created by
         *             createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();
                
        /*
         * Extracts the PortletURL for the render() method from the
         * content of the HttpResponse of the first pass.
         */
        String renderUrl = PortletURLClientTag.extractContent(firstResponse);
        
        /*****************************************************************
         * SECOND TRIP: To get the ActionURL string created by
         *             the actionURL tag.
         *****************************************************************/
        
        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(renderUrl);
        setRequestProperty(REQUEST, secondRequest);
        
        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getPassedString(getTestName()));
        
        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);
        
        /*****************************************************************
         * THIRD TRIP: To send the third request to the processAction() method.
         *****************************************************************/
        
        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the second pass.
         */
         String actionUrl = PortletURLClientTag.extractContent(secondResponse);
                  
         /*
          * Sets the third GET request to be sent out to the server.
          */
        String thirdRequest = getPortalReturnURL(actionUrl);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(secondResponse);    	
    }
    
    
    /*
     * @testName: ActionURLCopyCurrentRenderParametersTest
     * @assertion_ids: PORTLET:SPEC:324
     * @test_Strategy: Makes a first request to the portlet that
     *				   creates a renderURL with parameters added.
     *				   In the second request, the portlet uses a PortletRequestDispatcher
     *				   to include a JSP that has an actionURL tag with the
     *                 copyCurrentRenderParameters attribute set to true.
     *                 In the third request, the processAction() method checks the
     *                 parameter map and sets the result as render parameter. 
     *                 Prints this result in render(). 
     * @assertion: copyCurrentRenderParameters (Type: boolean, non-required) – 
     *             if set to true requests that the private render parameters 
     *             of the portlet of the current request must be attached to this URL.
     */
    public void ActionURLCopyCurrentRenderParametersTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLCopyCurrentRenderParametersTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get the RenderURL string created by
         *             createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();
                
        /*
         * Extracts the PortletURL for the render() method from the
         * content of the HttpResponse of the first pass.
         */
        String renderUrl = PortletURLClientTag.extractContent(firstResponse);
        
        /*****************************************************************
         * SECOND TRIP: To get the ActionURL string created by
         *             the actionURL tag.
         *****************************************************************/
        
        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(renderUrl);
        setRequestProperty(REQUEST, secondRequest);
        
        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getPassedString(getTestName()));
        
        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);
        
        /*****************************************************************
         * THIRD TRIP: To a request to the processAction() method.
         *****************************************************************/
        
        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the second pass.
         */
         String actionUrl = PortletURLClientTag.extractContent(secondResponse);
                  
         /*
          * Sets the third GET request to be sent out to the server.
          */
        String thirdRequest = getPortalReturnURL(actionUrl);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(secondResponse);
    }
    
   
    /*
     * @testName: ActionURLEscapeXmlTest
     * @assertion_ids: PORTLET:SPEC:326
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has an actionURL using the actionURL tag
     *                 with the escapeXml attribute set to true. The JSP 
     *                 checks the actionURL for correct xml escaping.  In
     *                 the second request, processAction() checks the parameter map
     *                 and sets the result as render parameter.
     *                 Prints this result in render(). 
     * @assertion: escapeXml (Type: boolean, non-required) – deterrmines whether
     * 			   characters <,>,&,’,” in the resulting output should be converted to their
     * 			   corresponding character entity codes (‘<’ gets converted to ‘&lt;’, ‘>’ gets
     * 			   converted to ‘&gt;’ ‘&’ gets converted to ‘&amp;’, ‘‘’ gets converted to
     * 			   ‘&#039;’, ‘”’ gets converted to ‘&#034;’).
     */
    public void ActionURLEscapeXmlTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLEscapeXmlTestPortlet");
        
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
    	        ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();
    }
    
    
    /*
     * @testName: ActionURLIllegalPortletModeTest
     * @assertion_ids: PORTLET:SPEC:319
     * @test_Strategy: Uses a PortletRequestDispatcher to include a
     *                 JSP that has an actionURL tag with an illegal
     *                 portlet mode specified.  Checks that
     *                 JspException is thrown.
     * @assertion: If the specified portlet mode is illegal for the
     *             current request, a JspException must be thrown.
     */
    public void ActionURLIllegalPortletModeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLIllegalPortletModeTestPortlet");

        runStdTestForRender(portletInfo);
    }
    

    /*
     * @testName: ActionURLIllegalWindowStateTest
     * @assertion_ids: PORTLET:SPEC:316
     * @test_Strategy: Uses a PortletRequestDispatcher to include a
     *                 JSP that has an actionURL tag with an illegal
     *                 window state specified.  Checks that
     *                 JspException is thrown.
     * @assertion: If the specified window state is illegal for the
     *             current request, a JspException must be thrown.
     */
    public void ActionURLIllegalWindowStateTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLIllegalWindowStateTestPortlet");

        runStdTestForRender(portletInfo);
    }
    

    /*
     * @testName: ActionURLPortletModeNotSetTest
     * @assertion_ids: PORTLET:SPEC:320
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has an actionURL tag without the
     *                 portletMode attribute.  In the second request,
     *                 checks that the portlet mode stays as VIEW
     *                 (i.e. doView() is invoked).
     * @assertion: If a portlet mode is not set for a URL, it must
     *             stay the same as the mode of the current request.
     */
    public void ActionURLPortletModeNotSetTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLPortletModeNotSetTestPortlet");

       runStdTestForProcessAction(portletInfo);
    }

    
    /*
     * @testName: ActionURLPortletModeTest
     * @assertion_ids: PORTLET:SPEC:318
     * @test_Strategy: Declares in the deployment descriptor that the
     *                 portlet supports the EDIT mode.  Makes a first
     *                 request to the portlet that uses a
     *                 PortletRequestDispatcher to include a JSP that
     *                 has an actionURL tag with portletMode set to
     *                 EDIT.  In the second request, checks that
     *                 doEdit() is invoked.
     * @assertion: portletMode (Type: String, non-required) -
     *             indicates the portlet mode that the portlet must
     *             have when this link is executed, if no error
     *             condition ocurred.
     */
    public void ActionURLPortletModeTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLPortletModeTestPortlet");

        runStdTestForProcessAction(portletInfo);
    }

    
    /*
     * @testName: ActionURLTest
     * @assertion_ids:  PORTLET:SPEC:315;PORTLET:SPEC:347;PORTLET:SPEC:350;
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has an actionURL tag with parameters with equal names 
     *                 added using the param tag.  In
     *                 the second request, processAction() sets this
     *                 parameter in the session.  Checks for this
     *                 parameter in render().
     * @assertion: The portlet actionURL tag creates a URL that must
     *             point to the current portlet and must trigger an
     *             action request with the supplied parameters.
     *             
     *             The param tag defines a parameter that may be added 
     *             to an actionURL. 
     *             
     *             If the same name of a parameter occurs 
     *             more than once within an actionURL the values must be 
     *             delivered as parameter value array with the values in the 
     *             order of the declaration within the URL tag. 
     */
    public void ActionURLTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLTestPortlet");

        runStdTestForProcessAction(portletInfo);
    }

    
    /*
     * @testName: ActionURLVarInLoopTest
     * @assertion_ids: PORTLET:SPEC:322
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, add a parameter using the param
     *                 tag to an actionURL tag with the var attribute.
     *                 Does this twice using a loop, with different
     *                 parameter value in each pass.  Then the value
     *                 of the variable is printed out to the
     *                 JspWriter.  In the second request,
     *                 processAction() sets this parameter in the
     *                 session.  Checks for this parameter in render().
     * @assertion: If the given variable name is used within an
     *             iteration loop, the new value overwrites the old one.
     */
    public void ActionURLVarInLoopTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLVarInLoopTestPortlet");

        runStdTestForProcessAction(portletInfo);
    }

    
    /*
     * @testName: ActionURLVarOverwriteTest
     * @assertion_ids: PORTLET:SPEC:322
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, add a parameter using the param
     *                 tag to an actionURL tag with the var attribute,
     *                 then the value of the variable obtained using
     *                 another actionURL tag (with the same parameter
     *                 added but using different value) with the same
     *                 var attribute is printed out to the JspWriter.
     *                 In the second request, processAction() sets
     *                 this parameter in the session.  Checks for this
     *                 parameter in render().
     * @assertion: If the given variable name already exists in the
     *             scope of the page, the new value overwrites the old one.
     */
    public void ActionURLVarOverwriteTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLVarOverwriteTestPortlet");

        runStdTestForProcessAction(portletInfo);
    }

    
    /*
     * @testName: ActionURLVarTest
     * @assertion_ids: PORTLET:SPEC:321
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, the value of a variable obtained
     *                 using the actionURL tag (with a parameter added
     *                 using the param tag) with the var attribute is
     *                 printed out to the JspWriter.  In the second
     *                 request, processAction() sets this parameter in
     *                 the session.  Checks for this parameter in render().
     * @assertion: var (Type: String, non-required) - name of the
     *             exported scoped variable for the action URL.  The
     *             exported scoped variable must be a String.  By
     *             default, the result of the URL processing is
     *             written to the current JspWriter.  If the result is
     *             exported as a JSP scoped variable, defined via the
     *             var attributes, nothing is written to the current JspWriter.
     */
    public void ActionURLVarTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ActionURLVarTestPortlet");

        runStdTestForProcessAction(portletInfo);
    }

    
    /*
     * @testName: DefineObjectsProcessActionTest
     * @assertion_ids: PORTLET:SPEC:313
     * @test_Strategy: Makes a request to the portlet to get the action PortletURL.
     *                 In the second request the portlet  uses
     *                 a PortletRequestDispatcher to include a JSP, 
     *                 which checks the variables.
     * @assertion: The defineObjects tag must define the following variables in the JSP
     *             page:
     *             - ActionRequest actionRequest when included from within the
     *               processAction method 
     *             - ActionResponse actionResponse when included from within
     *               the processAction method
     *             - PortletConfig portletConfig
     *             - PortletSession portletSession, providing access to the portletSession, 
     *               does not create a new session, only returns an existing session.
     *             - Map<String, Object> portletSessionScope, providing access to the
     *               portletSession attributes as a Map equivalent to the
     *               PortletSession.getAttributeMap() call, does not create a new session, 
     *               only returns an existing session. If no session attributes exist this 
     *               method returns an empty Map.
     *             - PortletPreferences portletPreferences, providing access to the portlet
     *               preferences.
     *             - Map<String, String[]> portletPreferencesValues, providing access to the
     *               portlet preferences as a Map, equivalent to the PortletPreferences.getMap()
     *               call.
     *             These variables must reference the same Portlet API objects stored in the
     *             request object of the JSP as defined in the PLT.19.3.2 Included
     *             Request Attributes Section.
     */
    public void DefineObjectsProcessActionTest() throws Fault {
    	
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "DefineObjectsProcessActionTestPortlet");
        
		runStdTestForProcessAction(portletInfo);
    }
    
    
    /*
     * @testName: DefineObjectsProcessEventTest
     * @assertion_ids: PORTLET:SPEC:313
     * @test_Strategy: Makes a request to the portlet to get the action PortletURL.
     *                 In the second request processAction() sets an event.
     *                 ProcessEvent() uses a PortletRequestDispatcher to include a JSP, 
     *                 which checks the variables.
     * @assertion: The defineObjects tag must define the following variables in the JSP
     *             page:
     *             - EventRequest eventRequest when included from within the
     *               processEvent method 
     *             - EventResponse eventResponse when included from within
     *               the processEvent method
     *             - PortletConfig portletConfig
     *             - PortletSession portletSession, providing access to the portletSession, 
     *               does not create a new session, only returns an existing session.
     *             - Map<String, Object> portletSessionScope, providing access to the
     *               portletSession attributes as a Map equivalent to the
     *               PortletSession.getAttributeMap() call, does not create a new session, 
     *               only returns an existing session. If no session attributes exist this 
     *               method returns an empty Map.
     *             - PortletPreferences portletPreferences, providing access to the portlet
     *               preferences.
     *             - Map<String, String[]> portletPreferencesValues, providing access to the
     *               portlet preferences as a Map, equivalent to the PortletPreferences.getMap()
     *               call.
     *             These variables must reference the same Portlet API objects stored in the
     *             request object of the JSP as defined in the PLT.19.3.2 Included
     *             Request Attributes Section.
     */
    public void DefineObjectsProcessEventTest() throws Fault {
    	
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "DefineObjectsProcessEventTestPortlet");
        
		runStdTestForProcessEvent(portletInfo);
    }
    
    
    /*
     * @testName: DefineObjectsRenderTest
     * @assertion_ids: PORTLET:SPEC:313
     * @test_Strategy: Makes a request to the portlet that uses a 
     *                 PortletRequestDispatcher to include a JSP, 
     *                 which checks the variables.
     * @assertion: The defineObjects tag must define the following variables in the JSP
     *             page:
     *             - RenderRequest renderRequest when included from within the
     *               render method 
     *             - RenderResponse renderResponse when included from within
     *               the render method
     *             - PortletConfig portletConfig
     *             - PortletSession portletSession, providing access to the portletSession, 
     *               does not create a new session, only returns an existing session.
     *            - Map<String, Object> portletSessionScope, providing access to the
     *               portletSession attributes as a Map equivalent to the
     *               PortletSession.getAttributeMap() call, does not create a new session, 
     *               only returns an existing session. If no session attributes exist this 
     *               method returns an empty Map.
     *             - PortletPreferences portletPreferences, providing access to the portlet
     *               preferences.
     *             - Map<String, String[]> portletPreferencesValues, providing access to the
     *               portlet preferences as a Map, equivalent to the PortletPreferences.getMap()
     *               call.
     *             These variables must reference the same Portlet API objects stored in the
     *             request object of the JSP as defined in the PLT.19.3.2 Included
     *             Request Attributes Section.
     */
    public void DefineObjectsRenderTest() throws Fault {
    	
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "DefineObjectsRenderTestPortlet");
        
		runStdTestForRender(portletInfo);
    }
   
    
    /*
     * @testName: DefineObjectsServeResourceTest
     * @assertion_ids: PORTLET:SPEC:313
     * @test_Strategy: Makes a request to the portlet to get the ResoureURL.
     *                 In the second request the portlet uses a 
     *                 PortletRequestDispatcher to include 
     *                 a JSP, which checks the variables.
     * @assertion: The defineObjects tag must define the following variables in the JSP
     *             page:
     *             - ResourceRequest resourceRequest when included from within the
     *               render method 
     *             - ResourceResponse resourceResponse when included from within
     *               the render method
     *             - PortletConfig portletConfig
     *             - PortletSession portletSession, providing access to the portletSession, 
     *               does not create a new session, only returns an existing session.
     *             - Map<String, Object> portletSessionScope, providing access to the
     *               portletSession attributes as a Map equivalent to the
     *               PortletSession.getAttributeMap() call, does not create a new session, 
     *               only returns an existing session. If no session attributes exist this 
     *               method returns an empty Map.
     *             - PortletPreferences portletPreferences, providing access to the portlet
     *               preferences.
     *             - Map<String, String[]> portletPreferencesValues, providing access to the
     *               portlet preferences as a Map, equivalent to the PortletPreferences.getMap()
     *               call.
     *             These variables must reference the same Portlet API objects stored in the
     *             request object of the JSP as defined in the PLT.19.3.2 Included
     *             Request Attributes Section.
     */
    public void DefineObjectsServeResourceTest() throws Fault {
    	
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "DefineObjectsServeResourceTestPortlet");
        
		runStdTestForServeResource(portletInfo);
    }
    

    /*
     * @testName: NamespaceTagUniquenessTest
     * @assertion_ids: PORTLET:SPEC:346
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has an renderURL using the renderURL tag 
     *                 and a namespace using the namespace tag.  
     *                 In the second request, the render() method prints
     *                 the result of PortletResponse.getNamespace().
     *                 The test is passed, when both namespace strings are equal.
     * @assertion: 	The namespace tag produces a unique value for the
     * 				current portlet and must match the value of the 
     * 				PortletResponse.getNamespace().
     */
        public void NamespaceTagUniquenessTest() throws Fault {
        	
        	TSPortletInfo portletInfo = new TSPortletInfo(
        			getDefaultPortletApp(),
        			"NamespaceTagUniquenessTestPortlet");
        	
        	  /*****************************************************************
             * FIRST TRIP: To get a PortletURL string created by the
             *             renderURL tag.
             *****************************************************************/

            /*
             * Sets the GET request to be sent out to the server.
             */
            String firstRequest = getPortalURL(portletInfo);
            setRequestProperty(REQUEST, firstRequest);

            /*
             * Sets the test criteria.
             */
            setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
                ResultWriter.getFailedString(getTestName()));

            /*
             * Invokes the test.
             */
            HttpResponse firstResponse = invoke();

            /*****************************************************************
             * SECOND TRIP: To send the second request.
             *****************************************************************/

            /*
             * Extracts the PortletURL string from the content of the
             * HttpResponse of the first pass.
             */
            String portletURL = PortletURLClientTag.extractContent(firstResponse);

            /*
             *  Extracts the namespace included in the first response
             */
            PortletTCKCustomClientTag namespaceTag = 
            	new PortletTCKCustomClientTag("namespace");
            
            String namespaceFromServlet = namespaceTag.extractTag(firstResponse);
                   
            /*
             * Sets the second GET request to be sent out to the server and
             * includes a property containing the namespace
             */
            String secondRequest = getPortalReturnURL(portletURL);
            setRequestProperty(REQUEST, secondRequest);
              
            /*
             * Sets the test criteria.
             */
            setCriteriaProperty(SEARCH_STRING,
                namespaceFromServlet);

            /*
             * Invokes the test.
             */
            invoke(firstResponse);
        }

    
    /*
     * @testName: PortletTaglibImplementedTest
     * @assertion_ids: PORTLET:SPEC:312
     * @test_Strategy: Uses a PortletRequestDispatcher to include a
     *                 JSP that uses the portlet tag library by
     *                 declaring this in a taglib like this (using the 
     *                 suggested prefix value):
     *                 <%@ taglib uri="http://java.sun.com/portlet_2_0" prefix="portlet" %>
     * @assertion: The portlet-container must provide an
     *             implementation of the portlet tag library.
     */
    public void PortletTaglibImplementedTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "PortletTaglibImplementedTestPortlet");

        runStdTestForRender(portletInfo);
    }

    /*
     * @testName: RenderURLCopyCurrentRenderParametersAppendTest
     * @assertion_ids: PORTLET:SPEC:337;PORTLET:SPEC:349
     * @test_Strategy: Makes a first request to the portlet that
     *				   creates a renderURL with parameters added.
     *				   In the second request, the portlet uses a PortletRequestDispatcher
     *				   to include a JSP that has an renderURL tag with the
     *                 copyCurrentRenderParameters attribute set to true and 
     *                 with parameters added (one with empty value) using the param tag.
     *                 In the third request, the render() method checks the
     *                 parameter map. 
     * @assertion: copyCurrentRenderParameters (Type: boolean, non-required) – 
     *             if set to true requests that the private render parameters 
     *             of the portlet of the current request must be attached to this URL.
     *             If additional <portlet:param> tags are specified parameters with 
     *             the same name as an existing render parameter will get merged and 
     *             the value defined in the <portlet:param> tag must be prepended. 
     *             
     *             If the param tag has an empty value the specified parameter name 
     *             must be removed from the URL.
     */
    public void RenderURLCopyCurrentRenderParametersAppendTest() throws Fault {
    	 /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLCopyCurrentRenderParametersAppendTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get the RenderURL string created by
         *             createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();
                
        /*
         * Extracts the PortletURL for the render() method from the
         * content of the HttpResponse of the first pass.
         */
        String renderUrl = PortletURLClientTag.extractContent(firstResponse);
        
        /*****************************************************************
         * SECOND TRIP: To get the RenderURL string created by
         *             the renderURL tag.
         *****************************************************************/
        
        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(renderUrl);
        setRequestProperty(REQUEST, secondRequest);
        
        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getPassedString(getTestName()));
        
        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);
        
        /*****************************************************************
         * THIRD TRIP: To send the third request to the render() method.
         *****************************************************************/
        
        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the second pass.
         */
         String secondRenderUrl = PortletURLClientTag.extractContent(secondResponse);
                  
         /*
          * Sets the third GET request to be sent out to the server.
          */
        String thirdRequest = getPortalReturnURL(secondRenderUrl);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(secondResponse);  
    	
    }
    
    /*
     * @testName: RenderURLCopyCurrentRenderParametersTest
     * @assertion_ids: PORTLET:SPEC:336
     * @test_Strategy: Makes a first request to the portlet that
     *				   creates a renderURL with parameters added.
     *				   In the second request, the portlet uses a PortletRequestDispatcher
     *				   to include a JSP that has an renderURL tag with the
     *                 copyCurrentRenderParameters attribute set to true.
     *                 In the third request, the render() method checks the
     *                 parameter map. 
     * @assertion: copyCurrentRenderParameters (Type: boolean, non-required) – 
     *             if set to true requests that the private render parameters 
     *             of the portlet of the current request must be attached to this URL.
     */
    public void RenderURLCopyCurrentRenderParametersTest() throws Fault {
    	 /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLCopyCurrentRenderParametersTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get the RenderURL string created by
         *             createRenderURL().
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the test.
         */
        HttpResponse firstResponse = invoke();
                
        /*
         * Extracts the PortletURL for the render() method from the
         * content of the HttpResponse of the first pass.
         */
        String renderUrl = PortletURLClientTag.extractContent(firstResponse);
        
        /*****************************************************************
         * SECOND TRIP: To get the RenderURL string created by
         *             the renderURL tag.
         *****************************************************************/
        
        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(renderUrl);
        setRequestProperty(REQUEST, secondRequest);
        
        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
            ResultWriter.getPassedString(getTestName()));
        
        /*
         * Invokes the test.
         */
        HttpResponse secondResponse = invoke(firstResponse);
        
        /*****************************************************************
         * THIRD TRIP: To send the third request to the render() method.
         *****************************************************************/
        
        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the second pass.
         */
         String secondRenderUrl = PortletURLClientTag.extractContent(secondResponse);
                  
         /*
          * Sets the third GET request to be sent out to the server.
          */
        String thirdRequest = getPortalReturnURL(secondRenderUrl);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
            ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke(secondResponse);      	
    }
    
    /*
     * @testName: RenderURLEscapeXmlTest
     * @assertion_ids: PORTLET:SPEC:338
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has a renderURL tag with the escapeXml attribute 
     *                 set to true. The JSP checks the renderURL for correct 
     *                 xml escaping.  In the second request checks the parameter map
     *                 in render().
     * @assertion: escapeXml (Type: boolean, non-required) – determines whether
     * 			   characters <,>,&,’,” in the resulting output should be converted to their
     * 			   corresponding character entity codes (‘<’ gets converted to ‘&lt;’, ‘>’ gets
     * 			   converted to ‘&gt;’ ‘&’ gets converted to ‘&amp;’, ‘‘’ gets converted to
     * 			   ‘&#039;’, ‘”’ gets converted to ‘&#034;’).
     */
    public void RenderURLEscapeXmlTest() throws Fault {
    	/*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLEscapeXmlTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
    	        ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();	    	
    }
    
    /*
     * @testName: RenderURLIllegalPortletModeTest
     * @assertion_ids: PORTLET:SPEC:331
     * @test_Strategy: Uses a PortletRequestDispatcher to include a
     *                 JSP that has a renderURL tag with an illegal
     *                 portlet mode specified.  Checks that
     *                 JspException is thrown.
     * @assertion: If the specified portlet mode is illegal for the
     *             current request, a JspException must be thrown.
     */
    public void RenderURLIllegalPortletModeTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLIllegalPortletModeTestPortlet");

        runStdTestForRender(portletInfo);
    }

    /*
     * @testName: RenderURLIllegalWindowStateTest
     * @assertion_ids: PORTLET:SPEC:328
     * @test_Strategy: Uses a PortletRequestDispatcher to include a
     *                 JSP that has a renderURL tag with an illegal
     *                 window state specified.  Checks that
     *                 JspException is thrown.
     * @assertion: If the specified window state is illegal for the
     *             current request, a JspException must be thrown.
     */
    public void RenderURLIllegalWindowStateTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLIllegalWindowStateTestPortlet");

        runStdTestForRender(portletInfo);
    }
    
    /*
     * @testName: RenderURLPortletModeNotSetTest
     * @assertion_ids: PORTLET:SPEC:332
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has a renderURL tag without the
     *                 portletMode attribute.  In the second request,
     *                 checks that the portlet mode stays as VIEW
     *                 (i.e. doView() is invoked).
     * @assertion: If a portlet mode is not set for a URL, it must
     *             stay the same as the mode of the current request.
     */
    public void RenderURLPortletModeNotSetTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLPortletModeNotSetTestPortlet");

        runStdTestForRenderWithParameters(portletInfo);
    }

    /*
     * @testName: RenderURLPortletModeTest
     * @assertion_ids: PORTLET:SPEC:330
     * @test_Strategy: Declares in the deployment descriptor that the
     *                 portlet supports the EDIT mode.  Makes a first
     *                 request to the portlet that uses a
     *                 PortletRequestDispatcher to include a JSP that
     *                 has a renderURL tag with portletMode set to
     *                 EDIT.  In the second request, checks that
     *                 doEdit() is invoked.
     * @assertion: portletMode (Type: String, non-required) -
     *             indicates the portlet mode that the portlet must
     *             have when this link is executed, if no error
     *             condition ocurred.
     */
    public void RenderURLPortletModeTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLPortletModeTestPortlet");

        runStdTestForRenderWithParameters(portletInfo);
    }

    /*
     * @testName: RenderURLTest
     * @assertion_ids: PORTLET:SPEC:327;PORTLET:SPEC:347;PORTLET:SPEC:350;
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has a render URL using the renderURL tag
     *                 with parameters with equeal names added using 
     *                 the param tag.  In the second request, 
     *                 checks for the parameter map in render().
     * @assertion: The portlet renderURL tag creates a URL that must
     *             point to the current portlet and must trigger a
     *             render request with the supplied parameters.
     *            
     *             The param tag defines a parameter that may be added 
     *             to an renderURL. 
     *             
     *             If the same name of a parameter occurs 
     *             more than once within a render URL the values must be 
     *             delivered as parameter value array with the values in the 
     *             order of the declaration within the URL tag. 
     */
    public void RenderURLTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLTestPortlet");

        runStdTestForRenderWithParameters(portletInfo);
    }

    /*
     * @testName: RenderURLVarInLoopTest
     * @assertion_ids: PORTLET:SPEC:334
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, add a parameter using the param
     *                 tag to a renderURL tag with the var attribute.
     *                 Does this twice using a loop, with different
     *                 parameter value in each pass.  Then the value
     *                 of the variable is printed out to the
     *                 JspWriter.  In the second request, checks for
     *                 this parameter in render().
     * @assertion: If the given variable name is used within an
     *             iteration loop, the new value overwrites the old one.
     */
    public void RenderURLVarInLoopTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLVarInLoopTestPortlet");
        
        runStdTestForRenderWithParameters(portletInfo);
    }
        
        

    /*
     * @testName: RenderURLVarOverwriteTest
     * @assertion_ids: PORTLET:SPEC:334
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, add a parameter using the param
     *                 tag to an renderURL tag with the var attribute,
     *                 then the value of the variable obtained using
     *                 another renderURL tag (with the same parameter
     *                 added but using different value) with the same
     *                 var attribute is printed out to the JspWriter.
     *                 In the second request, checks for this
     *                 parameter in render().
     * @assertion: If the given variable name already exists in the
     *             scope of the page, the new value overwrites the old one.
     */
    public void RenderURLVarOverwriteTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLVarOverwriteTestPortlet");

        runStdTestForRenderWithParameters(portletInfo);
    }

    /*
     * @testName: RenderURLVarTest
     * @assertion_ids: PORTLET:SPEC:333
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, the value of a variable obtained
     *                 using the renderURL tag (with a parameter added
     *                 using the param tag) with the var attribute is
     *                 printed out to the JspWriter.  In the second
     *                 request, checks for this parameter in render().
     * @assertion: var (Type: String, non-required) - name of the
     *             exported scoped variable for the render URL.  The
     *             exported scoped variable must be a String.  By
     *             default, the result of the URL processing is
     *             written to the current JspWriter.  If the result is
     *             exported as a JSP scoped variable, defined via the
     *             var attributes, nothing is written to the current JspWriter.
     */
    public void RenderURLVarTest() throws Fault {
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "RenderURLVarTestPortlet");

        runStdTestForRenderWithParameters(portletInfo);
    }
    
    /*
     * @testName: ResourceURLAppendParameterTest
     * @assertion_ids: PORTLET:SPEC:341
     * @test_Strategy: Makes a first request to the portlet that
     *				   creates a renderURL with parameters added.
     *				   In the the portlet uses a PortletRequestDispatcher
     *				   to include a JSP that has an resourceURL tag  
     *                 with a parameter added using the param tag.
     *                 In the third request the serveResource() method checks the
     *                 parameter map. 
     * @assertion: Parameters may be added by including the param tag 
     *             between the resourceURL start and end tags. If such 
     *             a parameter has the same name as a render parameter 
     *             in this URL, the render parameter value must be the 
     *             last value in the attribute value array.
     */
    public void ResourceURLAppendParameterTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "ResourceURLAppendParameterTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a render PortletURL string created with
         * 			   parameters set.
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
        		ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the first test
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To get a ResourceURL string created by the
         *              resourceURL tag.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */        
        String renderURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(renderURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
        		ResultWriter.getFailedString(getTestName()));

        /*
         * 	Invokes the test.
         */
        HttpResponse secondResponse =invoke(firstResponse);    	
        
        /*****************************************************************
         * THIRD TRIP: To send the third request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */        
        String resourceURL = PortletURLClientTag.extractContent(secondResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String thirdRequest = getPortalReturnURL(resourceURL);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
        		ResultWriter.getPassedString(getTestName()));

        /*
         * 	Invokes the test.
         */
        invoke(secondResponse);      	
    	
    }
    
    /*
     * @testName: ResourceURLEscapeXmlTest
     * @assertion_ids: PORTLET:SPEC:345
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has a resourceURL using the resourceURL tag
     *                 with the escapeXml attribut set to true and 
     *                 with parameters added using the param tag.  
     *                 The JSP checks the resourceURL for correct xml escaping.
     *                 In the second request, checks for this parameter
     *                 in serveResource().
     * @assertion: escapeXml (Type: boolean, non-required) – deterrmines whether
     * 			   characters <,>,&,’,” in the resulting output should be converted to their
     * 			   corresponding character entity codes (‘<’ gets converted to ‘&lt;’, ‘>’ gets
     * 			   converted to ‘&gt;’ ‘&’ gets converted to ‘&amp;’, ‘‘’ gets converted to
     * 			   ‘&#039;’, ‘”’ gets converted to ‘&#034;’).
     */
    public void ResourceURLEscapeXmlTest() throws Fault {
        /*
         * Sets the GET request to be sent out to the server.
         */
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResourceURLEscapeXmlTestPortlet");

        String request = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, request);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
    	        ResultWriter.getPassedString(getTestName()));

        /*
         * Invokes the test.
         */
        invoke();   	
    }
    
    /*
     * @testName: ResourceURLPreservesPortletModeTest
     * @assertion_ids: PORTLET:SPEC:340
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has an resourceURL tag. In the second request,
     *                 checks that the portlet mode stays as VIEW.
     * @assertion: The resourceURL must preserve the current portlet mode.
     */
    public void ResourceURLPreservesPortletModeTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "ResourceURLPreservesPortletModeTestPortlet");
        
        runStdTestForServeResource(portletInfo);
    }
            
    
    /*
     * @testName: ResourceURLPreservesRenderParametersTest
     * @assertion_ids: PORTLET:SPEC:340
     * @test_Strategy: Makes a first request to the portlet that
     *				   creates a renderURL with parameters added.
     *				   In the second repuest the portlet uses 
     *                 a PortletRequestDispatcher to include a JSP 
     *                 that has an resourceURL tag.
     *                 In the third request checks the parameter map 
     *                 in serveResource. 
     * @assertion:  The resourceURL must preserve the current render parameters.
     */
    public void ResourceURLPreservesRenderParametersTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "ResourceURLPreservesRenderParametersTestPortlet");

        /*****************************************************************
         * FIRST TRIP: To get a ResourceURL string created by the
         *             resourceURL tag.
         *****************************************************************/

        /*
         * Sets the GET request to be sent out to the server.
         */
        String firstRequest = getPortalURL(portletInfo);
        setRequestProperty(REQUEST, firstRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
        		ResultWriter.getFailedString(getTestName()));

        /*
         * Invokes the first test
         */
        HttpResponse firstResponse = invoke();

        /*****************************************************************
         * SECOND TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */        
        String renderURL = PortletURLClientTag.extractContent(firstResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String secondRequest = getPortalReturnURL(renderURL);
        setRequestProperty(REQUEST, secondRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(UNEXPECTED_RESPONSE_MATCH,
        		ResultWriter.getFailedString(getTestName()));

        /*
         * 	Invokes the test.
         */
        HttpResponse secondResponse =invoke(firstResponse);    	
        
        /*****************************************************************
         * THIRD TRIP: To send the second request.
         *****************************************************************/

        /*
         * Extracts the PortletURL string from the content of the
         * HttpResponse of the first pass.
         */        
        String resourceURL = PortletURLClientTag.extractContent(secondResponse);

        /*
         * Sets the second GET request to be sent out to the server.
         */
        String thirdRequest = getPortalReturnURL(resourceURL);
        setRequestProperty(REQUEST, thirdRequest);

        /*
         * Sets the test criteria.
         */
        setCriteriaProperty(SEARCH_STRING,
        		ResultWriter.getPassedString(getTestName()));

        /*
         * 	Invokes the test.
         */
        invoke(secondResponse);  
    }
    
    
    /*
     * @testName: ResourceURLPreservesWindowStateTest
     * @assertion_ids: PORTLET:SPEC:340
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has an resourceURL.  In the second request,
     *                 checks that the window state stays the same.
     * @assertion:  The resourceURL must preserve the window state.
     */
    public void ResourceURLPreservesWindowStateTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "ResourceURLPreservesWindowStateTestPortlet");

        runStdTestForServeResource(portletInfo);
    }
    
    
    /*
     * @testName: ResourceURLTest
     * @assertion_ids: PORTLET:SPEC:339;PORTLET:SPEC:347;PORTLET:SPEC:350;
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP
     *                 that has a resourceURL tag with a parameters 
     *                 with equal names added using the param tag.  
     *                 In  the second request checks the parameter map 
     *                 in serveResource().
     * @assertion: The portlet resourceURL tag creates a URL that must 
     *             point to the current portlet and must trigger a 
     *             serveResource request with the supplied parameters.
     *             
     *             The param tag defines a parameter that may be added 
     *             to an resourceURL. 
     *             
     *             If the same name of a parameter occurs 
     *             more than once within an resourceURL the values must be 
     *             delivered as parameter value array with the values in the 
     *             order of the declaration within the URL tag.
     */
    public void ResourceURLTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResourceURLTestPortlet");
        
        runStdTestForServeResource(portletInfo);
    }
    
    
    /*
     * @testName: ResourceURLVarInLoopTest
     * @assertion_ids: PORTLET:SPEC:343
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, adds a parameter using the param
     *                 tag to a resourceURL tag with the var attribute.
     *                 Does this twice using a loop, with different
     *                 parameter value in each pass.  Then the value
     *                 of the variable is printed out to the
     *                 JspWriter.  In the second request, checks for
     *                 this parameter in serveResource().
     * @assertion: If the given variable name is used within an
     *             iteration loop, the new value overwrites the old one.
     */
    public void ResourceURLVarInLoopTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "ResourceURLVarInLoopTestPortlet");

       runStdTestForServeResource(portletInfo);
    }
    
    
    /*
     * @testName: ResourceURLVarOverwriteTest
     * @assertion_ids: PORTLET:SPEC:343
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, adds a parameter using the param
     *                 tag to an resourceURL tag with the var attribute,
     *                 then the value of the variable obtained using
     *                 another resourceURL tag (with the same parameter
     *                 added but using different value) with the same
     *                 var attribute is printed out to the JspWriter.
     *                 In the second request, checks for this
     *                 parameter in serveResource().
     * @assertion: If the given variable name already exists in the
     *             scope of the page, the new value overwrites the old one.
     */
    public void ResourceURLVarOverwriteTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                getDefaultPortletApp(),
                "ResourceURLVarOverwriteTestPortlet");

        runStdTestForServeResource(portletInfo);
    }
    
    
    /*
     * @testName: ResourceURLVarTest
     * @assertion_ids: PORTLET:SPEC:342
     * @test_Strategy: Makes a first request to the portlet that uses
     *                 a PortletRequestDispatcher to include a JSP.
     *                 In this JSP, the value of a variable obtained
     *                 using the resourceURL tag (with a parameter added
     *                 using the param tag) with the var attribute is
     *                 printed out to the JspWriter.  In the second
     *                 request, checks for this parameter in serveResource().
     * @assertion: var (Type: String, non-required) - name of the
     *             exported scoped variable for the resource URL.  The
     *             exported scoped variable must be a String.  By
     *             default, the result of the URL processing is
     *             written to the current JspWriter.  If the result is
     *             exported as a JSP scoped variable, defined via the
     *             var attributes, nothing is written to the current JspWriter.
     */
    public void ResourceURLVarTest() throws Fault {
    	
        TSPortletInfo portletInfo = new TSPortletInfo(
                                        getDefaultPortletApp(),
                                        "ResourceURLVarTestPortlet");

        runStdTestForServeResource(portletInfo);    
    }
}
